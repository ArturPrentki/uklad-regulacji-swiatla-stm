
projekt_koncowy1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de4  08007de4  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dec  08007dec  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  200000ac  08007ea0  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  08007ea0  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2f9  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003959  00000000  00000000  0003b3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  0003ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  00040270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029178  00000000  00000000  000415d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7a5  00000000  00000000  0006a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6067  00000000  00000000  00087eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017df54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fdc  00000000  00000000  0017dfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007bdc 	.word	0x08007bdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	08007bdc 	.word	0x08007bdc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	b299      	uxth	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f107 020f 	add.w	r2, r7, #15
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	f001 fcbd 	bl	8001f64 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 80005ea:	2310      	movs	r3, #16
 80005ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	b299      	uxth	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f107 020f 	add.w	r2, r7, #15
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	f001 fcae 	bl	8001f64 <HAL_I2C_Master_Transmit>
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	b299      	uxth	r1, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f107 020c 	add.w	r2, r7, #12
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	f001 fd8d 	bl	800214c <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 8000632:	7b3b      	ldrb	r3, [r7, #12]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	7b7a      	ldrb	r2, [r7, #13]
 8000638:	4313      	orrs	r3, r2
 800063a:	ee07 3a90 	vmov	s15, r3
 800063e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000642:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000658 <BH1750_ReadIlluminance_lux+0x48>
 8000646:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800064a:	eef0 7a66 	vmov.f32	s15, s13
}
 800064e:	eeb0 0a67 	vmov.f32	s0, s15
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	3f99999a 	.word	0x3f99999a

0800065c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b9c      	ldr	r3, [pc, #624]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a9b      	ldr	r2, [pc, #620]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b99      	ldr	r3, [pc, #612]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068a:	4b96      	ldr	r3, [pc, #600]	; (80008e4 <MX_GPIO_Init+0x288>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a95      	ldr	r2, [pc, #596]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000690:	f043 0320 	orr.w	r3, r3, #32
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b93      	ldr	r3, [pc, #588]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0320 	and.w	r3, r3, #32
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	4b90      	ldr	r3, [pc, #576]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a8f      	ldr	r2, [pc, #572]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b8d      	ldr	r3, [pc, #564]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b8a      	ldr	r3, [pc, #552]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a89      	ldr	r2, [pc, #548]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b87      	ldr	r3, [pc, #540]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b84      	ldr	r3, [pc, #528]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a83      	ldr	r2, [pc, #524]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b81      	ldr	r3, [pc, #516]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	4b7e      	ldr	r3, [pc, #504]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a7d      	ldr	r2, [pc, #500]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b7b      	ldr	r3, [pc, #492]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	4b78      	ldr	r3, [pc, #480]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a77      	ldr	r2, [pc, #476]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b75      	ldr	r3, [pc, #468]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000720:	4871      	ldr	r0, [pc, #452]	; (80008e8 <MX_GPIO_Init+0x28c>)
 8000722:	f001 fb37 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	4870      	ldr	r0, [pc, #448]	; (80008ec <MX_GPIO_Init+0x290>)
 800072c:	f001 fb32 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	486e      	ldr	r0, [pc, #440]	; (80008f0 <MX_GPIO_Init+0x294>)
 8000736:	f001 fb2d 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800073a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000740:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4867      	ldr	r0, [pc, #412]	; (80008f0 <MX_GPIO_Init+0x294>)
 8000752:	f001 f95b 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn11_Pin;
 8000756:	2308      	movs	r3, #8
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075e:	2301      	movs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn11_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4862      	ldr	r0, [pc, #392]	; (80008f4 <MX_GPIO_Init+0x298>)
 800076a:	f001 f94f 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn2_Pin;
 800076e:	2301      	movs	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000778:	2302      	movs	r3, #2
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn2_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	485b      	ldr	r0, [pc, #364]	; (80008f0 <MX_GPIO_Init+0x294>)
 8000784:	f001 f942 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000788:	2332      	movs	r3, #50	; 0x32
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000798:	230b      	movs	r3, #11
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4853      	ldr	r0, [pc, #332]	; (80008f0 <MX_GPIO_Init+0x294>)
 80007a4:	f001 f932 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn3_Pin;
 80007a8:	2308      	movs	r3, #8
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn3_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	484d      	ldr	r0, [pc, #308]	; (80008f0 <MX_GPIO_Init+0x294>)
 80007bc:	f001 f926 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007c0:	2386      	movs	r3, #134	; 0x86
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	230b      	movs	r3, #11
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4847      	ldr	r0, [pc, #284]	; (80008f8 <MX_GPIO_Init+0x29c>)
 80007dc:	f001 f916 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn1_Pin;
 80007e0:	2308      	movs	r3, #8
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ea:	2302      	movs	r3, #2
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4840      	ldr	r0, [pc, #256]	; (80008f8 <MX_GPIO_Init+0x29c>)
 80007f6:	f001 f909 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80007fa:	f244 0301 	movw	r3, #16385	; 0x4001
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4835      	ldr	r0, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x28c>)
 8000814:	f001 f8fa 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082a:	230b      	movs	r3, #11
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	482c      	ldr	r0, [pc, #176]	; (80008e8 <MX_GPIO_Init+0x28c>)
 8000836:	f001 f8e9 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4826      	ldr	r0, [pc, #152]	; (80008ec <MX_GPIO_Init+0x290>)
 8000852:	f001 f8db 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x290>)
 800086a:	f001 f8cf 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x294>)
 8000886:	f001 f8c1 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800088a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089c:	230b      	movs	r3, #11
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4811      	ldr	r0, [pc, #68]	; (80008ec <MX_GPIO_Init+0x290>)
 80008a8:	f001 f8b0 	bl	8001a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2006      	movs	r0, #6
 80008b2:	f000 ffe2 	bl	800187a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008b6:	2006      	movs	r0, #6
 80008b8:	f000 fffb 	bl	80018b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2009      	movs	r0, #9
 80008c2:	f000 ffda 	bl	800187a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008c6:	2009      	movs	r0, #9
 80008c8:	f000 fff3 	bl	80018b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f000 ffd2 	bl	800187a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d6:	2028      	movs	r0, #40	; 0x28
 80008d8:	f000 ffeb 	bl	80018b2 <HAL_NVIC_EnableIRQ>

}
 80008dc:	bf00      	nop
 80008de:	3730      	adds	r7, #48	; 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400
 80008ec:	40021800 	.word	0x40021800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40021400 	.word	0x40021400
 80008f8:	40020000 	.word	0x40020000

080008fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_I2C1_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_I2C1_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_I2C1_Init+0x74>)
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <MX_I2C1_Init+0x7c>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_I2C1_Init+0x74>)
 8000914:	2201      	movs	r2, #1
 8000916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_I2C1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_I2C1_Init+0x74>)
 8000938:	f001 fa84 	bl	8001e44 <HAL_I2C_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000942:	f000 f9f1 	bl	8000d28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <MX_I2C1_Init+0x74>)
 800094a:	f001 ff61 	bl	8002810 <HAL_I2CEx_ConfigAnalogFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000954:	f000 f9e8 	bl	8000d28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_I2C1_Init+0x74>)
 800095c:	f001 ffa3 	bl	80028a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 f9df 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000c8 	.word	0x200000c8
 8000974:	40005400 	.word	0x40005400
 8000978:	00808cd2 	.word	0x00808cd2

0800097c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0aa      	sub	sp, #168	; 0xa8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2284      	movs	r2, #132	; 0x84
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f005 ffeb 	bl	8006978 <memset>
  if(i2cHandle->Instance==I2C1)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <HAL_I2C_MspInit+0xb4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d13c      	bne.n	8000a26 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fde2 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009c6:	f000 f9af 	bl	8000d28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <HAL_I2C_MspInit+0xbc>)
 8000a0a:	f000 ffff 	bl	8001a0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 8000a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a26:	bf00      	nop
 8000a28:	37a8      	adds	r7, #168	; 0xa8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400

08000a3c <__led_gpio_toggle>:
  * @brief Toggles LED's GPIO pin
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void __led_gpio_toggle(const LED_GPIO_Handle_TypeDef* hled)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(hled->Port, hled->Pin);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	889b      	ldrh	r3, [r3, #4]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4610      	mov	r0, r2
 8000a50:	f001 f9b9 	bl	8001dc6 <HAL_GPIO_TogglePin>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <__led_gpio_read>:
  * @brief Reads LED's GPIO pin
  * @param[in] hled		: LED GPIO handler
  * @retval GPIO pin state (0/1)
  */
_Bool __led_gpio_read(const LED_GPIO_Handle_TypeDef* hled)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	return (_Bool)HAL_GPIO_ReadPin(hled->Port, hled->Pin);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4610      	mov	r0, r2
 8000a70:	f001 f978 	bl	8001d64 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <LED_GPIO_Toggle>:
  * @brief Toggles LED state
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_Toggle(const LED_GPIO_Handle_TypeDef* hled)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	__led_gpio_toggle(hled);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffd3 	bl	8000a3c <__led_gpio_toggle>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <LED_GPIO_Read>:
  * @brief Reads LED state
  * @param[in] hled		: LED GPIO handler
  * @retval	LED state (LED_OFF or LED_ON)
  */
LED_GPIO_State_TypeDef LED_GPIO_Read(const LED_GPIO_Handle_TypeDef* hled)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	_Bool state = __led_gpio_read(hled);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffd8 	bl	8000a5c <__led_gpio_read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
	return hled->ActiveState == LED_ON_HIGH ? state : !state;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	799b      	ldrb	r3, [r3, #6]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d101      	bne.n	8000abc <LED_GPIO_Read+0x1e>
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	e003      	b.n	8000ac4 <LED_GPIO_Read+0x26>
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f083 0301 	eor.w	r3, r3, #1
 8000ac2:	b2db      	uxtb	r3, r3
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_TIM_PeriodElapsedCallback>:
//    static char message2[] = "Forbot jest super!\r\n";
//    HAL_UART_Transmit_IT(&huart3, (uint8_t*)message2, strlen(message2));
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim == &htim4)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d137      	bne.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0x80>
  {
    LED_GPIO_Toggle(&hld1);
 8000adc:	481e      	ldr	r0, [pc, #120]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ade:	f7ff ffd3 	bl	8000a88 <LED_GPIO_Toggle>
    LD1_State = LED_GPIO_Read(&hld1);
 8000ae2:	481d      	ldr	r0, [pc, #116]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ae4:	f7ff ffdb 	bl	8000a9e <LED_GPIO_Read>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000af6:	701a      	strb	r2, [r3, #0]
//		char message[] = char(light);
//		HAL_UART_Transmit_IT(&huart3, (uint8_t*)message, strlen(message));
    light = BH1750_ReadIlluminance_lux(&hbh1750_1);
 8000af8:	4819      	ldr	r0, [pc, #100]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000afa:	f7ff fd89 	bl	8000610 <BH1750_ReadIlluminance_lux>
 8000afe:	eef0 7a40 	vmov.f32	s15, s0
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b04:	edc3 7a00 	vstr	s15, [r3]
	char msg[32] = { 0, };
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]
	int msg_len = sprintf(msg, "Illuminance:  %d [lx]\r\n", (int)light);
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	ee17 2a90 	vmov	r2, s15
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f005 ff27 	bl	8006988 <siprintf>
 8000b3a:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_len, 100);
 8000b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f107 010c 	add.w	r1, r7, #12
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	4809      	ldr	r0, [pc, #36]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b48:	f004 fb16 	bl	8005178 <HAL_UART_Transmit>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200001a0 	.word	0x200001a0
 8000b58:	2000000c 	.word	0x2000000c
 8000b5c:	2000014c 	.word	0x2000014c
 8000b60:	20000000 	.word	0x20000000
 8000b64:	2000011c 	.word	0x2000011c
 8000b68:	08007bf4 	.word	0x08007bf4
 8000b6c:	200001ec 	.word	0x200001ec

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b74:	f000 fd25 	bl	80015c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f86e 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f7ff fd6e 	bl	800065c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b80:	f000 fbb6 	bl	80012f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b84:	f000 fc4c 	bl	8001420 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000b88:	f000 fa44 	bl	8001014 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000b8c:	f7ff feb6 	bl	80008fc <MX_I2C1_Init>
  MX_TIM4_Init();
 8000b90:	f000 fac6 	bl	8001120 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b94:	2100      	movs	r1, #0
 8000b96:	4825      	ldr	r0, [pc, #148]	; (8000c2c <main+0xbc>)
 8000b98:	f003 fa16 	bl	8003fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <main+0xbc>)
 8000ba0:	f003 fa12 	bl	8003fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000ba4:	4822      	ldr	r0, [pc, #136]	; (8000c30 <main+0xc0>)
 8000ba6:	f003 f935 	bl	8003e14 <HAL_TIM_Base_Start_IT>

  BH1750_Init(&hbh1750_1);
 8000baa:	4822      	ldr	r0, [pc, #136]	; (8000c34 <main+0xc4>)
 8000bac:	f7ff fd0a 	bl	80005c4 <BH1750_Init>
  {



//Komunikacja z bh1750
	  light = BH1750_ReadIlluminance_lux(&hbh1750_1);
 8000bb0:	4820      	ldr	r0, [pc, #128]	; (8000c34 <main+0xc4>)
 8000bb2:	f7ff fd2d 	bl	8000610 <BH1750_ReadIlluminance_lux>
 8000bb6:	eef0 7a40 	vmov.f32	s15, s0
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <main+0xc8>)
 8000bbc:	edc3 7a00 	vstr	s15, [r3]
//	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_len, 100);
//	  HAL_Delay(100);
	  //to jest nasza wartość aktualna

	  //miejsce na przyjęcie wiadomości z uart
	  uart3_recived_status = HAL_UART_Receive (& huart3 , ( uint8_t *)single_message_recived ,strlen("999"), 250);
 8000bc0:	23fa      	movs	r3, #250	; 0xfa
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	491d      	ldr	r1, [pc, #116]	; (8000c3c <main+0xcc>)
 8000bc6:	481e      	ldr	r0, [pc, #120]	; (8000c40 <main+0xd0>)
 8000bc8:	f004 fb59 	bl	800527e <HAL_UART_Receive>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <main+0xd4>)
 8000bd2:	701a      	strb	r2, [r3, #0]
	  single_message_recived [4]= ' \0 ';
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <main+0xcc>)
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	711a      	strb	r2, [r3, #4]

	  if ( uart3_recived_status == HAL_OK )
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <main+0xd4>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d104      	bne.n	8000bec <main+0x7c>
	  {
		  sscanf((char*) single_message_recived, "%i" , &var);
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <main+0xd8>)
 8000be4:	4919      	ldr	r1, [pc, #100]	; (8000c4c <main+0xdc>)
 8000be6:	4815      	ldr	r0, [pc, #84]	; (8000c3c <main+0xcc>)
 8000be8:	f005 feee 	bl	80069c8 <siscanf>
//	  HAL_UART_Transmit (& huart3 , ( uint8_t *) single_message_response ,
//	  strlen ( single_message_response) , 10000) ;

	  //miesjce na regulator

	  light_ctrl = PID2DOF_GetOutput(&hlight_pid, var, light);
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <main+0xd8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <main+0xc8>)
 8000bfa:	ed93 7a00 	vldr	s14, [r3]
 8000bfe:	eef0 0a47 	vmov.f32	s1, s14
 8000c02:	eeb0 0a67 	vmov.f32	s0, s15
 8000c06:	4812      	ldr	r0, [pc, #72]	; (8000c50 <main+0xe0>)
 8000c08:	f000 f893 	bl	8000d32 <PID2DOF_GetOutput>
 8000c0c:	eef0 7a40 	vmov.f32	s15, s0
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <main+0xe4>)
 8000c12:	edc3 7a00 	vstr	s15, [r3]
	  //HAL_Delay(50);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, light_ctrl);
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <main+0xe4>)
 8000c18:	edd3 7a00 	vldr	s15, [r3]
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <main+0xbc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c24:	ee17 2a90 	vmov	r2, s15
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
	  light = BH1750_ReadIlluminance_lux(&hbh1750_1);
 8000c2a:	e7c1      	b.n	8000bb0 <main+0x40>
 8000c2c:	20000154 	.word	0x20000154
 8000c30:	200001a0 	.word	0x200001a0
 8000c34:	20000000 	.word	0x20000000
 8000c38:	2000011c 	.word	0x2000011c
 8000c3c:	20000120 	.word	0x20000120
 8000c40:	200001ec 	.word	0x200001ec
 8000c44:	20000144 	.word	0x20000144
 8000c48:	20000140 	.word	0x20000140
 8000c4c:	08007c0c 	.word	0x08007c0c
 8000c50:	20000014 	.word	0x20000014
 8000c54:	20000148 	.word	0x20000148

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2230      	movs	r2, #48	; 0x30
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 fe86 	bl	8006978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c7c:	f001 ffa8 	bl	8002bd0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <SystemClock_Config+0xc8>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <SystemClock_Config+0xc8>)
 8000c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <SystemClock_Config+0xc8>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <SystemClock_Config+0xcc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca0:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <SystemClock_Config+0xcc>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <SystemClock_Config+0xcc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ccc:	2348      	movs	r3, #72	; 0x48
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 ff87 	bl	8002bf0 <HAL_RCC_OscConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ce8:	f000 f81e 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cec:	230f      	movs	r3, #15
 8000cee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2102      	movs	r1, #2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fa15 	bl	8003138 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d14:	f000 f808 	bl	8000d28 <Error_Handler>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3750      	adds	r7, #80	; 0x50
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>

08000d32 <PID2DOF_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}
 
float PID2DOF_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b089      	sub	sp, #36	; 0x24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d3e:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 8000d42:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4e:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d68:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d90:	edd7 6a06 	vldr	s13, [r7, #24]
 8000d94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000db0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	edd3 7a06 	vldr	s15, [r3, #24]
 8000de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df0:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	edd3 7a08 	vldr	s15, [r3, #32]
 8000dfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e06:	dd03      	ble.n	8000e10 <PID2DOF_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e00f      	b.n	8000e30 <PID2DOF_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000e16:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e22:	d503      	bpl.n	8000e2c <PID2DOF_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e001      	b.n	8000e30 <PID2DOF_GetOutput+0xfe>
  else
	  u_sat = u;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 8000e30:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e34:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e38:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	d013      	beq.n	8000e6a <PID2DOF_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e58:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	ee07 3a90 	vmov	s15, r3
}
 8000e70:	eeb0 0a67 	vmov.f32	s0, s15
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 fb92 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn2_Pin);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f000 ff6b 	bl	8001dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn1_Pin);
 8000f2e:	2008      	movs	r0, #8
 8000f30:	f000 ff64 	bl	8001dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <TIM3_IRQHandler+0x10>)
 8000f3e:	f003 f93d 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000154 	.word	0x20000154

08000f4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM4_IRQHandler+0x10>)
 8000f52:	f003 f933 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001a0 	.word	0x200001a0

08000f60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <USART3_IRQHandler+0x10>)
 8000f66:	f004 fa4f 	bl	8005408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001ec 	.word	0x200001ec

08000f74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f7c:	f000 ff3e 	bl	8001dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f005 fcb6 	bl	8006924 <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20050000 	.word	0x20050000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	20000150 	.word	0x20000150
 8000fec:	20000790 	.word	0x20000790

08000ff0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <MX_TIM3_Init+0x104>)
 8001048:	4a34      	ldr	r2, [pc, #208]	; (800111c <MX_TIM3_Init+0x108>)
 800104a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <MX_TIM3_Init+0x104>)
 800104e:	2247      	movs	r2, #71	; 0x47
 8001050:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <MX_TIM3_Init+0x104>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <MX_TIM3_Init+0x104>)
 800105a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800105e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <MX_TIM3_Init+0x104>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <MX_TIM3_Init+0x104>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800106c:	482a      	ldr	r0, [pc, #168]	; (8001118 <MX_TIM3_Init+0x104>)
 800106e:	f002 fe79 	bl	8003d64 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001078:	f7ff fe56 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	4619      	mov	r1, r3
 8001088:	4823      	ldr	r0, [pc, #140]	; (8001118 <MX_TIM3_Init+0x104>)
 800108a:	f003 facb 	bl	8004624 <HAL_TIM_ConfigClockSource>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001094:	f7ff fe48 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001098:	481f      	ldr	r0, [pc, #124]	; (8001118 <MX_TIM3_Init+0x104>)
 800109a:	f002 ff33 	bl	8003f04 <HAL_TIM_PWM_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80010a4:	f7ff fe40 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4818      	ldr	r0, [pc, #96]	; (8001118 <MX_TIM3_Init+0x104>)
 80010b8:	f003 ff64 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010c2:	f7ff fe31 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	; 0x60
 80010c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <MX_TIM3_Init+0x104>)
 80010e0:	f003 f98c 	bl	80043fc <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80010ea:	f7ff fe1d 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	2204      	movs	r2, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM3_Init+0x104>)
 80010fa:	f003 f97f 	bl	80043fc <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8001104:	f7ff fe10 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM3_Init+0x104>)
 800110a:	f000 f89b 	bl	8001244 <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3738      	adds	r7, #56	; 0x38
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000154 	.word	0x20000154
 800111c:	40000400 	.word	0x40000400

08001120 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_TIM4_Init+0x98>)
 8001140:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <MX_TIM4_Init+0x9c>)
 8001142:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_TIM4_Init+0x98>)
 8001146:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800114a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_TIM4_Init+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_TIM4_Init+0x98>)
 8001154:	f242 720f 	movw	r2, #9999	; 0x270f
 8001158:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_TIM4_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_TIM4_Init+0x98>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <MX_TIM4_Init+0x98>)
 8001168:	f002 fdfc 	bl	8003d64 <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001172:	f7ff fdd9 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_TIM4_Init+0x98>)
 8001184:	f003 fa4e 	bl	8004624 <HAL_TIM_ConfigClockSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800118e:	f7ff fdcb 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_TIM4_Init+0x98>)
 80011a0:	f003 fef0 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80011aa:	f7ff fdbd 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001a0 	.word	0x200001a0
 80011bc:	40000800 	.word	0x40000800

080011c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <HAL_TIM_Base_MspInit+0x78>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d114      	bne.n	80011fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_TIM_Base_MspInit+0x7c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_TIM_Base_MspInit+0x7c>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_TIM_Base_MspInit+0x7c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	201d      	movs	r0, #29
 80011f0:	f000 fb43 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011f4:	201d      	movs	r0, #29
 80011f6:	f000 fb5c 	bl	80018b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011fa:	e018      	b.n	800122e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_TIM_Base_MspInit+0x80>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d113      	bne.n	800122e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_TIM_Base_MspInit+0x7c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_TIM_Base_MspInit+0x7c>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_TIM_Base_MspInit+0x7c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	201e      	movs	r0, #30
 8001224:	f000 fb29 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001228:	201e      	movs	r0, #30
 800122a:	f000 fb42 	bl	80018b2 <HAL_NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40000400 	.word	0x40000400
 800123c:	40023800 	.word	0x40023800
 8001240:	40000800 	.word	0x40000800

08001244 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <HAL_TIM_MspPostInit+0x9c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d137      	bne.n	80012d6 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <HAL_TIM_MspPostInit+0xa0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_TIM_MspPostInit+0xa0>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_TIM_MspPostInit+0xa0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_TIM_MspPostInit+0xa0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <HAL_TIM_MspPostInit+0xa0>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_TIM_MspPostInit+0xa0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a6:	2302      	movs	r3, #2
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <HAL_TIM_MspPostInit+0xa4>)
 80012b2:	f000 fbab 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c6:	2302      	movs	r3, #2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <HAL_TIM_MspPostInit+0xa8>)
 80012d2:	f000 fb9b 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40000400 	.word	0x40000400
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020800 	.word	0x40020800

080012f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_USART3_UART_Init+0x58>)
 80012f6:	4a15      	ldr	r2, [pc, #84]	; (800134c <MX_USART3_UART_Init+0x5c>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_USART3_UART_Init+0x58>)
 80012fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001300:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART3_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_USART3_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART3_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART3_UART_Init+0x58>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART3_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART3_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART3_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART3_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART3_UART_Init+0x58>)
 8001334:	f003 fed2 	bl	80050dc <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800133e:	f7ff fcf3 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001ec 	.word	0x200001ec
 800134c:	40004800 	.word	0x40004800

08001350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0aa      	sub	sp, #168	; 0xa8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2284      	movs	r2, #132	; 0x84
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f005 fb01 	bl	8006978 <memset>
  if(uartHandle->Instance==USART3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a26      	ldr	r2, [pc, #152]	; (8001414 <HAL_UART_MspInit+0xc4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d144      	bne.n	800140a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001384:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001386:	2300      	movs	r3, #0
 8001388:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4618      	mov	r0, r3
 8001390:	f002 f8f8 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139a:	f7ff fcc5 	bl	8000d28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_UART_MspInit+0xc8>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_UART_MspInit+0xc8>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_UART_MspInit+0xc8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_UART_MspInit+0xc8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_UART_MspInit+0xc8>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_UART_MspInit+0xc8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013f2:	4619      	mov	r1, r3
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <HAL_UART_MspInit+0xcc>)
 80013f6:	f000 fb09 	bl	8001a0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2027      	movs	r0, #39	; 0x27
 8001400:	f000 fa3b 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001404:	2027      	movs	r0, #39	; 0x27
 8001406:	f000 fa54 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800140a:	bf00      	nop
 800140c:	37a8      	adds	r7, #168	; 0xa8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40004800 	.word	0x40004800
 8001418:	40023800 	.word	0x40023800
 800141c:	40020c00 	.word	0x40020c00

08001420 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800142a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142e:	2206      	movs	r2, #6
 8001430:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001434:	2202      	movs	r2, #2
 8001436:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001440:	2202      	movs	r2, #2
 8001442:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001446:	2201      	movs	r2, #1
 8001448:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001458:	2201      	movs	r2, #1
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001464:	f001 fa6b 	bl	800293e <HAL_PCD_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800146e:	f7ff fc5b 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000274 	.word	0x20000274

0800147c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ac      	sub	sp, #176	; 0xb0
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	2284      	movs	r2, #132	; 0x84
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fa6b 	bl	8006978 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014aa:	d159      	bne.n	8001560 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 f861 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80014c8:	f7ff fc2e 	bl	8000d28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_PCD_MspInit+0xec>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_PCD_MspInit+0xec>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6313      	str	r3, [r2, #48]	; 0x30
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_PCD_MspInit+0xec>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014e4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014fe:	230a      	movs	r3, #10
 8001500:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001508:	4619      	mov	r1, r3
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <HAL_PCD_MspInit+0xf0>)
 800150c:	f000 fa7e 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001528:	4619      	mov	r1, r3
 800152a:	4810      	ldr	r0, [pc, #64]	; (800156c <HAL_PCD_MspInit+0xf0>)
 800152c:	f000 fa6e 	bl	8001a0c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_PCD_MspInit+0xec>)
 8001532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001534:	4a0c      	ldr	r2, [pc, #48]	; (8001568 <HAL_PCD_MspInit+0xec>)
 8001536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153a:	6353      	str	r3, [r2, #52]	; 0x34
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_PCD_MspInit+0xec>)
 800153e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_PCD_MspInit+0xec>)
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_PCD_MspInit+0xec>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6453      	str	r3, [r2, #68]	; 0x44
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_PCD_MspInit+0xec>)
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	37b0      	adds	r7, #176	; 0xb0
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159a:	f7ff fd29 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f005 f9c7 	bl	8006930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff fae5 	bl	8000b70 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80015b4:	08007df4 	.word	0x08007df4
  ldr r2, =_sbss
 80015b8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80015bc:	20000790 	.word	0x20000790

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>

080015c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c6:	2003      	movs	r0, #3
 80015c8:	f000 f94c 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 f805 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d2:	f7ff fc55 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f967 	bl	80018ce <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f92f 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000003c 	.word	0x2000003c
 8001634:	20000044 	.word	0x20000044
 8001638:	20000040 	.word	0x20000040

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000044 	.word	0x20000044
 8001660:	2000077c 	.word	0x2000077c

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2000077c 	.word	0x2000077c

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000044 	.word	0x20000044

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <__NVIC_SetPriorityGrouping+0x40>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x40>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	05fa0000 	.word	0x05fa0000

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff feb6 	bl	8001664 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d008      	beq.n	8001918 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e052      	b.n	80019be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0216 	bic.w	r2, r2, #22
 8001926:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001936:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d103      	bne.n	8001948 <HAL_DMA_Abort+0x62>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0208 	bic.w	r2, r2, #8
 8001956:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001968:	e013      	b.n	8001992 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196a:	f7ff fe7b 	bl	8001664 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b05      	cmp	r3, #5
 8001976:	d90c      	bls.n	8001992 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2220      	movs	r2, #32
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e015      	b.n	80019be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e4      	bne.n	800196a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	223f      	movs	r2, #63	; 0x3f
 80019a6:	409a      	lsls	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d004      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e00c      	b.n	80019fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2205      	movs	r2, #5
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e175      	b.n	8001d18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8164 	bne.w	8001d12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <HAL_GPIO_Init+0x56>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d017      	beq.n	8001b00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d123      	bne.n	8001b54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80be 	beq.w	8001d12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a65      	ldr	r2, [pc, #404]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bae:	4a61      	ldr	r2, [pc, #388]	; (8001d34 <HAL_GPIO_Init+0x328>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_GPIO_Init+0x32c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d037      	beq.n	8001c4a <HAL_GPIO_Init+0x23e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a57      	ldr	r2, [pc, #348]	; (8001d3c <HAL_GPIO_Init+0x330>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d031      	beq.n	8001c46 <HAL_GPIO_Init+0x23a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a56      	ldr	r2, [pc, #344]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02b      	beq.n	8001c42 <HAL_GPIO_Init+0x236>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a55      	ldr	r2, [pc, #340]	; (8001d44 <HAL_GPIO_Init+0x338>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x232>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a54      	ldr	r2, [pc, #336]	; (8001d48 <HAL_GPIO_Init+0x33c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x22e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a53      	ldr	r2, [pc, #332]	; (8001d4c <HAL_GPIO_Init+0x340>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x22a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_GPIO_Init+0x344>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x226>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <HAL_GPIO_Init+0x348>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x222>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a50      	ldr	r2, [pc, #320]	; (8001d58 <HAL_GPIO_Init+0x34c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x21e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	; (8001d5c <HAL_GPIO_Init+0x350>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x21a>
 8001c22:	2309      	movs	r3, #9
 8001c24:	e012      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c26:	230a      	movs	r3, #10
 8001c28:	e010      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	e00e      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00c      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c32:	2306      	movs	r3, #6
 8001c34:	e00a      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c36:	2305      	movs	r3, #5
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c5c:	4935      	ldr	r1, [pc, #212]	; (8001d34 <HAL_GPIO_Init+0x328>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8e:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb8:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cbe:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	f67f ae86 	bls.w	8001a2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40021c00 	.word	0x40021c00
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40022400 	.word	0x40022400
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	400b      	ands	r3, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	619a      	str	r2, [r3, #24]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f806 	bl	8001e2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fd86 	bl	800097c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2224      	movs	r2, #36	; 0x24
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	e006      	b.n	8001ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d104      	bne.n	8001ede <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_I2C_Init+0x11c>)
 8001eea:	430b      	orrs	r3, r1
 8001eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69d9      	ldr	r1, [r3, #28]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	02008000 	.word	0x02008000

08001f64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	817b      	strh	r3, [r7, #10]
 8001f74:	4613      	mov	r3, r2
 8001f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	f040 80da 	bne.w	800213a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2C_Master_Transmit+0x30>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e0d3      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f9c:	f7ff fb62 	bl	8001664 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2319      	movs	r3, #25
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f9e6 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0be      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2221      	movs	r2, #33	; 0x21
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2bff      	cmp	r3, #255	; 0xff
 8001fee:	d90e      	bls.n	800200e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	8979      	ldrh	r1, [r7, #10]
 8001ffe:	4b51      	ldr	r3, [pc, #324]	; (8002144 <HAL_I2C_Master_Transmit+0x1e0>)
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fbd0 	bl	80027ac <I2C_TransferConfig>
 800200c:	e06c      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_I2C_Master_Transmit+0x1e0>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fbbf 	bl	80027ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800202e:	e05b      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	6a39      	ldr	r1, [r7, #32]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f9e3 	bl	8002400 <I2C_WaitOnTXISFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e07b      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d034      	beq.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d130      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2200      	movs	r2, #0
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f975 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e04d      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d90e      	bls.n	80020c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	22ff      	movs	r2, #255	; 0xff
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	8979      	ldrh	r1, [r7, #10]
 80020b8:	2300      	movs	r3, #0
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fb73 	bl	80027ac <I2C_TransferConfig>
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	8979      	ldrh	r1, [r7, #10]
 80020da:	2300      	movs	r3, #0
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fb62 	bl	80027ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d19e      	bne.n	8002030 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	6a39      	ldr	r1, [r7, #32]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f9c2 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e01a      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2220      	movs	r2, #32
 800210c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_I2C_Master_Transmit+0x1e4>)
 800211a:	400b      	ands	r3, r1
 800211c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800213a:	2302      	movs	r3, #2
  }
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	80002000 	.word	0x80002000
 8002148:	fe00e800 	.word	0xfe00e800

0800214c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	461a      	mov	r2, r3
 8002158:	460b      	mov	r3, r1
 800215a:	817b      	strh	r3, [r7, #10]
 800215c:	4613      	mov	r3, r2
 800215e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b20      	cmp	r3, #32
 800216a:	f040 80db 	bne.w	8002324 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_I2C_Master_Receive+0x30>
 8002178:	2302      	movs	r3, #2
 800217a:	e0d4      	b.n	8002326 <HAL_I2C_Master_Receive+0x1da>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002184:	f7ff fa6e 	bl	8001664 <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2319      	movs	r3, #25
 8002190:	2201      	movs	r2, #1
 8002192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f8f2 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0bf      	b.n	8002326 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2222      	movs	r2, #34	; 0x22
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2210      	movs	r2, #16
 80021b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	893a      	ldrh	r2, [r7, #8]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2bff      	cmp	r3, #255	; 0xff
 80021d6:	d90e      	bls.n	80021f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <HAL_I2C_Master_Receive+0x1e4>)
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fadc 	bl	80027ac <I2C_TransferConfig>
 80021f4:	e06d      	b.n	80022d2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	b2da      	uxtb	r2, r3
 8002206:	8979      	ldrh	r1, [r7, #10]
 8002208:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_I2C_Master_Receive+0x1e4>)
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 facb 	bl	80027ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002216:	e05c      	b.n	80022d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6a39      	ldr	r1, [r7, #32]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f96b 	bl	80024f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e07c      	b.n	8002326 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d034      	beq.n	80022d2 <HAL_I2C_Master_Receive+0x186>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	d130      	bne.n	80022d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	2200      	movs	r2, #0
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f880 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e04d      	b.n	8002326 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	2bff      	cmp	r3, #255	; 0xff
 8002292:	d90e      	bls.n	80022b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	8979      	ldrh	r1, [r7, #10]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fa7e 	bl	80027ac <I2C_TransferConfig>
 80022b0:	e00f      	b.n	80022d2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	8979      	ldrh	r1, [r7, #10]
 80022c4:	2300      	movs	r3, #0
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fa6d 	bl	80027ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d19d      	bne.n	8002218 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	6a39      	ldr	r1, [r7, #32]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f8cd 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e01a      	b.n	8002326 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2220      	movs	r2, #32
 80022f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6859      	ldr	r1, [r3, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_I2C_Master_Receive+0x1e8>)
 8002304:	400b      	ands	r3, r1
 8002306:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	80002400 	.word	0x80002400
 8002334:	fe00e800 	.word	0xfe00e800

08002338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d103      	bne.n	8002356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d007      	beq.n	8002374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	619a      	str	r2, [r3, #24]
  }
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	e022      	b.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d01e      	beq.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7ff f963 	bl	8001664 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d113      	bne.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e00f      	b.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d0cd      	beq.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240c:	e02c      	b.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8ea 	bl	80025ec <I2C_IsErrorOccurred>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02a      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d01e      	beq.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff f91b 	bl	8001664 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d113      	bne.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d1cb      	bne.n	800240e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248c:	e028      	b.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f8aa 	bl	80025ec <I2C_IsErrorOccurred>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e026      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7ff f8df 	bl	8001664 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d1cf      	bne.n	800248e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002504:	e064      	b.n	80025d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f86e 	bl	80025ec <I2C_IsErrorOccurred>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e062      	b.n	80025e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b20      	cmp	r3, #32
 8002526:	d138      	bne.n	800259a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d105      	bne.n	8002542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e04e      	b.n	80025e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b10      	cmp	r3, #16
 800254e:	d107      	bne.n	8002560 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2210      	movs	r2, #16
 8002556:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2204      	movs	r2, #4
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
 800255e:	e002      	b.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2220      	movs	r2, #32
 800256c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800257a:	400b      	ands	r3, r1
 800257c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e022      	b.n	80025e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259a:	f7ff f863 	bl	8001664 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10f      	bne.n	80025d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e007      	b.n	80025e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d193      	bne.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	fe00e800 	.word	0xfe00e800

080025ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d068      	beq.n	80026ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2210      	movs	r2, #16
 800261e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002620:	e049      	b.n	80026b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d045      	beq.n	80026b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff f81b 	bl	8001664 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_IsErrorOccurred+0x54>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d13a      	bne.n	80026b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002652:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800265e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002662:	d121      	bne.n	80026a8 <I2C_IsErrorOccurred+0xbc>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266a:	d01d      	beq.n	80026a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b20      	cmp	r3, #32
 8002670:	d01a      	beq.n	80026a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002680:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002682:	f7fe ffef 	bl	8001664 <HAL_GetTick>
 8002686:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002688:	e00e      	b.n	80026a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800268a:	f7fe ffeb 	bl	8001664 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b19      	cmp	r3, #25
 8002696:	d907      	bls.n	80026a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f043 0320 	orr.w	r3, r3, #32
 800269e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80026a6:	e006      	b.n	80026b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d1e9      	bne.n	800268a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d003      	beq.n	80026cc <I2C_IsErrorOccurred+0xe0>
 80026c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0aa      	beq.n	8002622 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2220      	movs	r2, #32
 80026da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	f043 0302 	orr.w	r3, r3, #2
 8002746:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002750:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01c      	beq.n	800279a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff fde9 	bl	8002338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <I2C_IsErrorOccurred+0x1bc>)
 8002772:	400b      	ands	r3, r1
 8002774:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800279a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	fe00e800 	.word	0xfe00e800

080027ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	817b      	strh	r3, [r7, #10]
 80027ba:	4613      	mov	r3, r2
 80027bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027c4:	7a7b      	ldrb	r3, [r7, #9]
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	0d5b      	lsrs	r3, r3, #21
 80027e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <I2C_TransferConfig+0x60>)
 80027ec:	430b      	orrs	r3, r1
 80027ee:	43db      	mvns	r3, r3
 80027f0:	ea02 0103 	and.w	r1, r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	03ff63ff 	.word	0x03ff63ff

08002810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	d138      	bne.n	8002898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002830:	2302      	movs	r3, #2
 8002832:	e032      	b.n	800289a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e000      	b.n	800289a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002898:	2302      	movs	r3, #2
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d139      	bne.n	8002930 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e033      	b.n	8002932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2224      	movs	r2, #36	; 0x24
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800293e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002940:	b08f      	sub	sp, #60	; 0x3c
 8002942:	af0a      	add	r7, sp, #40	; 0x28
 8002944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e116      	b.n	8002b7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fd86 	bl	800147c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2203      	movs	r2, #3
 8002974:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fd2c 	bl	80063ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	687e      	ldr	r6, [r7, #4]
 800299c:	466d      	mov	r5, sp
 800299e:	f106 0410 	add.w	r4, r6, #16
 80029a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80029b2:	1d33      	adds	r3, r6, #4
 80029b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b6:	6838      	ldr	r0, [r7, #0]
 80029b8:	f003 fcc0 	bl	800633c <USB_CoreInit>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0d7      	b.n	8002b7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fd1a 	bl	800640e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	e04a      	b.n	8002a76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	333d      	adds	r3, #61	; 0x3d
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	333c      	adds	r3, #60	; 0x3c
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	b298      	uxth	r0, r3
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3344      	adds	r3, #68	; 0x44
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3340      	adds	r3, #64	; 0x40
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3348      	adds	r3, #72	; 0x48
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	334c      	adds	r3, #76	; 0x4c
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	3354      	adds	r3, #84	; 0x54
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	3301      	adds	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3af      	bcc.n	80029e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e044      	b.n	8002b10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d3b5      	bcc.n	8002a86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	687e      	ldr	r6, [r7, #4]
 8002b22:	466d      	mov	r5, sp
 8002b24:	f106 0410 	add.w	r4, r6, #16
 8002b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b38:	1d33      	adds	r3, r6, #4
 8002b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b3c:	6838      	ldr	r0, [r7, #0]
 8002b3e:	f003 fcb3 	bl	80064a8 <USB_DevInit>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e014      	b.n	8002b7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d102      	bne.n	8002b72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f80b 	bl	8002b88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fe71 	bl	800685e <USB_DevDisconnect>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_PCDEx_ActivateLPM+0x44>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	10000003 	.word	0x10000003

08002bd0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40007000 	.word	0x40007000

08002bf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e291      	b.n	800312a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8087 	beq.w	8002d22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c14:	4b96      	ldr	r3, [pc, #600]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d00c      	beq.n	8002c3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c20:	4b93      	ldr	r3, [pc, #588]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d112      	bne.n	8002c52 <HAL_RCC_OscConfig+0x62>
 8002c2c:	4b90      	ldr	r3, [pc, #576]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c38:	d10b      	bne.n	8002c52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3a:	4b8d      	ldr	r3, [pc, #564]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d06c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x130>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d168      	bne.n	8002d20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e26b      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x7a>
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a83      	ldr	r2, [pc, #524]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e02e      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x9c>
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b7c      	ldr	r3, [pc, #496]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xc0>
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a75      	ldr	r2, [pc, #468]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a72      	ldr	r2, [pc, #456]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd8>
 8002cb0:	4b6f      	ldr	r3, [pc, #444]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a6b      	ldr	r2, [pc, #428]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fcc8 	bl	8001664 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fcc4 	bl	8001664 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e21f      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xe8>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fcb4 	bl	8001664 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fcb0 	bl	8001664 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e20b      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x110>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d069      	beq.n	8002e02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d2e:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x190>
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x17a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1df      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	493d      	ldr	r1, [pc, #244]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e040      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d023      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a38      	ldr	r2, [pc, #224]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fc66 	bl	8001664 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fc62 	bl	8001664 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e1bd      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4929      	ldr	r1, [pc, #164]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
 8002dce:	e018      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fc42 	bl	8001664 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe fc3e 	bl	8001664 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e199      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d038      	beq.n	8002e80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d019      	beq.n	8002e4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fe fc1f 	bl	8001664 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7fe fc1b 	bl	8001664 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e176      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x23a>
 8002e48:	e01a      	b.n	8002e80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe fc05 	bl	8001664 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5e:	f7fe fc01 	bl	8001664 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d903      	bls.n	8002e74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e15c      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
 8002e70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	4b91      	ldr	r3, [pc, #580]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a4 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b8b      	ldr	r3, [pc, #556]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a87      	ldr	r2, [pc, #540]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b85      	ldr	r3, [pc, #532]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb6:	4b82      	ldr	r3, [pc, #520]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ec2:	4b7f      	ldr	r3, [pc, #508]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7e      	ldr	r2, [pc, #504]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fbc9 	bl	8001664 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7fe fbc5 	bl	8001664 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b64      	cmp	r3, #100	; 0x64
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e120      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee8:	4b75      	ldr	r3, [pc, #468]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x31a>
 8002efc:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a6e      	ldr	r2, [pc, #440]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	e02d      	b.n	8002f66 <HAL_RCC_OscConfig+0x376>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x33c>
 8002f12:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a69      	ldr	r2, [pc, #420]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a66      	ldr	r2, [pc, #408]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	e01c      	b.n	8002f66 <HAL_RCC_OscConfig+0x376>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x35e>
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a60      	ldr	r2, [pc, #384]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	e00b      	b.n	8002f66 <HAL_RCC_OscConfig+0x376>
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a5a      	ldr	r2, [pc, #360]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	4b58      	ldr	r3, [pc, #352]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a57      	ldr	r2, [pc, #348]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f60:	f023 0304 	bic.w	r3, r3, #4
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fb79 	bl	8001664 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe fb75 	bl	8001664 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0ce      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RCC_OscConfig+0x386>
 8002f98:	e014      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fb63 	bl	8001664 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe fb5f 	bl	8001664 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb8:	4b40      	ldr	r3, [pc, #256]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fca:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a3b      	ldr	r2, [pc, #236]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80a4 	beq.w	8003128 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d06b      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d149      	bne.n	8003088 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a30      	ldr	r2, [pc, #192]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fb30 	bl	8001664 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fb2c 	bl	8001664 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e087      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	4313      	orrs	r3, r2
 800304c:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 800304e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003052:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fb00 	bl	8001664 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fafc 	bl	8001664 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e057      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x478>
 8003086:	e04f      	b.n	8003128 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fae6 	bl	8001664 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe fae2 	bl	8001664 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e03d      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x4ac>
 80030ba:	e035      	b.n	8003128 <HAL_RCC_OscConfig+0x538>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_RCC_OscConfig+0x544>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d028      	beq.n	8003124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d121      	bne.n	8003124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d11a      	bne.n	8003124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	3b01      	subs	r3, #1
 800310e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0d0      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003150:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d910      	bls.n	8003180 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b67      	ldr	r3, [pc, #412]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 020f 	bic.w	r2, r3, #15
 8003166:	4965      	ldr	r1, [pc, #404]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0b8      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003198:	4b59      	ldr	r3, [pc, #356]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a58      	ldr	r2, [pc, #352]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b0:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	494d      	ldr	r1, [pc, #308]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d040      	beq.n	800325c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d115      	bne.n	800321a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e07f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e073      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e06b      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321a:	4b39      	ldr	r3, [pc, #228]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 0203 	bic.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4936      	ldr	r1, [pc, #216]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fe fa1a 	bl	8001664 <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	e00a      	b.n	800324a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7fe fa16 	bl	8001664 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e053      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 020c 	and.w	r2, r3, #12
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	429a      	cmp	r2, r3
 800325a:	d1eb      	bne.n	8003234 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d210      	bcs.n	800328c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 020f 	bic.w	r2, r3, #15
 8003272:	4922      	ldr	r1, [pc, #136]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e032      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4916      	ldr	r1, [pc, #88]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	490e      	ldr	r1, [pc, #56]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ca:	f000 f821 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	490a      	ldr	r1, [pc, #40]	; (8003304 <HAL_RCC_ClockConfig+0x1cc>)
 80032dc:	5ccb      	ldrb	r3, [r1, r3]
 80032de:	fa22 f303 	lsr.w	r3, r2, r3
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1d0>)
 80032e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_ClockConfig+0x1d4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe f976 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00
 8003300:	40023800 	.word	0x40023800
 8003304:	08007c1c 	.word	0x08007c1c
 8003308:	2000003c 	.word	0x2000003c
 800330c:	20000040 	.word	0x20000040

08003310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003314:	b094      	sub	sp, #80	; 0x50
 8003316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
 800331c:	2300      	movs	r3, #0
 800331e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003320:	2300      	movs	r3, #0
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003328:	4b79      	ldr	r3, [pc, #484]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d00d      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x40>
 8003334:	2b08      	cmp	r3, #8
 8003336:	f200 80e1 	bhi.w	80034fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x34>
 800333e:	2b04      	cmp	r3, #4
 8003340:	d003      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x3a>
 8003342:	e0db      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b73      	ldr	r3, [pc, #460]	; (8003514 <HAL_RCC_GetSysClockFreq+0x204>)
 8003346:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003348:	e0db      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800334a:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCC_GetSysClockFreq+0x208>)
 800334c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800334e:	e0d8      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003350:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800335a:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d063      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003366:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	2200      	movs	r2, #0
 800336e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003370:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
 800337a:	2300      	movs	r3, #0
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
 800337e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003382:	4622      	mov	r2, r4
 8003384:	462b      	mov	r3, r5
 8003386:	f04f 0000 	mov.w	r0, #0
 800338a:	f04f 0100 	mov.w	r1, #0
 800338e:	0159      	lsls	r1, r3, #5
 8003390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003394:	0150      	lsls	r0, r2, #5
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4621      	mov	r1, r4
 800339c:	1a51      	subs	r1, r2, r1
 800339e:	6139      	str	r1, [r7, #16]
 80033a0:	4629      	mov	r1, r5
 80033a2:	eb63 0301 	sbc.w	r3, r3, r1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b4:	4659      	mov	r1, fp
 80033b6:	018b      	lsls	r3, r1, #6
 80033b8:	4651      	mov	r1, sl
 80033ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033be:	4651      	mov	r1, sl
 80033c0:	018a      	lsls	r2, r1, #6
 80033c2:	4651      	mov	r1, sl
 80033c4:	ebb2 0801 	subs.w	r8, r2, r1
 80033c8:	4659      	mov	r1, fp
 80033ca:	eb63 0901 	sbc.w	r9, r3, r1
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033e2:	4690      	mov	r8, r2
 80033e4:	4699      	mov	r9, r3
 80033e6:	4623      	mov	r3, r4
 80033e8:	eb18 0303 	adds.w	r3, r8, r3
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	462b      	mov	r3, r5
 80033f0:	eb49 0303 	adc.w	r3, r9, r3
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003402:	4629      	mov	r1, r5
 8003404:	024b      	lsls	r3, r1, #9
 8003406:	4621      	mov	r1, r4
 8003408:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800340c:	4621      	mov	r1, r4
 800340e:	024a      	lsls	r2, r1, #9
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003416:	2200      	movs	r2, #0
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
 800341a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800341c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003420:	f7fc ff4e 	bl	80002c0 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800342c:	e058      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	2200      	movs	r2, #0
 8003436:	4618      	mov	r0, r3
 8003438:	4611      	mov	r1, r2
 800343a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800343e:	623b      	str	r3, [r7, #32]
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	f04f 0000 	mov.w	r0, #0
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	0159      	lsls	r1, r3, #5
 8003456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345a:	0150      	lsls	r0, r2, #5
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4641      	mov	r1, r8
 8003462:	ebb2 0a01 	subs.w	sl, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb63 0b01 	sbc.w	fp, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003478:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800347c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003480:	ebb2 040a 	subs.w	r4, r2, sl
 8003484:	eb63 050b 	sbc.w	r5, r3, fp
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	00eb      	lsls	r3, r5, #3
 8003492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003496:	00e2      	lsls	r2, r4, #3
 8003498:	4614      	mov	r4, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4643      	mov	r3, r8
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	464b      	mov	r3, r9
 80034a4:	eb45 0303 	adc.w	r3, r5, r3
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b6:	4629      	mov	r1, r5
 80034b8:	028b      	lsls	r3, r1, #10
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c0:	4621      	mov	r1, r4
 80034c2:	028a      	lsls	r2, r1, #10
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ca:	2200      	movs	r2, #0
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	61fa      	str	r2, [r7, #28]
 80034d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d4:	f7fc fef4 	bl	80002c0 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4613      	mov	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	3301      	adds	r3, #1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80034f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034fa:	e002      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetSysClockFreq+0x204>)
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003504:	4618      	mov	r0, r3
 8003506:	3750      	adds	r7, #80	; 0x50
 8003508:	46bd      	mov	sp, r7
 800350a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	00f42400 	.word	0x00f42400
 8003518:	007a1200 	.word	0x007a1200

0800351c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <HAL_RCC_GetHCLKFreq+0x14>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000003c 	.word	0x2000003c

08003534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003538:	f7ff fff0 	bl	800351c <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	0a9b      	lsrs	r3, r3, #10
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4903      	ldr	r1, [pc, #12]	; (8003558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40023800 	.word	0x40023800
 8003558:	08007c2c 	.word	0x08007c2c

0800355c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003560:	f7ff ffdc 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	0b5b      	lsrs	r3, r3, #13
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800
 8003580:	08007c2c 	.word	0x08007c2c

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d012      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035ac:	4b69      	ldr	r3, [pc, #420]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a68      	ldr	r2, [pc, #416]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035b6:	6093      	str	r3, [r2, #8]
 80035b8:	4b66      	ldr	r3, [pc, #408]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	4964      	ldr	r1, [pc, #400]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035de:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	4959      	ldr	r1, [pc, #356]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035fc:	d101      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800360a:	2301      	movs	r3, #1
 800360c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800361a:	4b4e      	ldr	r3, [pc, #312]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003620:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	494a      	ldr	r1, [pc, #296]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003638:	d101      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800363a:	2301      	movs	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 808b 	beq.w	800377e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4a39      	ldr	r2, [pc, #228]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003672:	6413      	str	r3, [r2, #64]	; 0x40
 8003674:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a34      	ldr	r2, [pc, #208]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368c:	f7fd ffea 	bl	8001664 <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003694:	f7fd ffe6 	bl	8001664 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e357      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b2:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d035      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d02e      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d114      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd ffae 	bl	8001664 <HAL_GetTick>
 8003708:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fd ffaa 	bl	8001664 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e319      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ee      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800373a:	d111      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800374a:	400b      	ands	r3, r1
 800374c:	4901      	ldr	r1, [pc, #4]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
 8003752:	e00b      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000
 800375c:	0ffffcff 	.word	0x0ffffcff
 8003760:	4baa      	ldr	r3, [pc, #680]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4aa9      	ldr	r2, [pc, #676]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003766:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800376a:	6093      	str	r3, [r2, #8]
 800376c:	4ba7      	ldr	r3, [pc, #668]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003778:	49a4      	ldr	r1, [pc, #656]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	4313      	orrs	r3, r2
 800377c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d010      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800378a:	4ba0      	ldr	r3, [pc, #640]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003790:	4a9e      	ldr	r2, [pc, #632]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003796:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800379a:	4b9c      	ldr	r3, [pc, #624]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	4999      	ldr	r1, [pc, #612]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b8:	4b94      	ldr	r3, [pc, #592]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c6:	4991      	ldr	r1, [pc, #580]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037da:	4b8c      	ldr	r3, [pc, #560]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e8:	4988      	ldr	r1, [pc, #544]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037fc:	4b83      	ldr	r3, [pc, #524]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380a:	4980      	ldr	r1, [pc, #512]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800381e:	4b7b      	ldr	r3, [pc, #492]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4977      	ldr	r1, [pc, #476]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003840:	4b72      	ldr	r3, [pc, #456]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	496f      	ldr	r1, [pc, #444]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003862:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f023 020c 	bic.w	r2, r3, #12
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	4966      	ldr	r1, [pc, #408]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003884:	4b61      	ldr	r3, [pc, #388]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	495e      	ldr	r1, [pc, #376]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a6:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	4955      	ldr	r1, [pc, #340]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	494d      	ldr	r1, [pc, #308]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038ea:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	4944      	ldr	r1, [pc, #272]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800390c:	4b3f      	ldr	r3, [pc, #252]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	493c      	ldr	r1, [pc, #240]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800392e:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393c:	4933      	ldr	r1, [pc, #204]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003950:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800395e:	492b      	ldr	r1, [pc, #172]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d011      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003972:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003980:	4922      	ldr	r1, [pc, #136]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c0:	4912      	ldr	r1, [pc, #72]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e4:	4909      	ldr	r1, [pc, #36]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d006      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80d9 	beq.w	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a00:	4b02      	ldr	r3, [pc, #8]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a01      	ldr	r2, [pc, #4]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a12:	f7fd fe27 	bl	8001664 <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a1a:	f7fd fe23 	bl	8001664 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	; 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e194      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a2c:	4b6c      	ldr	r3, [pc, #432]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d021      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11d      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a4c:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a5a:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a60:	0e1b      	lsrs	r3, r3, #24
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	019a      	lsls	r2, r3, #6
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	061b      	lsls	r3, r3, #24
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	071b      	lsls	r3, r3, #28
 8003a80:	4957      	ldr	r1, [pc, #348]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02e      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab2:	d129      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ab4:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	0c1b      	lsrs	r3, r3, #16
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	0f1b      	lsrs	r3, r3, #28
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	019a      	lsls	r2, r3, #6
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	071b      	lsls	r3, r3, #28
 8003ae8:	493d      	ldr	r1, [pc, #244]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003af0:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af6:	f023 021f 	bic.w	r2, r3, #31
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	3b01      	subs	r3, #1
 8003b00:	4937      	ldr	r1, [pc, #220]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01d      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1a:	0e1b      	lsrs	r3, r3, #24
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b28:	0f1b      	lsrs	r3, r3, #28
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	019a      	lsls	r2, r3, #6
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	071b      	lsls	r3, r3, #28
 8003b48:	4925      	ldr	r1, [pc, #148]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d011      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	019a      	lsls	r2, r3, #6
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	061b      	lsls	r3, r3, #24
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	071b      	lsls	r3, r3, #28
 8003b78:	4919      	ldr	r1, [pc, #100]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b80:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8c:	f7fd fd6a 	bl	8001664 <HAL_GetTick>
 8003b90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b94:	f7fd fd66 	bl	8001664 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0d7      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	f040 80cd 	bne.w	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc6:	f7fd fd4d 	bl	8001664 <HAL_GetTick>
 8003bca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bcc:	e00a      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bce:	f7fd fd49 	bl	8001664 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b64      	cmp	r3, #100	; 0x64
 8003bda:	d903      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0ba      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003be0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003be4:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf0:	d0ed      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d02e      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d12a      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c1a:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c28:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	0f1b      	lsrs	r3, r3, #28
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	019a      	lsls	r2, r3, #6
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	4944      	ldr	r1, [pc, #272]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c56:	4b42      	ldr	r3, [pc, #264]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	493d      	ldr	r1, [pc, #244]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d022      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c84:	d11d      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	0e1b      	lsrs	r3, r3, #24
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	0f1b      	lsrs	r3, r3, #28
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	019a      	lsls	r2, r3, #6
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	4929      	ldr	r1, [pc, #164]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d028      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cce:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	0e1b      	lsrs	r3, r3, #24
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cdc:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	0c1b      	lsrs	r3, r3, #16
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	019a      	lsls	r2, r3, #6
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	071b      	lsls	r3, r3, #28
 8003d02:	4917      	ldr	r1, [pc, #92]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	4911      	ldr	r1, [pc, #68]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fc9a 	bl	8001664 <HAL_GetTick>
 8003d30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d34:	f7fd fc96 	bl	8001664 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e007      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d52:	d1ef      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800

08003d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e049      	b.n	8003e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fa18 	bl	80011c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 fd30 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d001      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e054      	b.n	8003ed6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a26      	ldr	r2, [pc, #152]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d022      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e56:	d01d      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d018      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a21      	ldr	r2, [pc, #132]	; (8003eec <HAL_TIM_Base_Start_IT+0xd8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d013      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00e      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d009      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <HAL_TIM_Base_Start_IT+0xe8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d115      	bne.n	8003ec0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_TIM_Base_Start_IT+0xec>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d015      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0xbe>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eac:	d011      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	e008      	b.n	8003ed2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e000      	b.n	8003ed4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40010400 	.word	0x40010400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40001800 	.word	0x40001800
 8003f00:	00010007 	.word	0x00010007

08003f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e049      	b.n	8003faa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f841 	bl	8003fb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fc60 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_TIM_PWM_Start+0x24>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e03c      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d109      	bne.n	8004006 <HAL_TIM_PWM_Start+0x3e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e02f      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d109      	bne.n	8004020 <HAL_TIM_PWM_Start+0x58>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e022      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d109      	bne.n	800403a <HAL_TIM_PWM_Start+0x72>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	e015      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b10      	cmp	r3, #16
 800403e:	d109      	bne.n	8004054 <HAL_TIM_PWM_Start+0x8c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e008      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e092      	b.n	8004194 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0xb6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407c:	e023      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0xc6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	e01b      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start+0xd6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	e013      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0xe6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ac:	e00b      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d104      	bne.n	80040be <HAL_TIM_PWM_Start+0xf6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	e003      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 ff32 	bl	8004f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a30      	ldr	r2, [pc, #192]	; (800419c <HAL_TIM_PWM_Start+0x1d4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIM_PWM_Start+0x120>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <HAL_TIM_PWM_Start+0x1d8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_TIM_PWM_Start+0x124>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_TIM_PWM_Start+0x126>
 80040ec:	2300      	movs	r3, #0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a25      	ldr	r2, [pc, #148]	; (800419c <HAL_TIM_PWM_Start+0x1d4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <HAL_TIM_PWM_Start+0x18a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004114:	d01d      	beq.n	8004152 <HAL_TIM_PWM_Start+0x18a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a22      	ldr	r2, [pc, #136]	; (80041a4 <HAL_TIM_PWM_Start+0x1dc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d018      	beq.n	8004152 <HAL_TIM_PWM_Start+0x18a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <HAL_TIM_PWM_Start+0x1e0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <HAL_TIM_PWM_Start+0x18a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <HAL_TIM_PWM_Start+0x1e4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <HAL_TIM_PWM_Start+0x18a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <HAL_TIM_PWM_Start+0x1d8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <HAL_TIM_PWM_Start+0x18a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <HAL_TIM_PWM_Start+0x1e8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_TIM_PWM_Start+0x18a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <HAL_TIM_PWM_Start+0x1ec>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d115      	bne.n	800417e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <HAL_TIM_PWM_Start+0x1f0>)
 800415a:	4013      	ands	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b06      	cmp	r3, #6
 8004162:	d015      	beq.n	8004190 <HAL_TIM_PWM_Start+0x1c8>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416a:	d011      	beq.n	8004190 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417c:	e008      	b.n	8004190 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e000      	b.n	8004192 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004190:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40010000 	.word	0x40010000
 80041a0:	40010400 	.word	0x40010400
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40001800 	.word	0x40001800
 80041b8:	00010007 	.word	0x00010007

080041bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d122      	bne.n	8004218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d11b      	bne.n	8004218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0202 	mvn.w	r2, #2
 80041e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fae4 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004204:	e005      	b.n	8004212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fad6 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fae7 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b04      	cmp	r3, #4
 8004224:	d122      	bne.n	800426c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b04      	cmp	r3, #4
 8004232:	d11b      	bne.n	800426c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0204 	mvn.w	r2, #4
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 faba 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 faac 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fabd 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b08      	cmp	r3, #8
 8004278:	d122      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b08      	cmp	r3, #8
 8004286:	d11b      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0208 	mvn.w	r2, #8
 8004290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2204      	movs	r2, #4
 8004296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fa90 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa82 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fa93 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0210 	mvn.w	r2, #16
 80042e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2208      	movs	r2, #8
 80042ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa66 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa58 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fa69 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b01      	cmp	r3, #1
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0201 	mvn.w	r2, #1
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fbc6 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d10e      	bne.n	800436c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d107      	bne.n	800436c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fea4 	bl	80050b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437a:	d10e      	bne.n	800439a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d107      	bne.n	800439a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fe97 	bl	80050c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d10e      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d107      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa17 	bl	80047f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d10e      	bne.n	80043f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d107      	bne.n	80043f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 0220 	mvn.w	r2, #32
 80043ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fe57 	bl	80050a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004416:	2302      	movs	r3, #2
 8004418:	e0ff      	b.n	800461a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b14      	cmp	r3, #20
 8004426:	f200 80f0 	bhi.w	800460a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800442a:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004430:	08004485 	.word	0x08004485
 8004434:	0800460b 	.word	0x0800460b
 8004438:	0800460b 	.word	0x0800460b
 800443c:	0800460b 	.word	0x0800460b
 8004440:	080044c5 	.word	0x080044c5
 8004444:	0800460b 	.word	0x0800460b
 8004448:	0800460b 	.word	0x0800460b
 800444c:	0800460b 	.word	0x0800460b
 8004450:	08004507 	.word	0x08004507
 8004454:	0800460b 	.word	0x0800460b
 8004458:	0800460b 	.word	0x0800460b
 800445c:	0800460b 	.word	0x0800460b
 8004460:	08004547 	.word	0x08004547
 8004464:	0800460b 	.word	0x0800460b
 8004468:	0800460b 	.word	0x0800460b
 800446c:	0800460b 	.word	0x0800460b
 8004470:	08004589 	.word	0x08004589
 8004474:	0800460b 	.word	0x0800460b
 8004478:	0800460b 	.word	0x0800460b
 800447c:	0800460b 	.word	0x0800460b
 8004480:	080045c9 	.word	0x080045c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fa5c 	bl	8004948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0208 	orr.w	r2, r2, #8
 800449e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0204 	bic.w	r2, r2, #4
 80044ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6999      	ldr	r1, [r3, #24]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	619a      	str	r2, [r3, #24]
      break;
 80044c2:	e0a5      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 faae 	bl	8004a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6999      	ldr	r1, [r3, #24]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	021a      	lsls	r2, r3, #8
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	619a      	str	r2, [r3, #24]
      break;
 8004504:	e084      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fb05 	bl	8004b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0208 	orr.w	r2, r2, #8
 8004520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0204 	bic.w	r2, r2, #4
 8004530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69d9      	ldr	r1, [r3, #28]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	61da      	str	r2, [r3, #28]
      break;
 8004544:	e064      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fb5b 	bl	8004c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69d9      	ldr	r1, [r3, #28]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	021a      	lsls	r2, r3, #8
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	61da      	str	r2, [r3, #28]
      break;
 8004586:	e043      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fb92 	bl	8004cb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0208 	orr.w	r2, r2, #8
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0204 	bic.w	r2, r2, #4
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045c6:	e023      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fbc4 	bl	8004d5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	021a      	lsls	r2, r3, #8
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004608:	e002      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      break;
 800460e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop

08004624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIM_ConfigClockSource+0x1c>
 800463c:	2302      	movs	r3, #2
 800463e:	e0b4      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x186>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	4b56      	ldr	r3, [pc, #344]	; (80047b4 <HAL_TIM_ConfigClockSource+0x190>)
 800465c:	4013      	ands	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004678:	d03e      	beq.n	80046f8 <HAL_TIM_ConfigClockSource+0xd4>
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467e:	f200 8087 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	f000 8086 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x172>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	d87f      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b70      	cmp	r3, #112	; 0x70
 8004692:	d01a      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0xa6>
 8004694:	2b70      	cmp	r3, #112	; 0x70
 8004696:	d87b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b60      	cmp	r3, #96	; 0x60
 800469a:	d050      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x11a>
 800469c:	2b60      	cmp	r3, #96	; 0x60
 800469e:	d877      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b50      	cmp	r3, #80	; 0x50
 80046a2:	d03c      	beq.n	800471e <HAL_TIM_ConfigClockSource+0xfa>
 80046a4:	2b50      	cmp	r3, #80	; 0x50
 80046a6:	d873      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d058      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x13a>
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d86f      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b30      	cmp	r3, #48	; 0x30
 80046b2:	d064      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d86b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d060      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d867      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d05c      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d05a      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	e062      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6899      	ldr	r1, [r3, #8]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f000 fc0d 	bl	8004ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	609a      	str	r2, [r3, #8]
      break;
 80046f6:	e04f      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f000 fbf6 	bl	8004ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800471a:	609a      	str	r2, [r3, #8]
      break;
 800471c:	e03c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f000 fb6a 	bl	8004e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2150      	movs	r1, #80	; 0x50
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fbc3 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 800473c:	e02c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	461a      	mov	r2, r3
 800474c:	f000 fb89 	bl	8004e62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2160      	movs	r1, #96	; 0x60
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fbb3 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 800475c:	e01c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	f000 fb4a 	bl	8004e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fba3 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 800477c:	e00c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 fb9a 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 800478e:	e003      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e000      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	fffeff88 	.word	0xfffeff88

080047b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a40      	ldr	r2, [pc, #256]	; (800491c <TIM_Base_SetConfig+0x114>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3d      	ldr	r2, [pc, #244]	; (8004920 <TIM_Base_SetConfig+0x118>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3c      	ldr	r2, [pc, #240]	; (8004924 <TIM_Base_SetConfig+0x11c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3b      	ldr	r2, [pc, #236]	; (8004928 <TIM_Base_SetConfig+0x120>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3a      	ldr	r2, [pc, #232]	; (800492c <TIM_Base_SetConfig+0x124>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2f      	ldr	r2, [pc, #188]	; (800491c <TIM_Base_SetConfig+0x114>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d02b      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d027      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <TIM_Base_SetConfig+0x118>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d023      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2b      	ldr	r2, [pc, #172]	; (8004924 <TIM_Base_SetConfig+0x11c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01f      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <TIM_Base_SetConfig+0x120>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01b      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <TIM_Base_SetConfig+0x124>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d017      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a28      	ldr	r2, [pc, #160]	; (8004930 <TIM_Base_SetConfig+0x128>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a27      	ldr	r2, [pc, #156]	; (8004934 <TIM_Base_SetConfig+0x12c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00f      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a26      	ldr	r2, [pc, #152]	; (8004938 <TIM_Base_SetConfig+0x130>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00b      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a25      	ldr	r2, [pc, #148]	; (800493c <TIM_Base_SetConfig+0x134>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a24      	ldr	r2, [pc, #144]	; (8004940 <TIM_Base_SetConfig+0x138>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a23      	ldr	r2, [pc, #140]	; (8004944 <TIM_Base_SetConfig+0x13c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <TIM_Base_SetConfig+0x114>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <TIM_Base_SetConfig+0x124>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	615a      	str	r2, [r3, #20]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40010400 	.word	0x40010400
 8004930:	40014000 	.word	0x40014000
 8004934:	40014400 	.word	0x40014400
 8004938:	40014800 	.word	0x40014800
 800493c:	40001800 	.word	0x40001800
 8004940:	40001c00 	.word	0x40001c00
 8004944:	40002000 	.word	0x40002000

08004948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f023 0201 	bic.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <TIM_OC1_SetConfig+0xd8>)
 8004974:	4013      	ands	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f023 0302 	bic.w	r3, r3, #2
 8004990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <TIM_OC1_SetConfig+0xdc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_OC1_SetConfig+0x64>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a20      	ldr	r2, [pc, #128]	; (8004a28 <TIM_OC1_SetConfig+0xe0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10c      	bne.n	80049c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0308 	bic.w	r3, r3, #8
 80049b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 0304 	bic.w	r3, r3, #4
 80049c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <TIM_OC1_SetConfig+0xdc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_OC1_SetConfig+0x8e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <TIM_OC1_SetConfig+0xe0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d111      	bne.n	80049fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	fffeff8f 	.word	0xfffeff8f
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40010400 	.word	0x40010400

08004a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f023 0210 	bic.w	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <TIM_OC2_SetConfig+0xe4>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0320 	bic.w	r3, r3, #32
 8004a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <TIM_OC2_SetConfig+0xe8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC2_SetConfig+0x68>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <TIM_OC2_SetConfig+0xec>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10d      	bne.n	8004ab0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <TIM_OC2_SetConfig+0xe8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_OC2_SetConfig+0x94>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <TIM_OC2_SetConfig+0xec>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d113      	bne.n	8004ae8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	feff8fff 	.word	0xfeff8fff
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400

08004b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4b2d      	ldr	r3, [pc, #180]	; (8004bfc <TIM_OC3_SetConfig+0xe0>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <TIM_OC3_SetConfig+0xe4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_OC3_SetConfig+0x66>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <TIM_OC3_SetConfig+0xe8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d10d      	bne.n	8004b9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <TIM_OC3_SetConfig+0xe4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_OC3_SetConfig+0x92>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <TIM_OC3_SetConfig+0xe8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d113      	bne.n	8004bd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	fffeff8f 	.word	0xfffeff8f
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40010400 	.word	0x40010400

08004c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <TIM_OC4_SetConfig+0xa4>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	031b      	lsls	r3, r3, #12
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <TIM_OC4_SetConfig+0xa8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_OC4_SetConfig+0x68>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <TIM_OC4_SetConfig+0xac>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d109      	bne.n	8004c84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	019b      	lsls	r3, r3, #6
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	feff8fff 	.word	0xfeff8fff
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40010400 	.word	0x40010400

08004cb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <TIM_OC5_SetConfig+0x98>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <TIM_OC5_SetConfig+0x9c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_OC5_SetConfig+0x5e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <TIM_OC5_SetConfig+0xa0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d109      	bne.n	8004d2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	621a      	str	r2, [r3, #32]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	fffeff8f 	.word	0xfffeff8f
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40010400 	.word	0x40010400

08004d5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <TIM_OC6_SetConfig+0x9c>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	051b      	lsls	r3, r3, #20
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <TIM_OC6_SetConfig+0xa0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_OC6_SetConfig+0x60>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <TIM_OC6_SetConfig+0xa4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d109      	bne.n	8004dd0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	feff8fff 	.word	0xfeff8fff
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40010400 	.word	0x40010400

08004e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 030a 	bic.w	r3, r3, #10
 8004e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b087      	sub	sp, #28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0210 	bic.w	r2, r3, #16
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f043 0307 	orr.w	r3, r3, #7
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	021a      	lsls	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1a      	ldr	r2, [r3, #32]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e06d      	b.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a20      	ldr	r2, [pc, #128]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d01d      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a15      	ldr	r2, [pc, #84]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10c      	bne.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	4313      	orrs	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40014000 	.word	0x40014000
 800509c:	40001800 	.word	0x40001800

080050a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e040      	b.n	8005170 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc f926 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2224      	movs	r2, #36	; 0x24
 8005108:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fc66 	bl	80059ec <UART_SetConfig>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e022      	b.n	8005170 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 febe 	bl	8005eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 ff45 	bl	8005ff8 <UART_CheckIdleState>
 800516e:	4603      	mov	r3, r0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800518c:	2b20      	cmp	r3, #32
 800518e:	d171      	bne.n	8005274 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_UART_Transmit+0x24>
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e06a      	b.n	8005276 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2221      	movs	r2, #33	; 0x21
 80051ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ae:	f7fc fa59 	bl	8001664 <HAL_GetTick>
 80051b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d108      	bne.n	80051e0 <HAL_UART_Transmit+0x68>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e003      	b.n	80051e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051e8:	e02c      	b.n	8005244 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 ff36 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e038      	b.n	8005276 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3302      	adds	r3, #2
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e007      	b.n	8005232 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	3301      	adds	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1cc      	bne.n	80051ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2200      	movs	r2, #0
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 ff03 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e005      	b.n	8005276 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e000      	b.n	8005276 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b08a      	sub	sp, #40	; 0x28
 8005282:	af02      	add	r7, sp, #8
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	603b      	str	r3, [r7, #0]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005294:	2b20      	cmp	r3, #32
 8005296:	f040 80b1 	bne.w	80053fc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_UART_Receive+0x28>
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e0a9      	b.n	80053fe <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2222      	movs	r2, #34	; 0x22
 80052b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052c0:	f7fc f9d0 	bl	8001664 <HAL_GetTick>
 80052c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	d10e      	bne.n	80052fe <HAL_UART_Receive+0x80>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <HAL_UART_Receive+0x76>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052f2:	e02d      	b.n	8005350 <HAL_UART_Receive+0xd2>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	22ff      	movs	r2, #255	; 0xff
 80052f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052fc:	e028      	b.n	8005350 <HAL_UART_Receive+0xd2>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10d      	bne.n	8005322 <HAL_UART_Receive+0xa4>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <HAL_UART_Receive+0x9a>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	22ff      	movs	r2, #255	; 0xff
 8005312:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005316:	e01b      	b.n	8005350 <HAL_UART_Receive+0xd2>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	227f      	movs	r2, #127	; 0x7f
 800531c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005320:	e016      	b.n	8005350 <HAL_UART_Receive+0xd2>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800532a:	d10d      	bne.n	8005348 <HAL_UART_Receive+0xca>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_UART_Receive+0xc0>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	227f      	movs	r2, #127	; 0x7f
 8005338:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800533c:	e008      	b.n	8005350 <HAL_UART_Receive+0xd2>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	223f      	movs	r2, #63	; 0x3f
 8005342:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005346:	e003      	b.n	8005350 <HAL_UART_Receive+0xd2>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005356:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005360:	d108      	bne.n	8005374 <HAL_UART_Receive+0xf6>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e003      	b.n	800537c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800537c:	e032      	b.n	80053e4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2200      	movs	r2, #0
 8005386:	2120      	movs	r1, #32
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fe6c 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e032      	b.n	80053fe <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10c      	bne.n	80053b8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	8a7b      	ldrh	r3, [r7, #18]
 80053a8:	4013      	ands	r3, r2
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	3302      	adds	r3, #2
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e00c      	b.n	80053d2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	8a7b      	ldrh	r3, [r7, #18]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	4013      	ands	r3, r2
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	3301      	adds	r3, #1
 80053d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1c6      	bne.n	800537e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e000      	b.n	80053fe <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
  }
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b0ba      	sub	sp, #232	; 0xe8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800542e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005432:	f640 030f 	movw	r3, #2063	; 0x80f
 8005436:	4013      	ands	r3, r2
 8005438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800543c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d115      	bne.n	8005470 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00f      	beq.n	8005470 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8297 	beq.w	8005994 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
      }
      return;
 800546e:	e291      	b.n	8005994 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005470:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8117 	beq.w	80056a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800547a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005486:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800548a:	4b85      	ldr	r3, [pc, #532]	; (80056a0 <HAL_UART_IRQHandler+0x298>)
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 810a 	beq.w	80056a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d011      	beq.n	80054c4 <HAL_UART_IRQHandler+0xbc>
 80054a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2201      	movs	r2, #1
 80054b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ba:	f043 0201 	orr.w	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d011      	beq.n	80054f4 <HAL_UART_IRQHandler+0xec>
 80054d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2202      	movs	r2, #2
 80054e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ea:	f043 0204 	orr.w	r2, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d011      	beq.n	8005524 <HAL_UART_IRQHandler+0x11c>
 8005500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2204      	movs	r2, #4
 8005512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551a:	f043 0202 	orr.w	r2, r3, #2
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d017      	beq.n	8005560 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800553c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005540:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00b      	beq.n	8005560 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2208      	movs	r2, #8
 800554e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005556:	f043 0208 	orr.w	r2, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <HAL_UART_IRQHandler+0x18a>
 800556c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00c      	beq.n	8005592 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005580:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005588:	f043 0220 	orr.w	r2, r3, #32
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 81fd 	beq.w	8005998 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00d      	beq.n	80055c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d005      	beq.n	80055ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d04f      	beq.n	800568a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fe01 	bl	80061f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d141      	bne.n	8005682 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800562a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800562e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1d9      	bne.n	80055fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564e:	2b00      	cmp	r3, #0
 8005650:	d013      	beq.n	800567a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005656:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <HAL_UART_IRQHandler+0x29c>)
 8005658:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565e:	4618      	mov	r0, r3
 8005660:	f7fc f9b1 	bl	80019c6 <HAL_DMA_Abort_IT>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d017      	beq.n	800569a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005674:	4610      	mov	r0, r2
 8005676:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	e00f      	b.n	800569a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f9a0 	bl	80059c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	e00b      	b.n	800569a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f99c 	bl	80059c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005688:	e007      	b.n	800569a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f998 	bl	80059c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005698:	e17e      	b.n	8005998 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569a:	bf00      	nop
    return;
 800569c:	e17c      	b.n	8005998 <HAL_UART_IRQHandler+0x590>
 800569e:	bf00      	nop
 80056a0:	04000120 	.word	0x04000120
 80056a4:	080062bb 	.word	0x080062bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	f040 814c 	bne.w	800594a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8145 	beq.w	800594a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 813e 	beq.w	800594a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2210      	movs	r2, #16
 80056d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	f040 80b6 	bne.w	8005852 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8150 	beq.w	800599c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005706:	429a      	cmp	r2, r3
 8005708:	f080 8148 	bcs.w	800599c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005720:	f000 8086 	beq.w	8005830 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800574e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005752:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800575a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1da      	bne.n	8005724 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3308      	adds	r3, #8
 8005774:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800577e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005792:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005796:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800579a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e1      	bne.n	800576e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e3      	bne.n	80057aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005800:	f023 0310 	bic.w	r3, r3, #16
 8005804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005812:	65bb      	str	r3, [r7, #88]	; 0x58
 8005814:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e4      	bne.n	80057f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582a:	4618      	mov	r0, r3
 800582c:	f7fc f85b 	bl	80018e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005842:	b29b      	uxth	r3, r3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	b29b      	uxth	r3, r3
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f8c2 	bl	80059d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005850:	e0a4      	b.n	800599c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800585e:	b29b      	uxth	r3, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8096 	beq.w	80059a0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8091 	beq.w	80059a0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005892:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058a0:	647b      	str	r3, [r7, #68]	; 0x44
 80058a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e4      	bne.n	800587e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3308      	adds	r3, #8
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	623b      	str	r3, [r7, #32]
   return(result);
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058d8:	633a      	str	r2, [r7, #48]	; 0x30
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e3      	bne.n	80058b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	60fb      	str	r3, [r7, #12]
   return(result);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f023 0310 	bic.w	r3, r3, #16
 8005914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	69b9      	ldr	r1, [r7, #24]
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	617b      	str	r3, [r7, #20]
   return(result);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e4      	bne.n	8005900 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800593c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f846 	bl	80059d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005948:	e02a      	b.n	80059a0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00e      	beq.n	8005974 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b00      	cmp	r3, #0
 8005960:	d008      	beq.n	8005974 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01c      	beq.n	80059a4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
    }
    return;
 8005972:	e017      	b.n	80059a4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <HAL_UART_IRQHandler+0x59e>
 8005980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fcaa 	bl	80062e6 <UART_EndTransmit_IT>
    return;
 8005992:	e008      	b.n	80059a6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005994:	bf00      	nop
 8005996:	e006      	b.n	80059a6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005998:	bf00      	nop
 800599a:	e004      	b.n	80059a6 <HAL_UART_IRQHandler+0x59e>
      return;
 800599c:	bf00      	nop
 800599e:	e002      	b.n	80059a6 <HAL_UART_IRQHandler+0x59e>
      return;
 80059a0:	bf00      	nop
 80059a2:	e000      	b.n	80059a6 <HAL_UART_IRQHandler+0x59e>
    return;
 80059a4:	bf00      	nop
  }

}
 80059a6:	37e8      	adds	r7, #232	; 0xe8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4ba6      	ldr	r3, [pc, #664]	; (8005cb0 <UART_SetConfig+0x2c4>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	6979      	ldr	r1, [r7, #20]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a94      	ldr	r2, [pc, #592]	; (8005cb4 <UART_SetConfig+0x2c8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d120      	bne.n	8005aaa <UART_SetConfig+0xbe>
 8005a68:	4b93      	ldr	r3, [pc, #588]	; (8005cb8 <UART_SetConfig+0x2cc>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d816      	bhi.n	8005aa4 <UART_SetConfig+0xb8>
 8005a76:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <UART_SetConfig+0x90>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005a99 	.word	0x08005a99
 8005a84:	08005a93 	.word	0x08005a93
 8005a88:	08005a9f 	.word	0x08005a9f
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e150      	b.n	8005d34 <UART_SetConfig+0x348>
 8005a92:	2302      	movs	r3, #2
 8005a94:	77fb      	strb	r3, [r7, #31]
 8005a96:	e14d      	b.n	8005d34 <UART_SetConfig+0x348>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e14a      	b.n	8005d34 <UART_SetConfig+0x348>
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	77fb      	strb	r3, [r7, #31]
 8005aa2:	e147      	b.n	8005d34 <UART_SetConfig+0x348>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e144      	b.n	8005d34 <UART_SetConfig+0x348>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a83      	ldr	r2, [pc, #524]	; (8005cbc <UART_SetConfig+0x2d0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d132      	bne.n	8005b1a <UART_SetConfig+0x12e>
 8005ab4:	4b80      	ldr	r3, [pc, #512]	; (8005cb8 <UART_SetConfig+0x2cc>)
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	2b0c      	cmp	r3, #12
 8005ac0:	d828      	bhi.n	8005b14 <UART_SetConfig+0x128>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0xdc>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005afd 	.word	0x08005afd
 8005acc:	08005b15 	.word	0x08005b15
 8005ad0:	08005b15 	.word	0x08005b15
 8005ad4:	08005b15 	.word	0x08005b15
 8005ad8:	08005b09 	.word	0x08005b09
 8005adc:	08005b15 	.word	0x08005b15
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b15 	.word	0x08005b15
 8005ae8:	08005b03 	.word	0x08005b03
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b15 	.word	0x08005b15
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b0f 	.word	0x08005b0f
 8005afc:	2300      	movs	r3, #0
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e118      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b02:	2302      	movs	r3, #2
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e115      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e112      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e10f      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b14:	2310      	movs	r3, #16
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e10c      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a68      	ldr	r2, [pc, #416]	; (8005cc0 <UART_SetConfig+0x2d4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d120      	bne.n	8005b66 <UART_SetConfig+0x17a>
 8005b24:	4b64      	ldr	r3, [pc, #400]	; (8005cb8 <UART_SetConfig+0x2cc>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b2e:	2b30      	cmp	r3, #48	; 0x30
 8005b30:	d013      	beq.n	8005b5a <UART_SetConfig+0x16e>
 8005b32:	2b30      	cmp	r3, #48	; 0x30
 8005b34:	d814      	bhi.n	8005b60 <UART_SetConfig+0x174>
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d009      	beq.n	8005b4e <UART_SetConfig+0x162>
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d810      	bhi.n	8005b60 <UART_SetConfig+0x174>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <UART_SetConfig+0x15c>
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d006      	beq.n	8005b54 <UART_SetConfig+0x168>
 8005b46:	e00b      	b.n	8005b60 <UART_SetConfig+0x174>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e0f2      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e0ef      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b54:	2304      	movs	r3, #4
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e0ec      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e0e9      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b60:	2310      	movs	r3, #16
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e0e6      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a56      	ldr	r2, [pc, #344]	; (8005cc4 <UART_SetConfig+0x2d8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d120      	bne.n	8005bb2 <UART_SetConfig+0x1c6>
 8005b70:	4b51      	ldr	r3, [pc, #324]	; (8005cb8 <UART_SetConfig+0x2cc>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b7c:	d013      	beq.n	8005ba6 <UART_SetConfig+0x1ba>
 8005b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b80:	d814      	bhi.n	8005bac <UART_SetConfig+0x1c0>
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d009      	beq.n	8005b9a <UART_SetConfig+0x1ae>
 8005b86:	2b80      	cmp	r3, #128	; 0x80
 8005b88:	d810      	bhi.n	8005bac <UART_SetConfig+0x1c0>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <UART_SetConfig+0x1a8>
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d006      	beq.n	8005ba0 <UART_SetConfig+0x1b4>
 8005b92:	e00b      	b.n	8005bac <UART_SetConfig+0x1c0>
 8005b94:	2300      	movs	r3, #0
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e0cc      	b.n	8005d34 <UART_SetConfig+0x348>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e0c9      	b.n	8005d34 <UART_SetConfig+0x348>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e0c6      	b.n	8005d34 <UART_SetConfig+0x348>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e0c3      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bac:	2310      	movs	r3, #16
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e0c0      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a44      	ldr	r2, [pc, #272]	; (8005cc8 <UART_SetConfig+0x2dc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d125      	bne.n	8005c08 <UART_SetConfig+0x21c>
 8005bbc:	4b3e      	ldr	r3, [pc, #248]	; (8005cb8 <UART_SetConfig+0x2cc>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bca:	d017      	beq.n	8005bfc <UART_SetConfig+0x210>
 8005bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd0:	d817      	bhi.n	8005c02 <UART_SetConfig+0x216>
 8005bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd6:	d00b      	beq.n	8005bf0 <UART_SetConfig+0x204>
 8005bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bdc:	d811      	bhi.n	8005c02 <UART_SetConfig+0x216>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <UART_SetConfig+0x1fe>
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be6:	d006      	beq.n	8005bf6 <UART_SetConfig+0x20a>
 8005be8:	e00b      	b.n	8005c02 <UART_SetConfig+0x216>
 8005bea:	2300      	movs	r3, #0
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e0a1      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e09e      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e09b      	b.n	8005d34 <UART_SetConfig+0x348>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e098      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c02:	2310      	movs	r3, #16
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e095      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2f      	ldr	r2, [pc, #188]	; (8005ccc <UART_SetConfig+0x2e0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d125      	bne.n	8005c5e <UART_SetConfig+0x272>
 8005c12:	4b29      	ldr	r3, [pc, #164]	; (8005cb8 <UART_SetConfig+0x2cc>)
 8005c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c20:	d017      	beq.n	8005c52 <UART_SetConfig+0x266>
 8005c22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c26:	d817      	bhi.n	8005c58 <UART_SetConfig+0x26c>
 8005c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2c:	d00b      	beq.n	8005c46 <UART_SetConfig+0x25a>
 8005c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c32:	d811      	bhi.n	8005c58 <UART_SetConfig+0x26c>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <UART_SetConfig+0x254>
 8005c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3c:	d006      	beq.n	8005c4c <UART_SetConfig+0x260>
 8005c3e:	e00b      	b.n	8005c58 <UART_SetConfig+0x26c>
 8005c40:	2301      	movs	r3, #1
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e076      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c46:	2302      	movs	r3, #2
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e073      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e070      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c52:	2308      	movs	r3, #8
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e06d      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e06a      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <UART_SetConfig+0x2e4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d138      	bne.n	8005cda <UART_SetConfig+0x2ee>
 8005c68:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <UART_SetConfig+0x2cc>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c76:	d017      	beq.n	8005ca8 <UART_SetConfig+0x2bc>
 8005c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c7c:	d82a      	bhi.n	8005cd4 <UART_SetConfig+0x2e8>
 8005c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c82:	d00b      	beq.n	8005c9c <UART_SetConfig+0x2b0>
 8005c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c88:	d824      	bhi.n	8005cd4 <UART_SetConfig+0x2e8>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <UART_SetConfig+0x2aa>
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c92:	d006      	beq.n	8005ca2 <UART_SetConfig+0x2b6>
 8005c94:	e01e      	b.n	8005cd4 <UART_SetConfig+0x2e8>
 8005c96:	2300      	movs	r3, #0
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e04b      	b.n	8005d34 <UART_SetConfig+0x348>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e048      	b.n	8005d34 <UART_SetConfig+0x348>
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e045      	b.n	8005d34 <UART_SetConfig+0x348>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e042      	b.n	8005d34 <UART_SetConfig+0x348>
 8005cae:	bf00      	nop
 8005cb0:	efff69f3 	.word	0xefff69f3
 8005cb4:	40011000 	.word	0x40011000
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40004400 	.word	0x40004400
 8005cc0:	40004800 	.word	0x40004800
 8005cc4:	40004c00 	.word	0x40004c00
 8005cc8:	40005000 	.word	0x40005000
 8005ccc:	40011400 	.word	0x40011400
 8005cd0:	40007800 	.word	0x40007800
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e02c      	b.n	8005d34 <UART_SetConfig+0x348>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a72      	ldr	r2, [pc, #456]	; (8005ea8 <UART_SetConfig+0x4bc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d125      	bne.n	8005d30 <UART_SetConfig+0x344>
 8005ce4:	4b71      	ldr	r3, [pc, #452]	; (8005eac <UART_SetConfig+0x4c0>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cf2:	d017      	beq.n	8005d24 <UART_SetConfig+0x338>
 8005cf4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cf8:	d817      	bhi.n	8005d2a <UART_SetConfig+0x33e>
 8005cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfe:	d00b      	beq.n	8005d18 <UART_SetConfig+0x32c>
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d04:	d811      	bhi.n	8005d2a <UART_SetConfig+0x33e>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <UART_SetConfig+0x326>
 8005d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d0e:	d006      	beq.n	8005d1e <UART_SetConfig+0x332>
 8005d10:	e00b      	b.n	8005d2a <UART_SetConfig+0x33e>
 8005d12:	2300      	movs	r3, #0
 8005d14:	77fb      	strb	r3, [r7, #31]
 8005d16:	e00d      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	77fb      	strb	r3, [r7, #31]
 8005d1c:	e00a      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d1e:	2304      	movs	r3, #4
 8005d20:	77fb      	strb	r3, [r7, #31]
 8005d22:	e007      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d24:	2308      	movs	r3, #8
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e004      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e001      	b.n	8005d34 <UART_SetConfig+0x348>
 8005d30:	2310      	movs	r3, #16
 8005d32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d3c:	d15b      	bne.n	8005df6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d3e:	7ffb      	ldrb	r3, [r7, #31]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d828      	bhi.n	8005d96 <UART_SetConfig+0x3aa>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x360>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	08005d97 	.word	0x08005d97
 8005d5c:	08005d87 	.word	0x08005d87
 8005d60:	08005d97 	.word	0x08005d97
 8005d64:	08005d97 	.word	0x08005d97
 8005d68:	08005d97 	.word	0x08005d97
 8005d6c:	08005d8f 	.word	0x08005d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7fd fbe0 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 8005d74:	61b8      	str	r0, [r7, #24]
        break;
 8005d76:	e013      	b.n	8005da0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d78:	f7fd fbf0 	bl	800355c <HAL_RCC_GetPCLK2Freq>
 8005d7c:	61b8      	str	r0, [r7, #24]
        break;
 8005d7e:	e00f      	b.n	8005da0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d80:	4b4b      	ldr	r3, [pc, #300]	; (8005eb0 <UART_SetConfig+0x4c4>)
 8005d82:	61bb      	str	r3, [r7, #24]
        break;
 8005d84:	e00c      	b.n	8005da0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d86:	f7fd fac3 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 8005d8a:	61b8      	str	r0, [r7, #24]
        break;
 8005d8c:	e008      	b.n	8005da0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d92:	61bb      	str	r3, [r7, #24]
        break;
 8005d94:	e004      	b.n	8005da0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d074      	beq.n	8005e90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	005a      	lsls	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	441a      	add	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b0f      	cmp	r3, #15
 8005dc0:	d916      	bls.n	8005df0 <UART_SetConfig+0x404>
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc8:	d212      	bcs.n	8005df0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f023 030f 	bic.w	r3, r3, #15
 8005dd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	89fb      	ldrh	r3, [r7, #14]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	89fa      	ldrh	r2, [r7, #14]
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	e04f      	b.n	8005e90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	77bb      	strb	r3, [r7, #30]
 8005df4:	e04c      	b.n	8005e90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005df6:	7ffb      	ldrb	r3, [r7, #31]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d828      	bhi.n	8005e4e <UART_SetConfig+0x462>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x418>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	08005e4f 	.word	0x08005e4f
 8005e14:	08005e3f 	.word	0x08005e3f
 8005e18:	08005e4f 	.word	0x08005e4f
 8005e1c:	08005e4f 	.word	0x08005e4f
 8005e20:	08005e4f 	.word	0x08005e4f
 8005e24:	08005e47 	.word	0x08005e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fd fb84 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	61b8      	str	r0, [r7, #24]
        break;
 8005e2e:	e013      	b.n	8005e58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fd fb94 	bl	800355c <HAL_RCC_GetPCLK2Freq>
 8005e34:	61b8      	str	r0, [r7, #24]
        break;
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <UART_SetConfig+0x4c4>)
 8005e3a:	61bb      	str	r3, [r7, #24]
        break;
 8005e3c:	e00c      	b.n	8005e58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3e:	f7fd fa67 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 8005e42:	61b8      	str	r0, [r7, #24]
        break;
 8005e44:	e008      	b.n	8005e58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4a:	61bb      	str	r3, [r7, #24]
        break;
 8005e4c:	e004      	b.n	8005e58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	77bb      	strb	r3, [r7, #30]
        break;
 8005e56:	bf00      	nop
    }

    if (pclk != 0U)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d018      	beq.n	8005e90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	085a      	lsrs	r2, r3, #1
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	441a      	add	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b0f      	cmp	r3, #15
 8005e76:	d909      	bls.n	8005e8c <UART_SetConfig+0x4a0>
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7e:	d205      	bcs.n	8005e8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e001      	b.n	8005e90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40007c00 	.word	0x40007c00
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	00f42400 	.word	0x00f42400

08005eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01a      	beq.n	8005fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb2:	d10a      	bne.n	8005fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
  }
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006008:	f7fb fb2c 	bl	8001664 <HAL_GetTick>
 800600c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d10e      	bne.n	800603a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f81b 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e011      	b.n	800605e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b09c      	sub	sp, #112	; 0x70
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	e0a7      	b.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	f000 80a3 	beq.w	80061c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006082:	f7fb faef 	bl	8001664 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800608e:	429a      	cmp	r2, r3
 8006090:	d302      	bcc.n	8006098 <UART_WaitOnFlagUntilTimeout+0x32>
 8006092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006094:	2b00      	cmp	r3, #0
 8006096:	d13f      	bne.n	8006118 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ac:	667b      	str	r3, [r7, #100]	; 0x64
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	663b      	str	r3, [r7, #96]	; 0x60
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e068      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d050      	beq.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006134:	d148      	bne.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800613e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
 8006160:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e6      	bne.n	8006140 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	613b      	str	r3, [r7, #16]
   return(result);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	66bb      	str	r3, [r7, #104]	; 0x68
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006192:	623a      	str	r2, [r7, #32]
 8006194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	69f9      	ldr	r1, [r7, #28]
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e5      	bne.n	8006172 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e010      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	bf0c      	ite	eq
 80061d8:	2301      	moveq	r3, #1
 80061da:	2300      	movne	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	f43f af48 	beq.w	8006078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3770      	adds	r7, #112	; 0x70
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b095      	sub	sp, #84	; 0x54
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006218:	643b      	str	r3, [r7, #64]	; 0x40
 800621a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800621e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	61fb      	str	r3, [r7, #28]
   return(result);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	64bb      	str	r3, [r7, #72]	; 0x48
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800624c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006264:	2b01      	cmp	r3, #1
 8006266:	d118      	bne.n	800629a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	60bb      	str	r3, [r7, #8]
   return(result);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f023 0310 	bic.w	r3, r3, #16
 800627c:	647b      	str	r3, [r7, #68]	; 0x44
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6979      	ldr	r1, [r7, #20]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	613b      	str	r3, [r7, #16]
   return(result);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e6      	bne.n	8006268 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062ae:	bf00      	nop
 80062b0:	3754      	adds	r7, #84	; 0x54
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff fb71 	bl	80059c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b088      	sub	sp, #32
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6979      	ldr	r1, [r7, #20]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	613b      	str	r3, [r7, #16]
   return(result);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e6      	bne.n	80062ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff fb3d 	bl	80059ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006332:	bf00      	nop
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800633c:	b084      	sub	sp, #16
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	f107 001c 	add.w	r0, r7, #28
 800634a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2b01      	cmp	r3, #1
 8006352:	d120      	bne.n	8006396 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	4b20      	ldr	r3, [pc, #128]	; (80063e8 <USB_CoreInit+0xac>)
 8006366:	4013      	ands	r3, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa96 	bl	80068bc <USB_CoreReset>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	e010      	b.n	80063b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa8a 	bl	80068bc <USB_CoreReset>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d10b      	bne.n	80063d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f043 0206 	orr.w	r2, r3, #6
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f043 0220 	orr.w	r2, r3, #32
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063e2:	b004      	add	sp, #16
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	ffbdffbf 	.word	0xffbdffbf

080063ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f023 0201 	bic.w	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d115      	bne.n	800645c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800643c:	2001      	movs	r0, #1
 800643e:	f7fb f91d 	bl	800167c <HAL_Delay>
      ms++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3301      	adds	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fa29 	bl	80068a0 <USB_GetMode>
 800644e:	4603      	mov	r3, r0
 8006450:	2b01      	cmp	r3, #1
 8006452:	d01e      	beq.n	8006492 <USB_SetCurrentMode+0x84>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b31      	cmp	r3, #49	; 0x31
 8006458:	d9f0      	bls.n	800643c <USB_SetCurrentMode+0x2e>
 800645a:	e01a      	b.n	8006492 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d115      	bne.n	800648e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800646e:	2001      	movs	r0, #1
 8006470:	f7fb f904 	bl	800167c <HAL_Delay>
      ms++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa10 	bl	80068a0 <USB_GetMode>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <USB_SetCurrentMode+0x84>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b31      	cmp	r3, #49	; 0x31
 800648a:	d9f0      	bls.n	800646e <USB_SetCurrentMode+0x60>
 800648c:	e001      	b.n	8006492 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e005      	b.n	800649e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b32      	cmp	r3, #50	; 0x32
 8006496:	d101      	bne.n	800649c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064a8:	b084      	sub	sp, #16
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	e009      	b.n	80064dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	3340      	adds	r3, #64	; 0x40
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	3301      	adds	r3, #1
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b0e      	cmp	r3, #14
 80064e0:	d9f2      	bls.n	80064c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d11c      	bne.n	8006522 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f6:	f043 0302 	orr.w	r3, r3, #2
 80064fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e005      	b.n	800652e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006534:	461a      	mov	r2, r3
 8006536:	2300      	movs	r3, #0
 8006538:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006540:	4619      	mov	r1, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006548:	461a      	mov	r2, r3
 800654a:	680b      	ldr	r3, [r1, #0]
 800654c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	2b01      	cmp	r3, #1
 8006552:	d10c      	bne.n	800656e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800655a:	2100      	movs	r1, #0
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f965 	bl	800682c <USB_SetDevSpeed>
 8006562:	e008      	b.n	8006576 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006564:	2101      	movs	r1, #1
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f960 	bl	800682c <USB_SetDevSpeed>
 800656c:	e003      	b.n	8006576 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800656e:	2103      	movs	r1, #3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f95b 	bl	800682c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006576:	2110      	movs	r1, #16
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f8f3 	bl	8006764 <USB_FlushTxFifo>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f91f 	bl	80067cc <USB_FlushRxFifo>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	461a      	mov	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	461a      	mov	r2, r3
 80065ac:	2300      	movs	r3, #0
 80065ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	461a      	mov	r2, r3
 80065b8:	2300      	movs	r3, #0
 80065ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	e043      	b.n	800664a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d8:	d118      	bne.n	800660c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	461a      	mov	r2, r3
 80065ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	e013      	b.n	800661e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	461a      	mov	r2, r3
 8006604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	e008      	b.n	800661e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006618:	461a      	mov	r2, r3
 800661a:	2300      	movs	r3, #0
 800661c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	461a      	mov	r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	461a      	mov	r2, r3
 800663e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006642:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	3301      	adds	r3, #1
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	d3b7      	bcc.n	80065c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	e043      	b.n	80066e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800666a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800666e:	d118      	bne.n	80066a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	461a      	mov	r2, r3
 8006684:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e013      	b.n	80066b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	461a      	mov	r2, r3
 800669a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e008      	b.n	80066b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	461a      	mov	r2, r3
 80066b0:	2300      	movs	r3, #0
 80066b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c0:	461a      	mov	r2, r3
 80066c2:	2300      	movs	r3, #0
 80066c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	461a      	mov	r2, r3
 80066d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	3301      	adds	r3, #1
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d3b7      	bcc.n	8006658 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006708:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f043 0210 	orr.w	r2, r3, #16
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	4b0e      	ldr	r3, [pc, #56]	; (800675c <USB_DevInit+0x2b4>)
 8006722:	4313      	orrs	r3, r2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f043 0208 	orr.w	r2, r3, #8
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	2b01      	cmp	r3, #1
 800673e:	d105      	bne.n	800674c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699a      	ldr	r2, [r3, #24]
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <USB_DevInit+0x2b8>)
 8006746:	4313      	orrs	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006758:	b004      	add	sp, #16
 800675a:	4770      	bx	lr
 800675c:	803c3800 	.word	0x803c3800
 8006760:	40000004 	.word	0x40000004

08006764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3301      	adds	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <USB_FlushTxFifo+0x64>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d901      	bls.n	8006784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e01b      	b.n	80067bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	daf2      	bge.n	8006772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	019b      	lsls	r3, r3, #6
 8006794:	f043 0220 	orr.w	r2, r3, #32
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <USB_FlushTxFifo+0x64>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d901      	bls.n	80067ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e006      	b.n	80067bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d0f0      	beq.n	800679c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	00030d40 	.word	0x00030d40

080067cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4a11      	ldr	r2, [pc, #68]	; (8006828 <USB_FlushRxFifo+0x5c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d901      	bls.n	80067ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e018      	b.n	800681c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	daf2      	bge.n	80067d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2210      	movs	r2, #16
 80067fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4a08      	ldr	r2, [pc, #32]	; (8006828 <USB_FlushRxFifo+0x5c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e006      	b.n	800681c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b10      	cmp	r3, #16
 8006818:	d0f0      	beq.n	80067fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	00030d40 	.word	0x00030d40

0800682c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800684c:	4313      	orrs	r3, r2
 800684e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006878:	f023 0303 	bic.w	r3, r3, #3
 800687c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688c:	f043 0302 	orr.w	r3, r3, #2
 8006890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f003 0301 	and.w	r3, r3, #1
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4a13      	ldr	r2, [pc, #76]	; (8006920 <USB_CoreReset+0x64>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e01b      	b.n	8006912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	daf2      	bge.n	80068c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f043 0201 	orr.w	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a09      	ldr	r2, [pc, #36]	; (8006920 <USB_CoreReset+0x64>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d901      	bls.n	8006904 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e006      	b.n	8006912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d0f0      	beq.n	80068f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	00030d40 	.word	0x00030d40

08006924 <__errno>:
 8006924:	4b01      	ldr	r3, [pc, #4]	; (800692c <__errno+0x8>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000048 	.word	0x20000048

08006930 <__libc_init_array>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4d0d      	ldr	r5, [pc, #52]	; (8006968 <__libc_init_array+0x38>)
 8006934:	4c0d      	ldr	r4, [pc, #52]	; (800696c <__libc_init_array+0x3c>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	2600      	movs	r6, #0
 800693c:	42a6      	cmp	r6, r4
 800693e:	d109      	bne.n	8006954 <__libc_init_array+0x24>
 8006940:	4d0b      	ldr	r5, [pc, #44]	; (8006970 <__libc_init_array+0x40>)
 8006942:	4c0c      	ldr	r4, [pc, #48]	; (8006974 <__libc_init_array+0x44>)
 8006944:	f001 f94a 	bl	8007bdc <_init>
 8006948:	1b64      	subs	r4, r4, r5
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	2600      	movs	r6, #0
 800694e:	42a6      	cmp	r6, r4
 8006950:	d105      	bne.n	800695e <__libc_init_array+0x2e>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	f855 3b04 	ldr.w	r3, [r5], #4
 8006958:	4798      	blx	r3
 800695a:	3601      	adds	r6, #1
 800695c:	e7ee      	b.n	800693c <__libc_init_array+0xc>
 800695e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006962:	4798      	blx	r3
 8006964:	3601      	adds	r6, #1
 8006966:	e7f2      	b.n	800694e <__libc_init_array+0x1e>
 8006968:	08007dec 	.word	0x08007dec
 800696c:	08007dec 	.word	0x08007dec
 8006970:	08007dec 	.word	0x08007dec
 8006974:	08007df0 	.word	0x08007df0

08006978 <memset>:
 8006978:	4402      	add	r2, r0
 800697a:	4603      	mov	r3, r0
 800697c:	4293      	cmp	r3, r2
 800697e:	d100      	bne.n	8006982 <memset+0xa>
 8006980:	4770      	bx	lr
 8006982:	f803 1b01 	strb.w	r1, [r3], #1
 8006986:	e7f9      	b.n	800697c <memset+0x4>

08006988 <siprintf>:
 8006988:	b40e      	push	{r1, r2, r3}
 800698a:	b500      	push	{lr}
 800698c:	b09c      	sub	sp, #112	; 0x70
 800698e:	ab1d      	add	r3, sp, #116	; 0x74
 8006990:	9002      	str	r0, [sp, #8]
 8006992:	9006      	str	r0, [sp, #24]
 8006994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006998:	4809      	ldr	r0, [pc, #36]	; (80069c0 <siprintf+0x38>)
 800699a:	9107      	str	r1, [sp, #28]
 800699c:	9104      	str	r1, [sp, #16]
 800699e:	4909      	ldr	r1, [pc, #36]	; (80069c4 <siprintf+0x3c>)
 80069a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a4:	9105      	str	r1, [sp, #20]
 80069a6:	6800      	ldr	r0, [r0, #0]
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	a902      	add	r1, sp, #8
 80069ac:	f000 f896 	bl	8006adc <_svfiprintf_r>
 80069b0:	9b02      	ldr	r3, [sp, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	b01c      	add	sp, #112	; 0x70
 80069b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069bc:	b003      	add	sp, #12
 80069be:	4770      	bx	lr
 80069c0:	20000048 	.word	0x20000048
 80069c4:	ffff0208 	.word	0xffff0208

080069c8 <siscanf>:
 80069c8:	b40e      	push	{r1, r2, r3}
 80069ca:	b510      	push	{r4, lr}
 80069cc:	b09f      	sub	sp, #124	; 0x7c
 80069ce:	ac21      	add	r4, sp, #132	; 0x84
 80069d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80069d4:	f854 2b04 	ldr.w	r2, [r4], #4
 80069d8:	9201      	str	r2, [sp, #4]
 80069da:	f8ad 101c 	strh.w	r1, [sp, #28]
 80069de:	9004      	str	r0, [sp, #16]
 80069e0:	9008      	str	r0, [sp, #32]
 80069e2:	f7f9 fc15 	bl	8000210 <strlen>
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <siscanf+0x50>)
 80069e8:	9005      	str	r0, [sp, #20]
 80069ea:	9009      	str	r0, [sp, #36]	; 0x24
 80069ec:	930d      	str	r3, [sp, #52]	; 0x34
 80069ee:	480b      	ldr	r0, [pc, #44]	; (8006a1c <siscanf+0x54>)
 80069f0:	9a01      	ldr	r2, [sp, #4]
 80069f2:	6800      	ldr	r0, [r0, #0]
 80069f4:	9403      	str	r4, [sp, #12]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9311      	str	r3, [sp, #68]	; 0x44
 80069fa:	9316      	str	r3, [sp, #88]	; 0x58
 80069fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006a04:	a904      	add	r1, sp, #16
 8006a06:	4623      	mov	r3, r4
 8006a08:	f000 f9c2 	bl	8006d90 <__ssvfiscanf_r>
 8006a0c:	b01f      	add	sp, #124	; 0x7c
 8006a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a12:	b003      	add	sp, #12
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	08006a21 	.word	0x08006a21
 8006a1c:	20000048 	.word	0x20000048

08006a20 <__seofread>:
 8006a20:	2000      	movs	r0, #0
 8006a22:	4770      	bx	lr

08006a24 <__ssputs_r>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	688e      	ldr	r6, [r1, #8]
 8006a2a:	429e      	cmp	r6, r3
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	4690      	mov	r8, r2
 8006a32:	461f      	mov	r7, r3
 8006a34:	d838      	bhi.n	8006aa8 <__ssputs_r+0x84>
 8006a36:	898a      	ldrh	r2, [r1, #12]
 8006a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a3c:	d032      	beq.n	8006aa4 <__ssputs_r+0x80>
 8006a3e:	6825      	ldr	r5, [r4, #0]
 8006a40:	6909      	ldr	r1, [r1, #16]
 8006a42:	eba5 0901 	sub.w	r9, r5, r1
 8006a46:	6965      	ldr	r5, [r4, #20]
 8006a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a50:	3301      	adds	r3, #1
 8006a52:	444b      	add	r3, r9
 8006a54:	106d      	asrs	r5, r5, #1
 8006a56:	429d      	cmp	r5, r3
 8006a58:	bf38      	it	cc
 8006a5a:	461d      	movcc	r5, r3
 8006a5c:	0553      	lsls	r3, r2, #21
 8006a5e:	d531      	bpl.n	8006ac4 <__ssputs_r+0xa0>
 8006a60:	4629      	mov	r1, r5
 8006a62:	f000 fff3 	bl	8007a4c <_malloc_r>
 8006a66:	4606      	mov	r6, r0
 8006a68:	b950      	cbnz	r0, 8006a80 <__ssputs_r+0x5c>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	f8ca 3000 	str.w	r3, [sl]
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a80:	6921      	ldr	r1, [r4, #16]
 8006a82:	464a      	mov	r2, r9
 8006a84:	f000 ff4e 	bl	8007924 <memcpy>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	6126      	str	r6, [r4, #16]
 8006a96:	6165      	str	r5, [r4, #20]
 8006a98:	444e      	add	r6, r9
 8006a9a:	eba5 0509 	sub.w	r5, r5, r9
 8006a9e:	6026      	str	r6, [r4, #0]
 8006aa0:	60a5      	str	r5, [r4, #8]
 8006aa2:	463e      	mov	r6, r7
 8006aa4:	42be      	cmp	r6, r7
 8006aa6:	d900      	bls.n	8006aaa <__ssputs_r+0x86>
 8006aa8:	463e      	mov	r6, r7
 8006aaa:	6820      	ldr	r0, [r4, #0]
 8006aac:	4632      	mov	r2, r6
 8006aae:	4641      	mov	r1, r8
 8006ab0:	f000 ff46 	bl	8007940 <memmove>
 8006ab4:	68a3      	ldr	r3, [r4, #8]
 8006ab6:	1b9b      	subs	r3, r3, r6
 8006ab8:	60a3      	str	r3, [r4, #8]
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	4433      	add	r3, r6
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e7db      	b.n	8006a7c <__ssputs_r+0x58>
 8006ac4:	462a      	mov	r2, r5
 8006ac6:	f001 f835 	bl	8007b34 <_realloc_r>
 8006aca:	4606      	mov	r6, r0
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d1e1      	bne.n	8006a94 <__ssputs_r+0x70>
 8006ad0:	6921      	ldr	r1, [r4, #16]
 8006ad2:	4650      	mov	r0, sl
 8006ad4:	f000 ff4e 	bl	8007974 <_free_r>
 8006ad8:	e7c7      	b.n	8006a6a <__ssputs_r+0x46>
	...

08006adc <_svfiprintf_r>:
 8006adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae0:	4698      	mov	r8, r3
 8006ae2:	898b      	ldrh	r3, [r1, #12]
 8006ae4:	061b      	lsls	r3, r3, #24
 8006ae6:	b09d      	sub	sp, #116	; 0x74
 8006ae8:	4607      	mov	r7, r0
 8006aea:	460d      	mov	r5, r1
 8006aec:	4614      	mov	r4, r2
 8006aee:	d50e      	bpl.n	8006b0e <_svfiprintf_r+0x32>
 8006af0:	690b      	ldr	r3, [r1, #16]
 8006af2:	b963      	cbnz	r3, 8006b0e <_svfiprintf_r+0x32>
 8006af4:	2140      	movs	r1, #64	; 0x40
 8006af6:	f000 ffa9 	bl	8007a4c <_malloc_r>
 8006afa:	6028      	str	r0, [r5, #0]
 8006afc:	6128      	str	r0, [r5, #16]
 8006afe:	b920      	cbnz	r0, 8006b0a <_svfiprintf_r+0x2e>
 8006b00:	230c      	movs	r3, #12
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	e0d1      	b.n	8006cae <_svfiprintf_r+0x1d2>
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	616b      	str	r3, [r5, #20]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9309      	str	r3, [sp, #36]	; 0x24
 8006b12:	2320      	movs	r3, #32
 8006b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b1c:	2330      	movs	r3, #48	; 0x30
 8006b1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cc8 <_svfiprintf_r+0x1ec>
 8006b22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b26:	f04f 0901 	mov.w	r9, #1
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b32:	b10a      	cbz	r2, 8006b38 <_svfiprintf_r+0x5c>
 8006b34:	2a25      	cmp	r2, #37	; 0x25
 8006b36:	d1f9      	bne.n	8006b2c <_svfiprintf_r+0x50>
 8006b38:	ebba 0b04 	subs.w	fp, sl, r4
 8006b3c:	d00b      	beq.n	8006b56 <_svfiprintf_r+0x7a>
 8006b3e:	465b      	mov	r3, fp
 8006b40:	4622      	mov	r2, r4
 8006b42:	4629      	mov	r1, r5
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff ff6d 	bl	8006a24 <__ssputs_r>
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	f000 80aa 	beq.w	8006ca4 <_svfiprintf_r+0x1c8>
 8006b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b52:	445a      	add	r2, fp
 8006b54:	9209      	str	r2, [sp, #36]	; 0x24
 8006b56:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80a2 	beq.w	8006ca4 <_svfiprintf_r+0x1c8>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295
 8006b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b6a:	f10a 0a01 	add.w	sl, sl, #1
 8006b6e:	9304      	str	r3, [sp, #16]
 8006b70:	9307      	str	r3, [sp, #28]
 8006b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b76:	931a      	str	r3, [sp, #104]	; 0x68
 8006b78:	4654      	mov	r4, sl
 8006b7a:	2205      	movs	r2, #5
 8006b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b80:	4851      	ldr	r0, [pc, #324]	; (8006cc8 <_svfiprintf_r+0x1ec>)
 8006b82:	f7f9 fb4d 	bl	8000220 <memchr>
 8006b86:	9a04      	ldr	r2, [sp, #16]
 8006b88:	b9d8      	cbnz	r0, 8006bc2 <_svfiprintf_r+0xe6>
 8006b8a:	06d0      	lsls	r0, r2, #27
 8006b8c:	bf44      	itt	mi
 8006b8e:	2320      	movmi	r3, #32
 8006b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b94:	0711      	lsls	r1, r2, #28
 8006b96:	bf44      	itt	mi
 8006b98:	232b      	movmi	r3, #43	; 0x2b
 8006b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ba4:	d015      	beq.n	8006bd2 <_svfiprintf_r+0xf6>
 8006ba6:	9a07      	ldr	r2, [sp, #28]
 8006ba8:	4654      	mov	r4, sl
 8006baa:	2000      	movs	r0, #0
 8006bac:	f04f 0c0a 	mov.w	ip, #10
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bb6:	3b30      	subs	r3, #48	; 0x30
 8006bb8:	2b09      	cmp	r3, #9
 8006bba:	d94e      	bls.n	8006c5a <_svfiprintf_r+0x17e>
 8006bbc:	b1b0      	cbz	r0, 8006bec <_svfiprintf_r+0x110>
 8006bbe:	9207      	str	r2, [sp, #28]
 8006bc0:	e014      	b.n	8006bec <_svfiprintf_r+0x110>
 8006bc2:	eba0 0308 	sub.w	r3, r0, r8
 8006bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	9304      	str	r3, [sp, #16]
 8006bce:	46a2      	mov	sl, r4
 8006bd0:	e7d2      	b.n	8006b78 <_svfiprintf_r+0x9c>
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	1d19      	adds	r1, r3, #4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	9103      	str	r1, [sp, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bfbb      	ittet	lt
 8006bde:	425b      	neglt	r3, r3
 8006be0:	f042 0202 	orrlt.w	r2, r2, #2
 8006be4:	9307      	strge	r3, [sp, #28]
 8006be6:	9307      	strlt	r3, [sp, #28]
 8006be8:	bfb8      	it	lt
 8006bea:	9204      	strlt	r2, [sp, #16]
 8006bec:	7823      	ldrb	r3, [r4, #0]
 8006bee:	2b2e      	cmp	r3, #46	; 0x2e
 8006bf0:	d10c      	bne.n	8006c0c <_svfiprintf_r+0x130>
 8006bf2:	7863      	ldrb	r3, [r4, #1]
 8006bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf6:	d135      	bne.n	8006c64 <_svfiprintf_r+0x188>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	1d1a      	adds	r2, r3, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	9203      	str	r2, [sp, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bfb8      	it	lt
 8006c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c08:	3402      	adds	r4, #2
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cd8 <_svfiprintf_r+0x1fc>
 8006c10:	7821      	ldrb	r1, [r4, #0]
 8006c12:	2203      	movs	r2, #3
 8006c14:	4650      	mov	r0, sl
 8006c16:	f7f9 fb03 	bl	8000220 <memchr>
 8006c1a:	b140      	cbz	r0, 8006c2e <_svfiprintf_r+0x152>
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	eba0 000a 	sub.w	r0, r0, sl
 8006c22:	fa03 f000 	lsl.w	r0, r3, r0
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	4303      	orrs	r3, r0
 8006c2a:	3401      	adds	r4, #1
 8006c2c:	9304      	str	r3, [sp, #16]
 8006c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c32:	4826      	ldr	r0, [pc, #152]	; (8006ccc <_svfiprintf_r+0x1f0>)
 8006c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c38:	2206      	movs	r2, #6
 8006c3a:	f7f9 faf1 	bl	8000220 <memchr>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d038      	beq.n	8006cb4 <_svfiprintf_r+0x1d8>
 8006c42:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <_svfiprintf_r+0x1f4>)
 8006c44:	bb1b      	cbnz	r3, 8006c8e <_svfiprintf_r+0x1b2>
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	3307      	adds	r3, #7
 8006c4a:	f023 0307 	bic.w	r3, r3, #7
 8006c4e:	3308      	adds	r3, #8
 8006c50:	9303      	str	r3, [sp, #12]
 8006c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c54:	4433      	add	r3, r6
 8006c56:	9309      	str	r3, [sp, #36]	; 0x24
 8006c58:	e767      	b.n	8006b2a <_svfiprintf_r+0x4e>
 8006c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c5e:	460c      	mov	r4, r1
 8006c60:	2001      	movs	r0, #1
 8006c62:	e7a5      	b.n	8006bb0 <_svfiprintf_r+0xd4>
 8006c64:	2300      	movs	r3, #0
 8006c66:	3401      	adds	r4, #1
 8006c68:	9305      	str	r3, [sp, #20]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f04f 0c0a 	mov.w	ip, #10
 8006c70:	4620      	mov	r0, r4
 8006c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c76:	3a30      	subs	r2, #48	; 0x30
 8006c78:	2a09      	cmp	r2, #9
 8006c7a:	d903      	bls.n	8006c84 <_svfiprintf_r+0x1a8>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0c5      	beq.n	8006c0c <_svfiprintf_r+0x130>
 8006c80:	9105      	str	r1, [sp, #20]
 8006c82:	e7c3      	b.n	8006c0c <_svfiprintf_r+0x130>
 8006c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c88:	4604      	mov	r4, r0
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e7f0      	b.n	8006c70 <_svfiprintf_r+0x194>
 8006c8e:	ab03      	add	r3, sp, #12
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	462a      	mov	r2, r5
 8006c94:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <_svfiprintf_r+0x1f8>)
 8006c96:	a904      	add	r1, sp, #16
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f3af 8000 	nop.w
 8006c9e:	1c42      	adds	r2, r0, #1
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	d1d6      	bne.n	8006c52 <_svfiprintf_r+0x176>
 8006ca4:	89ab      	ldrh	r3, [r5, #12]
 8006ca6:	065b      	lsls	r3, r3, #25
 8006ca8:	f53f af2c 	bmi.w	8006b04 <_svfiprintf_r+0x28>
 8006cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cae:	b01d      	add	sp, #116	; 0x74
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb4:	ab03      	add	r3, sp, #12
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <_svfiprintf_r+0x1f8>)
 8006cbc:	a904      	add	r1, sp, #16
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f000 fa4c 	bl	800715c <_printf_i>
 8006cc4:	e7eb      	b.n	8006c9e <_svfiprintf_r+0x1c2>
 8006cc6:	bf00      	nop
 8006cc8:	08007c34 	.word	0x08007c34
 8006ccc:	08007c3e 	.word	0x08007c3e
 8006cd0:	00000000 	.word	0x00000000
 8006cd4:	08006a25 	.word	0x08006a25
 8006cd8:	08007c3a 	.word	0x08007c3a

08006cdc <_sungetc_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	1c4b      	adds	r3, r1, #1
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	d103      	bne.n	8006cec <_sungetc_r+0x10>
 8006ce4:	f04f 35ff 	mov.w	r5, #4294967295
 8006ce8:	4628      	mov	r0, r5
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	8993      	ldrh	r3, [r2, #12]
 8006cee:	f023 0320 	bic.w	r3, r3, #32
 8006cf2:	8193      	strh	r3, [r2, #12]
 8006cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf6:	6852      	ldr	r2, [r2, #4]
 8006cf8:	b2cd      	uxtb	r5, r1
 8006cfa:	b18b      	cbz	r3, 8006d20 <_sungetc_r+0x44>
 8006cfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	dd08      	ble.n	8006d14 <_sungetc_r+0x38>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	1e5a      	subs	r2, r3, #1
 8006d06:	6022      	str	r2, [r4, #0]
 8006d08:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	6063      	str	r3, [r4, #4]
 8006d12:	e7e9      	b.n	8006ce8 <_sungetc_r+0xc>
 8006d14:	4621      	mov	r1, r4
 8006d16:	f000 fdc9 	bl	80078ac <__submore>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0f1      	beq.n	8006d02 <_sungetc_r+0x26>
 8006d1e:	e7e1      	b.n	8006ce4 <_sungetc_r+0x8>
 8006d20:	6921      	ldr	r1, [r4, #16]
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	b151      	cbz	r1, 8006d3c <_sungetc_r+0x60>
 8006d26:	4299      	cmp	r1, r3
 8006d28:	d208      	bcs.n	8006d3c <_sungetc_r+0x60>
 8006d2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006d2e:	42a9      	cmp	r1, r5
 8006d30:	d104      	bne.n	8006d3c <_sungetc_r+0x60>
 8006d32:	3b01      	subs	r3, #1
 8006d34:	3201      	adds	r2, #1
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	6062      	str	r2, [r4, #4]
 8006d3a:	e7d5      	b.n	8006ce8 <_sungetc_r+0xc>
 8006d3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d44:	6363      	str	r3, [r4, #52]	; 0x34
 8006d46:	2303      	movs	r3, #3
 8006d48:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7dc      	b.n	8006d10 <_sungetc_r+0x34>

08006d56 <__ssrefill_r>:
 8006d56:	b510      	push	{r4, lr}
 8006d58:	460c      	mov	r4, r1
 8006d5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006d5c:	b169      	cbz	r1, 8006d7a <__ssrefill_r+0x24>
 8006d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d62:	4299      	cmp	r1, r3
 8006d64:	d001      	beq.n	8006d6a <__ssrefill_r+0x14>
 8006d66:	f000 fe05 	bl	8007974 <_free_r>
 8006d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d6c:	6063      	str	r3, [r4, #4]
 8006d6e:	2000      	movs	r0, #0
 8006d70:	6360      	str	r0, [r4, #52]	; 0x34
 8006d72:	b113      	cbz	r3, 8006d7a <__ssrefill_r+0x24>
 8006d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f043 0320 	orr.w	r3, r3, #32
 8006d88:	81a3      	strh	r3, [r4, #12]
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	e7f3      	b.n	8006d78 <__ssrefill_r+0x22>

08006d90 <__ssvfiscanf_r>:
 8006d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006da0:	49a6      	ldr	r1, [pc, #664]	; (800703c <__ssvfiscanf_r+0x2ac>)
 8006da2:	91a0      	str	r1, [sp, #640]	; 0x280
 8006da4:	f10d 0804 	add.w	r8, sp, #4
 8006da8:	49a5      	ldr	r1, [pc, #660]	; (8007040 <__ssvfiscanf_r+0x2b0>)
 8006daa:	4fa6      	ldr	r7, [pc, #664]	; (8007044 <__ssvfiscanf_r+0x2b4>)
 8006dac:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007048 <__ssvfiscanf_r+0x2b8>
 8006db0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006db4:	4606      	mov	r6, r0
 8006db6:	91a1      	str	r1, [sp, #644]	; 0x284
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	7813      	ldrb	r3, [r2, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 815a 	beq.w	8007076 <__ssvfiscanf_r+0x2e6>
 8006dc2:	5dd9      	ldrb	r1, [r3, r7]
 8006dc4:	f011 0108 	ands.w	r1, r1, #8
 8006dc8:	f102 0501 	add.w	r5, r2, #1
 8006dcc:	d019      	beq.n	8006e02 <__ssvfiscanf_r+0x72>
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	dd0f      	ble.n	8006df4 <__ssvfiscanf_r+0x64>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	5cba      	ldrb	r2, [r7, r2]
 8006dda:	0712      	lsls	r2, r2, #28
 8006ddc:	d401      	bmi.n	8006de2 <__ssvfiscanf_r+0x52>
 8006dde:	462a      	mov	r2, r5
 8006de0:	e7eb      	b.n	8006dba <__ssvfiscanf_r+0x2a>
 8006de2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006de4:	3201      	adds	r2, #1
 8006de6:	9245      	str	r2, [sp, #276]	; 0x114
 8006de8:	6862      	ldr	r2, [r4, #4]
 8006dea:	3301      	adds	r3, #1
 8006dec:	3a01      	subs	r2, #1
 8006dee:	6062      	str	r2, [r4, #4]
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	e7ec      	b.n	8006dce <__ssvfiscanf_r+0x3e>
 8006df4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006df6:	4621      	mov	r1, r4
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4798      	blx	r3
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d0e9      	beq.n	8006dd4 <__ssvfiscanf_r+0x44>
 8006e00:	e7ed      	b.n	8006dde <__ssvfiscanf_r+0x4e>
 8006e02:	2b25      	cmp	r3, #37	; 0x25
 8006e04:	d012      	beq.n	8006e2c <__ssvfiscanf_r+0x9c>
 8006e06:	469a      	mov	sl, r3
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f340 8091 	ble.w	8006f32 <__ssvfiscanf_r+0x1a2>
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	7813      	ldrb	r3, [r2, #0]
 8006e14:	4553      	cmp	r3, sl
 8006e16:	f040 812e 	bne.w	8007076 <__ssvfiscanf_r+0x2e6>
 8006e1a:	6863      	ldr	r3, [r4, #4]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006e22:	3201      	adds	r2, #1
 8006e24:	3301      	adds	r3, #1
 8006e26:	6022      	str	r2, [r4, #0]
 8006e28:	9345      	str	r3, [sp, #276]	; 0x114
 8006e2a:	e7d8      	b.n	8006dde <__ssvfiscanf_r+0x4e>
 8006e2c:	9141      	str	r1, [sp, #260]	; 0x104
 8006e2e:	9143      	str	r1, [sp, #268]	; 0x10c
 8006e30:	7853      	ldrb	r3, [r2, #1]
 8006e32:	2b2a      	cmp	r3, #42	; 0x2a
 8006e34:	bf02      	ittt	eq
 8006e36:	2310      	moveq	r3, #16
 8006e38:	1c95      	addeq	r5, r2, #2
 8006e3a:	9341      	streq	r3, [sp, #260]	; 0x104
 8006e3c:	220a      	movs	r2, #10
 8006e3e:	46aa      	mov	sl, r5
 8006e40:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006e44:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006e48:	2b09      	cmp	r3, #9
 8006e4a:	d91d      	bls.n	8006e88 <__ssvfiscanf_r+0xf8>
 8006e4c:	487e      	ldr	r0, [pc, #504]	; (8007048 <__ssvfiscanf_r+0x2b8>)
 8006e4e:	2203      	movs	r2, #3
 8006e50:	f7f9 f9e6 	bl	8000220 <memchr>
 8006e54:	b140      	cbz	r0, 8006e68 <__ssvfiscanf_r+0xd8>
 8006e56:	2301      	movs	r3, #1
 8006e58:	eba0 0009 	sub.w	r0, r0, r9
 8006e5c:	fa03 f000 	lsl.w	r0, r3, r0
 8006e60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e62:	4318      	orrs	r0, r3
 8006e64:	9041      	str	r0, [sp, #260]	; 0x104
 8006e66:	4655      	mov	r5, sl
 8006e68:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e6c:	2b78      	cmp	r3, #120	; 0x78
 8006e6e:	d806      	bhi.n	8006e7e <__ssvfiscanf_r+0xee>
 8006e70:	2b57      	cmp	r3, #87	; 0x57
 8006e72:	d810      	bhi.n	8006e96 <__ssvfiscanf_r+0x106>
 8006e74:	2b25      	cmp	r3, #37	; 0x25
 8006e76:	d0c6      	beq.n	8006e06 <__ssvfiscanf_r+0x76>
 8006e78:	d856      	bhi.n	8006f28 <__ssvfiscanf_r+0x198>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d064      	beq.n	8006f48 <__ssvfiscanf_r+0x1b8>
 8006e7e:	2303      	movs	r3, #3
 8006e80:	9347      	str	r3, [sp, #284]	; 0x11c
 8006e82:	230a      	movs	r3, #10
 8006e84:	9342      	str	r3, [sp, #264]	; 0x108
 8006e86:	e071      	b.n	8006f6c <__ssvfiscanf_r+0x1dc>
 8006e88:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006e8a:	fb02 1103 	mla	r1, r2, r3, r1
 8006e8e:	3930      	subs	r1, #48	; 0x30
 8006e90:	9143      	str	r1, [sp, #268]	; 0x10c
 8006e92:	4655      	mov	r5, sl
 8006e94:	e7d3      	b.n	8006e3e <__ssvfiscanf_r+0xae>
 8006e96:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006e9a:	2a20      	cmp	r2, #32
 8006e9c:	d8ef      	bhi.n	8006e7e <__ssvfiscanf_r+0xee>
 8006e9e:	a101      	add	r1, pc, #4	; (adr r1, 8006ea4 <__ssvfiscanf_r+0x114>)
 8006ea0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ea4:	08006f57 	.word	0x08006f57
 8006ea8:	08006e7f 	.word	0x08006e7f
 8006eac:	08006e7f 	.word	0x08006e7f
 8006eb0:	08006fb5 	.word	0x08006fb5
 8006eb4:	08006e7f 	.word	0x08006e7f
 8006eb8:	08006e7f 	.word	0x08006e7f
 8006ebc:	08006e7f 	.word	0x08006e7f
 8006ec0:	08006e7f 	.word	0x08006e7f
 8006ec4:	08006e7f 	.word	0x08006e7f
 8006ec8:	08006e7f 	.word	0x08006e7f
 8006ecc:	08006e7f 	.word	0x08006e7f
 8006ed0:	08006fcb 	.word	0x08006fcb
 8006ed4:	08006fa1 	.word	0x08006fa1
 8006ed8:	08006f2f 	.word	0x08006f2f
 8006edc:	08006f2f 	.word	0x08006f2f
 8006ee0:	08006f2f 	.word	0x08006f2f
 8006ee4:	08006e7f 	.word	0x08006e7f
 8006ee8:	08006fa5 	.word	0x08006fa5
 8006eec:	08006e7f 	.word	0x08006e7f
 8006ef0:	08006e7f 	.word	0x08006e7f
 8006ef4:	08006e7f 	.word	0x08006e7f
 8006ef8:	08006e7f 	.word	0x08006e7f
 8006efc:	08006fdb 	.word	0x08006fdb
 8006f00:	08006fad 	.word	0x08006fad
 8006f04:	08006f4f 	.word	0x08006f4f
 8006f08:	08006e7f 	.word	0x08006e7f
 8006f0c:	08006e7f 	.word	0x08006e7f
 8006f10:	08006fd7 	.word	0x08006fd7
 8006f14:	08006e7f 	.word	0x08006e7f
 8006f18:	08006fa1 	.word	0x08006fa1
 8006f1c:	08006e7f 	.word	0x08006e7f
 8006f20:	08006e7f 	.word	0x08006e7f
 8006f24:	08006f57 	.word	0x08006f57
 8006f28:	3b45      	subs	r3, #69	; 0x45
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d8a7      	bhi.n	8006e7e <__ssvfiscanf_r+0xee>
 8006f2e:	2305      	movs	r3, #5
 8006f30:	e01b      	b.n	8006f6a <__ssvfiscanf_r+0x1da>
 8006f32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f34:	4621      	mov	r1, r4
 8006f36:	4630      	mov	r0, r6
 8006f38:	4798      	blx	r3
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	f43f af68 	beq.w	8006e10 <__ssvfiscanf_r+0x80>
 8006f40:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f040 808d 	bne.w	8007062 <__ssvfiscanf_r+0x2d2>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	e08f      	b.n	800706e <__ssvfiscanf_r+0x2de>
 8006f4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006f50:	f042 0220 	orr.w	r2, r2, #32
 8006f54:	9241      	str	r2, [sp, #260]	; 0x104
 8006f56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5c:	9241      	str	r2, [sp, #260]	; 0x104
 8006f5e:	2210      	movs	r2, #16
 8006f60:	2b6f      	cmp	r3, #111	; 0x6f
 8006f62:	9242      	str	r2, [sp, #264]	; 0x108
 8006f64:	bf34      	ite	cc
 8006f66:	2303      	movcc	r3, #3
 8006f68:	2304      	movcs	r3, #4
 8006f6a:	9347      	str	r3, [sp, #284]	; 0x11c
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dd42      	ble.n	8006ff8 <__ssvfiscanf_r+0x268>
 8006f72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f74:	0659      	lsls	r1, r3, #25
 8006f76:	d404      	bmi.n	8006f82 <__ssvfiscanf_r+0x1f2>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	5cba      	ldrb	r2, [r7, r2]
 8006f7e:	0712      	lsls	r2, r2, #28
 8006f80:	d441      	bmi.n	8007006 <__ssvfiscanf_r+0x276>
 8006f82:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	dc50      	bgt.n	800702a <__ssvfiscanf_r+0x29a>
 8006f88:	466b      	mov	r3, sp
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	a941      	add	r1, sp, #260	; 0x104
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f000 fa0a 	bl	80073a8 <_scanf_chars>
 8006f94:	2801      	cmp	r0, #1
 8006f96:	d06e      	beq.n	8007076 <__ssvfiscanf_r+0x2e6>
 8006f98:	2802      	cmp	r0, #2
 8006f9a:	f47f af20 	bne.w	8006dde <__ssvfiscanf_r+0x4e>
 8006f9e:	e7cf      	b.n	8006f40 <__ssvfiscanf_r+0x1b0>
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	e7dd      	b.n	8006f60 <__ssvfiscanf_r+0x1d0>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9342      	str	r3, [sp, #264]	; 0x108
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e7de      	b.n	8006f6a <__ssvfiscanf_r+0x1da>
 8006fac:	2308      	movs	r3, #8
 8006fae:	9342      	str	r3, [sp, #264]	; 0x108
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	e7da      	b.n	8006f6a <__ssvfiscanf_r+0x1da>
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f000 fb48 	bl	800764c <__sccl>
 8006fbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc2:	9341      	str	r3, [sp, #260]	; 0x104
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e7cf      	b.n	8006f6a <__ssvfiscanf_r+0x1da>
 8006fca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd0:	9341      	str	r3, [sp, #260]	; 0x104
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e7c9      	b.n	8006f6a <__ssvfiscanf_r+0x1da>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e7c7      	b.n	8006f6a <__ssvfiscanf_r+0x1da>
 8006fda:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006fdc:	06c3      	lsls	r3, r0, #27
 8006fde:	f53f aefe 	bmi.w	8006dde <__ssvfiscanf_r+0x4e>
 8006fe2:	9b00      	ldr	r3, [sp, #0]
 8006fe4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006fe6:	1d19      	adds	r1, r3, #4
 8006fe8:	9100      	str	r1, [sp, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f010 0f01 	tst.w	r0, #1
 8006ff0:	bf14      	ite	ne
 8006ff2:	801a      	strhne	r2, [r3, #0]
 8006ff4:	601a      	streq	r2, [r3, #0]
 8006ff6:	e6f2      	b.n	8006dde <__ssvfiscanf_r+0x4e>
 8006ff8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4798      	blx	r3
 8007000:	2800      	cmp	r0, #0
 8007002:	d0b6      	beq.n	8006f72 <__ssvfiscanf_r+0x1e2>
 8007004:	e79c      	b.n	8006f40 <__ssvfiscanf_r+0x1b0>
 8007006:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007008:	3201      	adds	r2, #1
 800700a:	9245      	str	r2, [sp, #276]	; 0x114
 800700c:	6862      	ldr	r2, [r4, #4]
 800700e:	3a01      	subs	r2, #1
 8007010:	2a00      	cmp	r2, #0
 8007012:	6062      	str	r2, [r4, #4]
 8007014:	dd02      	ble.n	800701c <__ssvfiscanf_r+0x28c>
 8007016:	3301      	adds	r3, #1
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	e7ad      	b.n	8006f78 <__ssvfiscanf_r+0x1e8>
 800701c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800701e:	4621      	mov	r1, r4
 8007020:	4630      	mov	r0, r6
 8007022:	4798      	blx	r3
 8007024:	2800      	cmp	r0, #0
 8007026:	d0a7      	beq.n	8006f78 <__ssvfiscanf_r+0x1e8>
 8007028:	e78a      	b.n	8006f40 <__ssvfiscanf_r+0x1b0>
 800702a:	2b04      	cmp	r3, #4
 800702c:	dc0e      	bgt.n	800704c <__ssvfiscanf_r+0x2bc>
 800702e:	466b      	mov	r3, sp
 8007030:	4622      	mov	r2, r4
 8007032:	a941      	add	r1, sp, #260	; 0x104
 8007034:	4630      	mov	r0, r6
 8007036:	f000 fa11 	bl	800745c <_scanf_i>
 800703a:	e7ab      	b.n	8006f94 <__ssvfiscanf_r+0x204>
 800703c:	08006cdd 	.word	0x08006cdd
 8007040:	08006d57 	.word	0x08006d57
 8007044:	08007c83 	.word	0x08007c83
 8007048:	08007c3a 	.word	0x08007c3a
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <__ssvfiscanf_r+0x2ec>)
 800704e:	2b00      	cmp	r3, #0
 8007050:	f43f aec5 	beq.w	8006dde <__ssvfiscanf_r+0x4e>
 8007054:	466b      	mov	r3, sp
 8007056:	4622      	mov	r2, r4
 8007058:	a941      	add	r1, sp, #260	; 0x104
 800705a:	4630      	mov	r0, r6
 800705c:	f3af 8000 	nop.w
 8007060:	e798      	b.n	8006f94 <__ssvfiscanf_r+0x204>
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007068:	bf18      	it	ne
 800706a:	f04f 30ff 	movne.w	r0, #4294967295
 800706e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007076:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007078:	e7f9      	b.n	800706e <__ssvfiscanf_r+0x2de>
 800707a:	bf00      	nop
 800707c:	00000000 	.word	0x00000000

08007080 <_printf_common>:
 8007080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007084:	4616      	mov	r6, r2
 8007086:	4699      	mov	r9, r3
 8007088:	688a      	ldr	r2, [r1, #8]
 800708a:	690b      	ldr	r3, [r1, #16]
 800708c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007090:	4293      	cmp	r3, r2
 8007092:	bfb8      	it	lt
 8007094:	4613      	movlt	r3, r2
 8007096:	6033      	str	r3, [r6, #0]
 8007098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800709c:	4607      	mov	r7, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	b10a      	cbz	r2, 80070a6 <_printf_common+0x26>
 80070a2:	3301      	adds	r3, #1
 80070a4:	6033      	str	r3, [r6, #0]
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	0699      	lsls	r1, r3, #26
 80070aa:	bf42      	ittt	mi
 80070ac:	6833      	ldrmi	r3, [r6, #0]
 80070ae:	3302      	addmi	r3, #2
 80070b0:	6033      	strmi	r3, [r6, #0]
 80070b2:	6825      	ldr	r5, [r4, #0]
 80070b4:	f015 0506 	ands.w	r5, r5, #6
 80070b8:	d106      	bne.n	80070c8 <_printf_common+0x48>
 80070ba:	f104 0a19 	add.w	sl, r4, #25
 80070be:	68e3      	ldr	r3, [r4, #12]
 80070c0:	6832      	ldr	r2, [r6, #0]
 80070c2:	1a9b      	subs	r3, r3, r2
 80070c4:	42ab      	cmp	r3, r5
 80070c6:	dc26      	bgt.n	8007116 <_printf_common+0x96>
 80070c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070cc:	1e13      	subs	r3, r2, #0
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	bf18      	it	ne
 80070d2:	2301      	movne	r3, #1
 80070d4:	0692      	lsls	r2, r2, #26
 80070d6:	d42b      	bmi.n	8007130 <_printf_common+0xb0>
 80070d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070dc:	4649      	mov	r1, r9
 80070de:	4638      	mov	r0, r7
 80070e0:	47c0      	blx	r8
 80070e2:	3001      	adds	r0, #1
 80070e4:	d01e      	beq.n	8007124 <_printf_common+0xa4>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	68e5      	ldr	r5, [r4, #12]
 80070ea:	6832      	ldr	r2, [r6, #0]
 80070ec:	f003 0306 	and.w	r3, r3, #6
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	bf08      	it	eq
 80070f4:	1aad      	subeq	r5, r5, r2
 80070f6:	68a3      	ldr	r3, [r4, #8]
 80070f8:	6922      	ldr	r2, [r4, #16]
 80070fa:	bf0c      	ite	eq
 80070fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007100:	2500      	movne	r5, #0
 8007102:	4293      	cmp	r3, r2
 8007104:	bfc4      	itt	gt
 8007106:	1a9b      	subgt	r3, r3, r2
 8007108:	18ed      	addgt	r5, r5, r3
 800710a:	2600      	movs	r6, #0
 800710c:	341a      	adds	r4, #26
 800710e:	42b5      	cmp	r5, r6
 8007110:	d11a      	bne.n	8007148 <_printf_common+0xc8>
 8007112:	2000      	movs	r0, #0
 8007114:	e008      	b.n	8007128 <_printf_common+0xa8>
 8007116:	2301      	movs	r3, #1
 8007118:	4652      	mov	r2, sl
 800711a:	4649      	mov	r1, r9
 800711c:	4638      	mov	r0, r7
 800711e:	47c0      	blx	r8
 8007120:	3001      	adds	r0, #1
 8007122:	d103      	bne.n	800712c <_printf_common+0xac>
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800712c:	3501      	adds	r5, #1
 800712e:	e7c6      	b.n	80070be <_printf_common+0x3e>
 8007130:	18e1      	adds	r1, r4, r3
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	2030      	movs	r0, #48	; 0x30
 8007136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800713a:	4422      	add	r2, r4
 800713c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007144:	3302      	adds	r3, #2
 8007146:	e7c7      	b.n	80070d8 <_printf_common+0x58>
 8007148:	2301      	movs	r3, #1
 800714a:	4622      	mov	r2, r4
 800714c:	4649      	mov	r1, r9
 800714e:	4638      	mov	r0, r7
 8007150:	47c0      	blx	r8
 8007152:	3001      	adds	r0, #1
 8007154:	d0e6      	beq.n	8007124 <_printf_common+0xa4>
 8007156:	3601      	adds	r6, #1
 8007158:	e7d9      	b.n	800710e <_printf_common+0x8e>
	...

0800715c <_printf_i>:
 800715c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	7e0f      	ldrb	r7, [r1, #24]
 8007162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007164:	2f78      	cmp	r7, #120	; 0x78
 8007166:	4691      	mov	r9, r2
 8007168:	4680      	mov	r8, r0
 800716a:	460c      	mov	r4, r1
 800716c:	469a      	mov	sl, r3
 800716e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007172:	d807      	bhi.n	8007184 <_printf_i+0x28>
 8007174:	2f62      	cmp	r7, #98	; 0x62
 8007176:	d80a      	bhi.n	800718e <_printf_i+0x32>
 8007178:	2f00      	cmp	r7, #0
 800717a:	f000 80d8 	beq.w	800732e <_printf_i+0x1d2>
 800717e:	2f58      	cmp	r7, #88	; 0x58
 8007180:	f000 80a3 	beq.w	80072ca <_printf_i+0x16e>
 8007184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800718c:	e03a      	b.n	8007204 <_printf_i+0xa8>
 800718e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007192:	2b15      	cmp	r3, #21
 8007194:	d8f6      	bhi.n	8007184 <_printf_i+0x28>
 8007196:	a101      	add	r1, pc, #4	; (adr r1, 800719c <_printf_i+0x40>)
 8007198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800719c:	080071f5 	.word	0x080071f5
 80071a0:	08007209 	.word	0x08007209
 80071a4:	08007185 	.word	0x08007185
 80071a8:	08007185 	.word	0x08007185
 80071ac:	08007185 	.word	0x08007185
 80071b0:	08007185 	.word	0x08007185
 80071b4:	08007209 	.word	0x08007209
 80071b8:	08007185 	.word	0x08007185
 80071bc:	08007185 	.word	0x08007185
 80071c0:	08007185 	.word	0x08007185
 80071c4:	08007185 	.word	0x08007185
 80071c8:	08007315 	.word	0x08007315
 80071cc:	08007239 	.word	0x08007239
 80071d0:	080072f7 	.word	0x080072f7
 80071d4:	08007185 	.word	0x08007185
 80071d8:	08007185 	.word	0x08007185
 80071dc:	08007337 	.word	0x08007337
 80071e0:	08007185 	.word	0x08007185
 80071e4:	08007239 	.word	0x08007239
 80071e8:	08007185 	.word	0x08007185
 80071ec:	08007185 	.word	0x08007185
 80071f0:	080072ff 	.word	0x080072ff
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	1d1a      	adds	r2, r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	602a      	str	r2, [r5, #0]
 80071fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007204:	2301      	movs	r3, #1
 8007206:	e0a3      	b.n	8007350 <_printf_i+0x1f4>
 8007208:	6820      	ldr	r0, [r4, #0]
 800720a:	6829      	ldr	r1, [r5, #0]
 800720c:	0606      	lsls	r6, r0, #24
 800720e:	f101 0304 	add.w	r3, r1, #4
 8007212:	d50a      	bpl.n	800722a <_printf_i+0xce>
 8007214:	680e      	ldr	r6, [r1, #0]
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	2e00      	cmp	r6, #0
 800721a:	da03      	bge.n	8007224 <_printf_i+0xc8>
 800721c:	232d      	movs	r3, #45	; 0x2d
 800721e:	4276      	negs	r6, r6
 8007220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007224:	485e      	ldr	r0, [pc, #376]	; (80073a0 <_printf_i+0x244>)
 8007226:	230a      	movs	r3, #10
 8007228:	e019      	b.n	800725e <_printf_i+0x102>
 800722a:	680e      	ldr	r6, [r1, #0]
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007232:	bf18      	it	ne
 8007234:	b236      	sxthne	r6, r6
 8007236:	e7ef      	b.n	8007218 <_printf_i+0xbc>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	1d19      	adds	r1, r3, #4
 800723e:	6029      	str	r1, [r5, #0]
 8007240:	0601      	lsls	r1, r0, #24
 8007242:	d501      	bpl.n	8007248 <_printf_i+0xec>
 8007244:	681e      	ldr	r6, [r3, #0]
 8007246:	e002      	b.n	800724e <_printf_i+0xf2>
 8007248:	0646      	lsls	r6, r0, #25
 800724a:	d5fb      	bpl.n	8007244 <_printf_i+0xe8>
 800724c:	881e      	ldrh	r6, [r3, #0]
 800724e:	4854      	ldr	r0, [pc, #336]	; (80073a0 <_printf_i+0x244>)
 8007250:	2f6f      	cmp	r7, #111	; 0x6f
 8007252:	bf0c      	ite	eq
 8007254:	2308      	moveq	r3, #8
 8007256:	230a      	movne	r3, #10
 8007258:	2100      	movs	r1, #0
 800725a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800725e:	6865      	ldr	r5, [r4, #4]
 8007260:	60a5      	str	r5, [r4, #8]
 8007262:	2d00      	cmp	r5, #0
 8007264:	bfa2      	ittt	ge
 8007266:	6821      	ldrge	r1, [r4, #0]
 8007268:	f021 0104 	bicge.w	r1, r1, #4
 800726c:	6021      	strge	r1, [r4, #0]
 800726e:	b90e      	cbnz	r6, 8007274 <_printf_i+0x118>
 8007270:	2d00      	cmp	r5, #0
 8007272:	d04d      	beq.n	8007310 <_printf_i+0x1b4>
 8007274:	4615      	mov	r5, r2
 8007276:	fbb6 f1f3 	udiv	r1, r6, r3
 800727a:	fb03 6711 	mls	r7, r3, r1, r6
 800727e:	5dc7      	ldrb	r7, [r0, r7]
 8007280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007284:	4637      	mov	r7, r6
 8007286:	42bb      	cmp	r3, r7
 8007288:	460e      	mov	r6, r1
 800728a:	d9f4      	bls.n	8007276 <_printf_i+0x11a>
 800728c:	2b08      	cmp	r3, #8
 800728e:	d10b      	bne.n	80072a8 <_printf_i+0x14c>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	07de      	lsls	r6, r3, #31
 8007294:	d508      	bpl.n	80072a8 <_printf_i+0x14c>
 8007296:	6923      	ldr	r3, [r4, #16]
 8007298:	6861      	ldr	r1, [r4, #4]
 800729a:	4299      	cmp	r1, r3
 800729c:	bfde      	ittt	le
 800729e:	2330      	movle	r3, #48	; 0x30
 80072a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072a8:	1b52      	subs	r2, r2, r5
 80072aa:	6122      	str	r2, [r4, #16]
 80072ac:	f8cd a000 	str.w	sl, [sp]
 80072b0:	464b      	mov	r3, r9
 80072b2:	aa03      	add	r2, sp, #12
 80072b4:	4621      	mov	r1, r4
 80072b6:	4640      	mov	r0, r8
 80072b8:	f7ff fee2 	bl	8007080 <_printf_common>
 80072bc:	3001      	adds	r0, #1
 80072be:	d14c      	bne.n	800735a <_printf_i+0x1fe>
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295
 80072c4:	b004      	add	sp, #16
 80072c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ca:	4835      	ldr	r0, [pc, #212]	; (80073a0 <_printf_i+0x244>)
 80072cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072d0:	6829      	ldr	r1, [r5, #0]
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80072d8:	6029      	str	r1, [r5, #0]
 80072da:	061d      	lsls	r5, r3, #24
 80072dc:	d514      	bpl.n	8007308 <_printf_i+0x1ac>
 80072de:	07df      	lsls	r7, r3, #31
 80072e0:	bf44      	itt	mi
 80072e2:	f043 0320 	orrmi.w	r3, r3, #32
 80072e6:	6023      	strmi	r3, [r4, #0]
 80072e8:	b91e      	cbnz	r6, 80072f2 <_printf_i+0x196>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	f023 0320 	bic.w	r3, r3, #32
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	2310      	movs	r3, #16
 80072f4:	e7b0      	b.n	8007258 <_printf_i+0xfc>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	f043 0320 	orr.w	r3, r3, #32
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	2378      	movs	r3, #120	; 0x78
 8007300:	4828      	ldr	r0, [pc, #160]	; (80073a4 <_printf_i+0x248>)
 8007302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007306:	e7e3      	b.n	80072d0 <_printf_i+0x174>
 8007308:	0659      	lsls	r1, r3, #25
 800730a:	bf48      	it	mi
 800730c:	b2b6      	uxthmi	r6, r6
 800730e:	e7e6      	b.n	80072de <_printf_i+0x182>
 8007310:	4615      	mov	r5, r2
 8007312:	e7bb      	b.n	800728c <_printf_i+0x130>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	6826      	ldr	r6, [r4, #0]
 8007318:	6961      	ldr	r1, [r4, #20]
 800731a:	1d18      	adds	r0, r3, #4
 800731c:	6028      	str	r0, [r5, #0]
 800731e:	0635      	lsls	r5, r6, #24
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	d501      	bpl.n	8007328 <_printf_i+0x1cc>
 8007324:	6019      	str	r1, [r3, #0]
 8007326:	e002      	b.n	800732e <_printf_i+0x1d2>
 8007328:	0670      	lsls	r0, r6, #25
 800732a:	d5fb      	bpl.n	8007324 <_printf_i+0x1c8>
 800732c:	8019      	strh	r1, [r3, #0]
 800732e:	2300      	movs	r3, #0
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	4615      	mov	r5, r2
 8007334:	e7ba      	b.n	80072ac <_printf_i+0x150>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	1d1a      	adds	r2, r3, #4
 800733a:	602a      	str	r2, [r5, #0]
 800733c:	681d      	ldr	r5, [r3, #0]
 800733e:	6862      	ldr	r2, [r4, #4]
 8007340:	2100      	movs	r1, #0
 8007342:	4628      	mov	r0, r5
 8007344:	f7f8 ff6c 	bl	8000220 <memchr>
 8007348:	b108      	cbz	r0, 800734e <_printf_i+0x1f2>
 800734a:	1b40      	subs	r0, r0, r5
 800734c:	6060      	str	r0, [r4, #4]
 800734e:	6863      	ldr	r3, [r4, #4]
 8007350:	6123      	str	r3, [r4, #16]
 8007352:	2300      	movs	r3, #0
 8007354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007358:	e7a8      	b.n	80072ac <_printf_i+0x150>
 800735a:	6923      	ldr	r3, [r4, #16]
 800735c:	462a      	mov	r2, r5
 800735e:	4649      	mov	r1, r9
 8007360:	4640      	mov	r0, r8
 8007362:	47d0      	blx	sl
 8007364:	3001      	adds	r0, #1
 8007366:	d0ab      	beq.n	80072c0 <_printf_i+0x164>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	079b      	lsls	r3, r3, #30
 800736c:	d413      	bmi.n	8007396 <_printf_i+0x23a>
 800736e:	68e0      	ldr	r0, [r4, #12]
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	4298      	cmp	r0, r3
 8007374:	bfb8      	it	lt
 8007376:	4618      	movlt	r0, r3
 8007378:	e7a4      	b.n	80072c4 <_printf_i+0x168>
 800737a:	2301      	movs	r3, #1
 800737c:	4632      	mov	r2, r6
 800737e:	4649      	mov	r1, r9
 8007380:	4640      	mov	r0, r8
 8007382:	47d0      	blx	sl
 8007384:	3001      	adds	r0, #1
 8007386:	d09b      	beq.n	80072c0 <_printf_i+0x164>
 8007388:	3501      	adds	r5, #1
 800738a:	68e3      	ldr	r3, [r4, #12]
 800738c:	9903      	ldr	r1, [sp, #12]
 800738e:	1a5b      	subs	r3, r3, r1
 8007390:	42ab      	cmp	r3, r5
 8007392:	dcf2      	bgt.n	800737a <_printf_i+0x21e>
 8007394:	e7eb      	b.n	800736e <_printf_i+0x212>
 8007396:	2500      	movs	r5, #0
 8007398:	f104 0619 	add.w	r6, r4, #25
 800739c:	e7f5      	b.n	800738a <_printf_i+0x22e>
 800739e:	bf00      	nop
 80073a0:	08007c45 	.word	0x08007c45
 80073a4:	08007c56 	.word	0x08007c56

080073a8 <_scanf_chars>:
 80073a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ac:	4615      	mov	r5, r2
 80073ae:	688a      	ldr	r2, [r1, #8]
 80073b0:	4680      	mov	r8, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	b932      	cbnz	r2, 80073c4 <_scanf_chars+0x1c>
 80073b6:	698a      	ldr	r2, [r1, #24]
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	bf0c      	ite	eq
 80073bc:	2201      	moveq	r2, #1
 80073be:	f04f 32ff 	movne.w	r2, #4294967295
 80073c2:	608a      	str	r2, [r1, #8]
 80073c4:	6822      	ldr	r2, [r4, #0]
 80073c6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007458 <_scanf_chars+0xb0>
 80073ca:	06d1      	lsls	r1, r2, #27
 80073cc:	bf5f      	itttt	pl
 80073ce:	681a      	ldrpl	r2, [r3, #0]
 80073d0:	1d11      	addpl	r1, r2, #4
 80073d2:	6019      	strpl	r1, [r3, #0]
 80073d4:	6816      	ldrpl	r6, [r2, #0]
 80073d6:	2700      	movs	r7, #0
 80073d8:	69a0      	ldr	r0, [r4, #24]
 80073da:	b188      	cbz	r0, 8007400 <_scanf_chars+0x58>
 80073dc:	2801      	cmp	r0, #1
 80073de:	d107      	bne.n	80073f0 <_scanf_chars+0x48>
 80073e0:	682a      	ldr	r2, [r5, #0]
 80073e2:	7811      	ldrb	r1, [r2, #0]
 80073e4:	6962      	ldr	r2, [r4, #20]
 80073e6:	5c52      	ldrb	r2, [r2, r1]
 80073e8:	b952      	cbnz	r2, 8007400 <_scanf_chars+0x58>
 80073ea:	2f00      	cmp	r7, #0
 80073ec:	d031      	beq.n	8007452 <_scanf_chars+0xaa>
 80073ee:	e022      	b.n	8007436 <_scanf_chars+0x8e>
 80073f0:	2802      	cmp	r0, #2
 80073f2:	d120      	bne.n	8007436 <_scanf_chars+0x8e>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80073fc:	071b      	lsls	r3, r3, #28
 80073fe:	d41a      	bmi.n	8007436 <_scanf_chars+0x8e>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	06da      	lsls	r2, r3, #27
 8007404:	bf5e      	ittt	pl
 8007406:	682b      	ldrpl	r3, [r5, #0]
 8007408:	781b      	ldrbpl	r3, [r3, #0]
 800740a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800740e:	682a      	ldr	r2, [r5, #0]
 8007410:	686b      	ldr	r3, [r5, #4]
 8007412:	3201      	adds	r2, #1
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	68a2      	ldr	r2, [r4, #8]
 8007418:	3b01      	subs	r3, #1
 800741a:	3a01      	subs	r2, #1
 800741c:	606b      	str	r3, [r5, #4]
 800741e:	3701      	adds	r7, #1
 8007420:	60a2      	str	r2, [r4, #8]
 8007422:	b142      	cbz	r2, 8007436 <_scanf_chars+0x8e>
 8007424:	2b00      	cmp	r3, #0
 8007426:	dcd7      	bgt.n	80073d8 <_scanf_chars+0x30>
 8007428:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800742c:	4629      	mov	r1, r5
 800742e:	4640      	mov	r0, r8
 8007430:	4798      	blx	r3
 8007432:	2800      	cmp	r0, #0
 8007434:	d0d0      	beq.n	80073d8 <_scanf_chars+0x30>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	f013 0310 	ands.w	r3, r3, #16
 800743c:	d105      	bne.n	800744a <_scanf_chars+0xa2>
 800743e:	68e2      	ldr	r2, [r4, #12]
 8007440:	3201      	adds	r2, #1
 8007442:	60e2      	str	r2, [r4, #12]
 8007444:	69a2      	ldr	r2, [r4, #24]
 8007446:	b102      	cbz	r2, 800744a <_scanf_chars+0xa2>
 8007448:	7033      	strb	r3, [r6, #0]
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	443b      	add	r3, r7
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	2000      	movs	r0, #0
 8007452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007456:	bf00      	nop
 8007458:	08007c83 	.word	0x08007c83

0800745c <_scanf_i>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	4698      	mov	r8, r3
 8007462:	4b76      	ldr	r3, [pc, #472]	; (800763c <_scanf_i+0x1e0>)
 8007464:	460c      	mov	r4, r1
 8007466:	4682      	mov	sl, r0
 8007468:	4616      	mov	r6, r2
 800746a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800746e:	b087      	sub	sp, #28
 8007470:	ab03      	add	r3, sp, #12
 8007472:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007476:	4b72      	ldr	r3, [pc, #456]	; (8007640 <_scanf_i+0x1e4>)
 8007478:	69a1      	ldr	r1, [r4, #24]
 800747a:	4a72      	ldr	r2, [pc, #456]	; (8007644 <_scanf_i+0x1e8>)
 800747c:	2903      	cmp	r1, #3
 800747e:	bf18      	it	ne
 8007480:	461a      	movne	r2, r3
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	1e5a      	subs	r2, r3, #1
 8007488:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800748c:	bf88      	it	hi
 800748e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007492:	4627      	mov	r7, r4
 8007494:	bf82      	ittt	hi
 8007496:	eb03 0905 	addhi.w	r9, r3, r5
 800749a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800749e:	60a3      	strhi	r3, [r4, #8]
 80074a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80074a4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80074a8:	bf98      	it	ls
 80074aa:	f04f 0900 	movls.w	r9, #0
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	463d      	mov	r5, r7
 80074b2:	f04f 0b00 	mov.w	fp, #0
 80074b6:	6831      	ldr	r1, [r6, #0]
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	7809      	ldrb	r1, [r1, #0]
 80074bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80074c0:	2202      	movs	r2, #2
 80074c2:	f7f8 fead 	bl	8000220 <memchr>
 80074c6:	b328      	cbz	r0, 8007514 <_scanf_i+0xb8>
 80074c8:	f1bb 0f01 	cmp.w	fp, #1
 80074cc:	d159      	bne.n	8007582 <_scanf_i+0x126>
 80074ce:	6862      	ldr	r2, [r4, #4]
 80074d0:	b92a      	cbnz	r2, 80074de <_scanf_i+0x82>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	2308      	movs	r3, #8
 80074d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074da:	6063      	str	r3, [r4, #4]
 80074dc:	6022      	str	r2, [r4, #0]
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80074e4:	6022      	str	r2, [r4, #0]
 80074e6:	68a2      	ldr	r2, [r4, #8]
 80074e8:	1e51      	subs	r1, r2, #1
 80074ea:	60a1      	str	r1, [r4, #8]
 80074ec:	b192      	cbz	r2, 8007514 <_scanf_i+0xb8>
 80074ee:	6832      	ldr	r2, [r6, #0]
 80074f0:	1c51      	adds	r1, r2, #1
 80074f2:	6031      	str	r1, [r6, #0]
 80074f4:	7812      	ldrb	r2, [r2, #0]
 80074f6:	f805 2b01 	strb.w	r2, [r5], #1
 80074fa:	6872      	ldr	r2, [r6, #4]
 80074fc:	3a01      	subs	r2, #1
 80074fe:	2a00      	cmp	r2, #0
 8007500:	6072      	str	r2, [r6, #4]
 8007502:	dc07      	bgt.n	8007514 <_scanf_i+0xb8>
 8007504:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007508:	4631      	mov	r1, r6
 800750a:	4650      	mov	r0, sl
 800750c:	4790      	blx	r2
 800750e:	2800      	cmp	r0, #0
 8007510:	f040 8085 	bne.w	800761e <_scanf_i+0x1c2>
 8007514:	f10b 0b01 	add.w	fp, fp, #1
 8007518:	f1bb 0f03 	cmp.w	fp, #3
 800751c:	d1cb      	bne.n	80074b6 <_scanf_i+0x5a>
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	b90b      	cbnz	r3, 8007526 <_scanf_i+0xca>
 8007522:	230a      	movs	r3, #10
 8007524:	6063      	str	r3, [r4, #4]
 8007526:	6863      	ldr	r3, [r4, #4]
 8007528:	4947      	ldr	r1, [pc, #284]	; (8007648 <_scanf_i+0x1ec>)
 800752a:	6960      	ldr	r0, [r4, #20]
 800752c:	1ac9      	subs	r1, r1, r3
 800752e:	f000 f88d 	bl	800764c <__sccl>
 8007532:	f04f 0b00 	mov.w	fp, #0
 8007536:	68a3      	ldr	r3, [r4, #8]
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d03d      	beq.n	80075ba <_scanf_i+0x15e>
 800753e:	6831      	ldr	r1, [r6, #0]
 8007540:	6960      	ldr	r0, [r4, #20]
 8007542:	f891 c000 	ldrb.w	ip, [r1]
 8007546:	f810 000c 	ldrb.w	r0, [r0, ip]
 800754a:	2800      	cmp	r0, #0
 800754c:	d035      	beq.n	80075ba <_scanf_i+0x15e>
 800754e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007552:	d124      	bne.n	800759e <_scanf_i+0x142>
 8007554:	0510      	lsls	r0, r2, #20
 8007556:	d522      	bpl.n	800759e <_scanf_i+0x142>
 8007558:	f10b 0b01 	add.w	fp, fp, #1
 800755c:	f1b9 0f00 	cmp.w	r9, #0
 8007560:	d003      	beq.n	800756a <_scanf_i+0x10e>
 8007562:	3301      	adds	r3, #1
 8007564:	f109 39ff 	add.w	r9, r9, #4294967295
 8007568:	60a3      	str	r3, [r4, #8]
 800756a:	6873      	ldr	r3, [r6, #4]
 800756c:	3b01      	subs	r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	6073      	str	r3, [r6, #4]
 8007572:	dd1b      	ble.n	80075ac <_scanf_i+0x150>
 8007574:	6833      	ldr	r3, [r6, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	6033      	str	r3, [r6, #0]
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	3b01      	subs	r3, #1
 800757e:	60a3      	str	r3, [r4, #8]
 8007580:	e7d9      	b.n	8007536 <_scanf_i+0xda>
 8007582:	f1bb 0f02 	cmp.w	fp, #2
 8007586:	d1ae      	bne.n	80074e6 <_scanf_i+0x8a>
 8007588:	6822      	ldr	r2, [r4, #0]
 800758a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800758e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007592:	d1bf      	bne.n	8007514 <_scanf_i+0xb8>
 8007594:	2310      	movs	r3, #16
 8007596:	6063      	str	r3, [r4, #4]
 8007598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800759c:	e7a2      	b.n	80074e4 <_scanf_i+0x88>
 800759e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80075a2:	6022      	str	r2, [r4, #0]
 80075a4:	780b      	ldrb	r3, [r1, #0]
 80075a6:	f805 3b01 	strb.w	r3, [r5], #1
 80075aa:	e7de      	b.n	800756a <_scanf_i+0x10e>
 80075ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075b0:	4631      	mov	r1, r6
 80075b2:	4650      	mov	r0, sl
 80075b4:	4798      	blx	r3
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d0df      	beq.n	800757a <_scanf_i+0x11e>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	05db      	lsls	r3, r3, #23
 80075be:	d50d      	bpl.n	80075dc <_scanf_i+0x180>
 80075c0:	42bd      	cmp	r5, r7
 80075c2:	d909      	bls.n	80075d8 <_scanf_i+0x17c>
 80075c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80075c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075cc:	4632      	mov	r2, r6
 80075ce:	4650      	mov	r0, sl
 80075d0:	4798      	blx	r3
 80075d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80075d6:	464d      	mov	r5, r9
 80075d8:	42bd      	cmp	r5, r7
 80075da:	d02d      	beq.n	8007638 <_scanf_i+0x1dc>
 80075dc:	6822      	ldr	r2, [r4, #0]
 80075de:	f012 0210 	ands.w	r2, r2, #16
 80075e2:	d113      	bne.n	800760c <_scanf_i+0x1b0>
 80075e4:	702a      	strb	r2, [r5, #0]
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	9e01      	ldr	r6, [sp, #4]
 80075ea:	4639      	mov	r1, r7
 80075ec:	4650      	mov	r0, sl
 80075ee:	47b0      	blx	r6
 80075f0:	6821      	ldr	r1, [r4, #0]
 80075f2:	f8d8 3000 	ldr.w	r3, [r8]
 80075f6:	f011 0f20 	tst.w	r1, #32
 80075fa:	d013      	beq.n	8007624 <_scanf_i+0x1c8>
 80075fc:	1d1a      	adds	r2, r3, #4
 80075fe:	f8c8 2000 	str.w	r2, [r8]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6018      	str	r0, [r3, #0]
 8007606:	68e3      	ldr	r3, [r4, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	60e3      	str	r3, [r4, #12]
 800760c:	1bed      	subs	r5, r5, r7
 800760e:	44ab      	add	fp, r5
 8007610:	6925      	ldr	r5, [r4, #16]
 8007612:	445d      	add	r5, fp
 8007614:	6125      	str	r5, [r4, #16]
 8007616:	2000      	movs	r0, #0
 8007618:	b007      	add	sp, #28
 800761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761e:	f04f 0b00 	mov.w	fp, #0
 8007622:	e7ca      	b.n	80075ba <_scanf_i+0x15e>
 8007624:	1d1a      	adds	r2, r3, #4
 8007626:	f8c8 2000 	str.w	r2, [r8]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f011 0f01 	tst.w	r1, #1
 8007630:	bf14      	ite	ne
 8007632:	8018      	strhne	r0, [r3, #0]
 8007634:	6018      	streq	r0, [r3, #0]
 8007636:	e7e6      	b.n	8007606 <_scanf_i+0x1aa>
 8007638:	2001      	movs	r0, #1
 800763a:	e7ed      	b.n	8007618 <_scanf_i+0x1bc>
 800763c:	08007c10 	.word	0x08007c10
 8007640:	080078a9 	.word	0x080078a9
 8007644:	080077c1 	.word	0x080077c1
 8007648:	08007c80 	.word	0x08007c80

0800764c <__sccl>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	780b      	ldrb	r3, [r1, #0]
 8007650:	4604      	mov	r4, r0
 8007652:	2b5e      	cmp	r3, #94	; 0x5e
 8007654:	bf0b      	itete	eq
 8007656:	784b      	ldrbeq	r3, [r1, #1]
 8007658:	1c48      	addne	r0, r1, #1
 800765a:	1c88      	addeq	r0, r1, #2
 800765c:	2200      	movne	r2, #0
 800765e:	bf08      	it	eq
 8007660:	2201      	moveq	r2, #1
 8007662:	1e61      	subs	r1, r4, #1
 8007664:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007668:	f801 2f01 	strb.w	r2, [r1, #1]!
 800766c:	42a9      	cmp	r1, r5
 800766e:	d1fb      	bne.n	8007668 <__sccl+0x1c>
 8007670:	b90b      	cbnz	r3, 8007676 <__sccl+0x2a>
 8007672:	3801      	subs	r0, #1
 8007674:	bd70      	pop	{r4, r5, r6, pc}
 8007676:	f082 0201 	eor.w	r2, r2, #1
 800767a:	54e2      	strb	r2, [r4, r3]
 800767c:	4605      	mov	r5, r0
 800767e:	4628      	mov	r0, r5
 8007680:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007684:	292d      	cmp	r1, #45	; 0x2d
 8007686:	d006      	beq.n	8007696 <__sccl+0x4a>
 8007688:	295d      	cmp	r1, #93	; 0x5d
 800768a:	d0f3      	beq.n	8007674 <__sccl+0x28>
 800768c:	b909      	cbnz	r1, 8007692 <__sccl+0x46>
 800768e:	4628      	mov	r0, r5
 8007690:	e7f0      	b.n	8007674 <__sccl+0x28>
 8007692:	460b      	mov	r3, r1
 8007694:	e7f1      	b.n	800767a <__sccl+0x2e>
 8007696:	786e      	ldrb	r6, [r5, #1]
 8007698:	2e5d      	cmp	r6, #93	; 0x5d
 800769a:	d0fa      	beq.n	8007692 <__sccl+0x46>
 800769c:	42b3      	cmp	r3, r6
 800769e:	dcf8      	bgt.n	8007692 <__sccl+0x46>
 80076a0:	3502      	adds	r5, #2
 80076a2:	4619      	mov	r1, r3
 80076a4:	3101      	adds	r1, #1
 80076a6:	428e      	cmp	r6, r1
 80076a8:	5462      	strb	r2, [r4, r1]
 80076aa:	dcfb      	bgt.n	80076a4 <__sccl+0x58>
 80076ac:	1af1      	subs	r1, r6, r3
 80076ae:	3901      	subs	r1, #1
 80076b0:	1c58      	adds	r0, r3, #1
 80076b2:	42b3      	cmp	r3, r6
 80076b4:	bfa8      	it	ge
 80076b6:	2100      	movge	r1, #0
 80076b8:	1843      	adds	r3, r0, r1
 80076ba:	e7e0      	b.n	800767e <__sccl+0x32>

080076bc <_strtol_l.constprop.0>:
 80076bc:	2b01      	cmp	r3, #1
 80076be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c2:	d001      	beq.n	80076c8 <_strtol_l.constprop.0+0xc>
 80076c4:	2b24      	cmp	r3, #36	; 0x24
 80076c6:	d906      	bls.n	80076d6 <_strtol_l.constprop.0+0x1a>
 80076c8:	f7ff f92c 	bl	8006924 <__errno>
 80076cc:	2316      	movs	r3, #22
 80076ce:	6003      	str	r3, [r0, #0]
 80076d0:	2000      	movs	r0, #0
 80076d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80077bc <_strtol_l.constprop.0+0x100>
 80076da:	460d      	mov	r5, r1
 80076dc:	462e      	mov	r6, r5
 80076de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80076e6:	f017 0708 	ands.w	r7, r7, #8
 80076ea:	d1f7      	bne.n	80076dc <_strtol_l.constprop.0+0x20>
 80076ec:	2c2d      	cmp	r4, #45	; 0x2d
 80076ee:	d132      	bne.n	8007756 <_strtol_l.constprop.0+0x9a>
 80076f0:	782c      	ldrb	r4, [r5, #0]
 80076f2:	2701      	movs	r7, #1
 80076f4:	1cb5      	adds	r5, r6, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d05b      	beq.n	80077b2 <_strtol_l.constprop.0+0xf6>
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d109      	bne.n	8007712 <_strtol_l.constprop.0+0x56>
 80076fe:	2c30      	cmp	r4, #48	; 0x30
 8007700:	d107      	bne.n	8007712 <_strtol_l.constprop.0+0x56>
 8007702:	782c      	ldrb	r4, [r5, #0]
 8007704:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007708:	2c58      	cmp	r4, #88	; 0x58
 800770a:	d14d      	bne.n	80077a8 <_strtol_l.constprop.0+0xec>
 800770c:	786c      	ldrb	r4, [r5, #1]
 800770e:	2310      	movs	r3, #16
 8007710:	3502      	adds	r5, #2
 8007712:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007716:	f108 38ff 	add.w	r8, r8, #4294967295
 800771a:	f04f 0c00 	mov.w	ip, #0
 800771e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007722:	4666      	mov	r6, ip
 8007724:	fb03 8a19 	mls	sl, r3, r9, r8
 8007728:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800772c:	f1be 0f09 	cmp.w	lr, #9
 8007730:	d816      	bhi.n	8007760 <_strtol_l.constprop.0+0xa4>
 8007732:	4674      	mov	r4, lr
 8007734:	42a3      	cmp	r3, r4
 8007736:	dd24      	ble.n	8007782 <_strtol_l.constprop.0+0xc6>
 8007738:	f1bc 0f00 	cmp.w	ip, #0
 800773c:	db1e      	blt.n	800777c <_strtol_l.constprop.0+0xc0>
 800773e:	45b1      	cmp	r9, r6
 8007740:	d31c      	bcc.n	800777c <_strtol_l.constprop.0+0xc0>
 8007742:	d101      	bne.n	8007748 <_strtol_l.constprop.0+0x8c>
 8007744:	45a2      	cmp	sl, r4
 8007746:	db19      	blt.n	800777c <_strtol_l.constprop.0+0xc0>
 8007748:	fb06 4603 	mla	r6, r6, r3, r4
 800774c:	f04f 0c01 	mov.w	ip, #1
 8007750:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007754:	e7e8      	b.n	8007728 <_strtol_l.constprop.0+0x6c>
 8007756:	2c2b      	cmp	r4, #43	; 0x2b
 8007758:	bf04      	itt	eq
 800775a:	782c      	ldrbeq	r4, [r5, #0]
 800775c:	1cb5      	addeq	r5, r6, #2
 800775e:	e7ca      	b.n	80076f6 <_strtol_l.constprop.0+0x3a>
 8007760:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007764:	f1be 0f19 	cmp.w	lr, #25
 8007768:	d801      	bhi.n	800776e <_strtol_l.constprop.0+0xb2>
 800776a:	3c37      	subs	r4, #55	; 0x37
 800776c:	e7e2      	b.n	8007734 <_strtol_l.constprop.0+0x78>
 800776e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007772:	f1be 0f19 	cmp.w	lr, #25
 8007776:	d804      	bhi.n	8007782 <_strtol_l.constprop.0+0xc6>
 8007778:	3c57      	subs	r4, #87	; 0x57
 800777a:	e7db      	b.n	8007734 <_strtol_l.constprop.0+0x78>
 800777c:	f04f 3cff 	mov.w	ip, #4294967295
 8007780:	e7e6      	b.n	8007750 <_strtol_l.constprop.0+0x94>
 8007782:	f1bc 0f00 	cmp.w	ip, #0
 8007786:	da05      	bge.n	8007794 <_strtol_l.constprop.0+0xd8>
 8007788:	2322      	movs	r3, #34	; 0x22
 800778a:	6003      	str	r3, [r0, #0]
 800778c:	4646      	mov	r6, r8
 800778e:	b942      	cbnz	r2, 80077a2 <_strtol_l.constprop.0+0xe6>
 8007790:	4630      	mov	r0, r6
 8007792:	e79e      	b.n	80076d2 <_strtol_l.constprop.0+0x16>
 8007794:	b107      	cbz	r7, 8007798 <_strtol_l.constprop.0+0xdc>
 8007796:	4276      	negs	r6, r6
 8007798:	2a00      	cmp	r2, #0
 800779a:	d0f9      	beq.n	8007790 <_strtol_l.constprop.0+0xd4>
 800779c:	f1bc 0f00 	cmp.w	ip, #0
 80077a0:	d000      	beq.n	80077a4 <_strtol_l.constprop.0+0xe8>
 80077a2:	1e69      	subs	r1, r5, #1
 80077a4:	6011      	str	r1, [r2, #0]
 80077a6:	e7f3      	b.n	8007790 <_strtol_l.constprop.0+0xd4>
 80077a8:	2430      	movs	r4, #48	; 0x30
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1b1      	bne.n	8007712 <_strtol_l.constprop.0+0x56>
 80077ae:	2308      	movs	r3, #8
 80077b0:	e7af      	b.n	8007712 <_strtol_l.constprop.0+0x56>
 80077b2:	2c30      	cmp	r4, #48	; 0x30
 80077b4:	d0a5      	beq.n	8007702 <_strtol_l.constprop.0+0x46>
 80077b6:	230a      	movs	r3, #10
 80077b8:	e7ab      	b.n	8007712 <_strtol_l.constprop.0+0x56>
 80077ba:	bf00      	nop
 80077bc:	08007c83 	.word	0x08007c83

080077c0 <_strtol_r>:
 80077c0:	f7ff bf7c 	b.w	80076bc <_strtol_l.constprop.0>

080077c4 <_strtoul_l.constprop.0>:
 80077c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077c8:	4f36      	ldr	r7, [pc, #216]	; (80078a4 <_strtoul_l.constprop.0+0xe0>)
 80077ca:	4686      	mov	lr, r0
 80077cc:	460d      	mov	r5, r1
 80077ce:	4628      	mov	r0, r5
 80077d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077d4:	5de6      	ldrb	r6, [r4, r7]
 80077d6:	f016 0608 	ands.w	r6, r6, #8
 80077da:	d1f8      	bne.n	80077ce <_strtoul_l.constprop.0+0xa>
 80077dc:	2c2d      	cmp	r4, #45	; 0x2d
 80077de:	d12f      	bne.n	8007840 <_strtoul_l.constprop.0+0x7c>
 80077e0:	782c      	ldrb	r4, [r5, #0]
 80077e2:	2601      	movs	r6, #1
 80077e4:	1c85      	adds	r5, r0, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d057      	beq.n	800789a <_strtoul_l.constprop.0+0xd6>
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d109      	bne.n	8007802 <_strtoul_l.constprop.0+0x3e>
 80077ee:	2c30      	cmp	r4, #48	; 0x30
 80077f0:	d107      	bne.n	8007802 <_strtoul_l.constprop.0+0x3e>
 80077f2:	7828      	ldrb	r0, [r5, #0]
 80077f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80077f8:	2858      	cmp	r0, #88	; 0x58
 80077fa:	d149      	bne.n	8007890 <_strtoul_l.constprop.0+0xcc>
 80077fc:	786c      	ldrb	r4, [r5, #1]
 80077fe:	2310      	movs	r3, #16
 8007800:	3502      	adds	r5, #2
 8007802:	f04f 38ff 	mov.w	r8, #4294967295
 8007806:	2700      	movs	r7, #0
 8007808:	fbb8 f8f3 	udiv	r8, r8, r3
 800780c:	fb03 f908 	mul.w	r9, r3, r8
 8007810:	ea6f 0909 	mvn.w	r9, r9
 8007814:	4638      	mov	r0, r7
 8007816:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800781a:	f1bc 0f09 	cmp.w	ip, #9
 800781e:	d814      	bhi.n	800784a <_strtoul_l.constprop.0+0x86>
 8007820:	4664      	mov	r4, ip
 8007822:	42a3      	cmp	r3, r4
 8007824:	dd22      	ble.n	800786c <_strtoul_l.constprop.0+0xa8>
 8007826:	2f00      	cmp	r7, #0
 8007828:	db1d      	blt.n	8007866 <_strtoul_l.constprop.0+0xa2>
 800782a:	4580      	cmp	r8, r0
 800782c:	d31b      	bcc.n	8007866 <_strtoul_l.constprop.0+0xa2>
 800782e:	d101      	bne.n	8007834 <_strtoul_l.constprop.0+0x70>
 8007830:	45a1      	cmp	r9, r4
 8007832:	db18      	blt.n	8007866 <_strtoul_l.constprop.0+0xa2>
 8007834:	fb00 4003 	mla	r0, r0, r3, r4
 8007838:	2701      	movs	r7, #1
 800783a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800783e:	e7ea      	b.n	8007816 <_strtoul_l.constprop.0+0x52>
 8007840:	2c2b      	cmp	r4, #43	; 0x2b
 8007842:	bf04      	itt	eq
 8007844:	782c      	ldrbeq	r4, [r5, #0]
 8007846:	1c85      	addeq	r5, r0, #2
 8007848:	e7cd      	b.n	80077e6 <_strtoul_l.constprop.0+0x22>
 800784a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800784e:	f1bc 0f19 	cmp.w	ip, #25
 8007852:	d801      	bhi.n	8007858 <_strtoul_l.constprop.0+0x94>
 8007854:	3c37      	subs	r4, #55	; 0x37
 8007856:	e7e4      	b.n	8007822 <_strtoul_l.constprop.0+0x5e>
 8007858:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800785c:	f1bc 0f19 	cmp.w	ip, #25
 8007860:	d804      	bhi.n	800786c <_strtoul_l.constprop.0+0xa8>
 8007862:	3c57      	subs	r4, #87	; 0x57
 8007864:	e7dd      	b.n	8007822 <_strtoul_l.constprop.0+0x5e>
 8007866:	f04f 37ff 	mov.w	r7, #4294967295
 800786a:	e7e6      	b.n	800783a <_strtoul_l.constprop.0+0x76>
 800786c:	2f00      	cmp	r7, #0
 800786e:	da07      	bge.n	8007880 <_strtoul_l.constprop.0+0xbc>
 8007870:	2322      	movs	r3, #34	; 0x22
 8007872:	f8ce 3000 	str.w	r3, [lr]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	b932      	cbnz	r2, 800788a <_strtoul_l.constprop.0+0xc6>
 800787c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007880:	b106      	cbz	r6, 8007884 <_strtoul_l.constprop.0+0xc0>
 8007882:	4240      	negs	r0, r0
 8007884:	2a00      	cmp	r2, #0
 8007886:	d0f9      	beq.n	800787c <_strtoul_l.constprop.0+0xb8>
 8007888:	b107      	cbz	r7, 800788c <_strtoul_l.constprop.0+0xc8>
 800788a:	1e69      	subs	r1, r5, #1
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	e7f5      	b.n	800787c <_strtoul_l.constprop.0+0xb8>
 8007890:	2430      	movs	r4, #48	; 0x30
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1b5      	bne.n	8007802 <_strtoul_l.constprop.0+0x3e>
 8007896:	2308      	movs	r3, #8
 8007898:	e7b3      	b.n	8007802 <_strtoul_l.constprop.0+0x3e>
 800789a:	2c30      	cmp	r4, #48	; 0x30
 800789c:	d0a9      	beq.n	80077f2 <_strtoul_l.constprop.0+0x2e>
 800789e:	230a      	movs	r3, #10
 80078a0:	e7af      	b.n	8007802 <_strtoul_l.constprop.0+0x3e>
 80078a2:	bf00      	nop
 80078a4:	08007c83 	.word	0x08007c83

080078a8 <_strtoul_r>:
 80078a8:	f7ff bf8c 	b.w	80077c4 <_strtoul_l.constprop.0>

080078ac <__submore>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	460c      	mov	r4, r1
 80078b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80078b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d11d      	bne.n	80078f8 <__submore+0x4c>
 80078bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80078c0:	f000 f8c4 	bl	8007a4c <_malloc_r>
 80078c4:	b918      	cbnz	r0, 80078ce <__submore+0x22>
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80078d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80078d8:	6360      	str	r0, [r4, #52]	; 0x34
 80078da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80078de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80078e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80078e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80078ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80078ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80078f2:	6020      	str	r0, [r4, #0]
 80078f4:	2000      	movs	r0, #0
 80078f6:	e7e8      	b.n	80078ca <__submore+0x1e>
 80078f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80078fa:	0077      	lsls	r7, r6, #1
 80078fc:	463a      	mov	r2, r7
 80078fe:	f000 f919 	bl	8007b34 <_realloc_r>
 8007902:	4605      	mov	r5, r0
 8007904:	2800      	cmp	r0, #0
 8007906:	d0de      	beq.n	80078c6 <__submore+0x1a>
 8007908:	eb00 0806 	add.w	r8, r0, r6
 800790c:	4601      	mov	r1, r0
 800790e:	4632      	mov	r2, r6
 8007910:	4640      	mov	r0, r8
 8007912:	f000 f807 	bl	8007924 <memcpy>
 8007916:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800791a:	f8c4 8000 	str.w	r8, [r4]
 800791e:	e7e9      	b.n	80078f4 <__submore+0x48>

08007920 <__retarget_lock_acquire_recursive>:
 8007920:	4770      	bx	lr

08007922 <__retarget_lock_release_recursive>:
 8007922:	4770      	bx	lr

08007924 <memcpy>:
 8007924:	440a      	add	r2, r1
 8007926:	4291      	cmp	r1, r2
 8007928:	f100 33ff 	add.w	r3, r0, #4294967295
 800792c:	d100      	bne.n	8007930 <memcpy+0xc>
 800792e:	4770      	bx	lr
 8007930:	b510      	push	{r4, lr}
 8007932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793a:	4291      	cmp	r1, r2
 800793c:	d1f9      	bne.n	8007932 <memcpy+0xe>
 800793e:	bd10      	pop	{r4, pc}

08007940 <memmove>:
 8007940:	4288      	cmp	r0, r1
 8007942:	b510      	push	{r4, lr}
 8007944:	eb01 0402 	add.w	r4, r1, r2
 8007948:	d902      	bls.n	8007950 <memmove+0x10>
 800794a:	4284      	cmp	r4, r0
 800794c:	4623      	mov	r3, r4
 800794e:	d807      	bhi.n	8007960 <memmove+0x20>
 8007950:	1e43      	subs	r3, r0, #1
 8007952:	42a1      	cmp	r1, r4
 8007954:	d008      	beq.n	8007968 <memmove+0x28>
 8007956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800795a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800795e:	e7f8      	b.n	8007952 <memmove+0x12>
 8007960:	4402      	add	r2, r0
 8007962:	4601      	mov	r1, r0
 8007964:	428a      	cmp	r2, r1
 8007966:	d100      	bne.n	800796a <memmove+0x2a>
 8007968:	bd10      	pop	{r4, pc}
 800796a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800796e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007972:	e7f7      	b.n	8007964 <memmove+0x24>

08007974 <_free_r>:
 8007974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007976:	2900      	cmp	r1, #0
 8007978:	d044      	beq.n	8007a04 <_free_r+0x90>
 800797a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800797e:	9001      	str	r0, [sp, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f1a1 0404 	sub.w	r4, r1, #4
 8007986:	bfb8      	it	lt
 8007988:	18e4      	addlt	r4, r4, r3
 800798a:	f000 f913 	bl	8007bb4 <__malloc_lock>
 800798e:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <_free_r+0x94>)
 8007990:	9801      	ldr	r0, [sp, #4]
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	b933      	cbnz	r3, 80079a4 <_free_r+0x30>
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	6014      	str	r4, [r2, #0]
 800799a:	b003      	add	sp, #12
 800799c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079a0:	f000 b90e 	b.w	8007bc0 <__malloc_unlock>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d908      	bls.n	80079ba <_free_r+0x46>
 80079a8:	6825      	ldr	r5, [r4, #0]
 80079aa:	1961      	adds	r1, r4, r5
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf01      	itttt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	1949      	addeq	r1, r1, r5
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	e7ed      	b.n	8007996 <_free_r+0x22>
 80079ba:	461a      	mov	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b10b      	cbz	r3, 80079c4 <_free_r+0x50>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d9fa      	bls.n	80079ba <_free_r+0x46>
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	1855      	adds	r5, r2, r1
 80079c8:	42a5      	cmp	r5, r4
 80079ca:	d10b      	bne.n	80079e4 <_free_r+0x70>
 80079cc:	6824      	ldr	r4, [r4, #0]
 80079ce:	4421      	add	r1, r4
 80079d0:	1854      	adds	r4, r2, r1
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	d1e0      	bne.n	800799a <_free_r+0x26>
 80079d8:	681c      	ldr	r4, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	6053      	str	r3, [r2, #4]
 80079de:	4421      	add	r1, r4
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	e7da      	b.n	800799a <_free_r+0x26>
 80079e4:	d902      	bls.n	80079ec <_free_r+0x78>
 80079e6:	230c      	movs	r3, #12
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	e7d6      	b.n	800799a <_free_r+0x26>
 80079ec:	6825      	ldr	r5, [r4, #0]
 80079ee:	1961      	adds	r1, r4, r5
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf04      	itt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	6063      	str	r3, [r4, #4]
 80079fa:	bf04      	itt	eq
 80079fc:	1949      	addeq	r1, r1, r5
 80079fe:	6021      	streq	r1, [r4, #0]
 8007a00:	6054      	str	r4, [r2, #4]
 8007a02:	e7ca      	b.n	800799a <_free_r+0x26>
 8007a04:	b003      	add	sp, #12
 8007a06:	bd30      	pop	{r4, r5, pc}
 8007a08:	20000788 	.word	0x20000788

08007a0c <sbrk_aligned>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4e0e      	ldr	r6, [pc, #56]	; (8007a48 <sbrk_aligned+0x3c>)
 8007a10:	460c      	mov	r4, r1
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	4605      	mov	r5, r0
 8007a16:	b911      	cbnz	r1, 8007a1e <sbrk_aligned+0x12>
 8007a18:	f000 f8bc 	bl	8007b94 <_sbrk_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f8b7 	bl	8007b94 <_sbrk_r>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d00a      	beq.n	8007a40 <sbrk_aligned+0x34>
 8007a2a:	1cc4      	adds	r4, r0, #3
 8007a2c:	f024 0403 	bic.w	r4, r4, #3
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d007      	beq.n	8007a44 <sbrk_aligned+0x38>
 8007a34:	1a21      	subs	r1, r4, r0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 f8ac 	bl	8007b94 <_sbrk_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d101      	bne.n	8007a44 <sbrk_aligned+0x38>
 8007a40:	f04f 34ff 	mov.w	r4, #4294967295
 8007a44:	4620      	mov	r0, r4
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	2000078c 	.word	0x2000078c

08007a4c <_malloc_r>:
 8007a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a50:	1ccd      	adds	r5, r1, #3
 8007a52:	f025 0503 	bic.w	r5, r5, #3
 8007a56:	3508      	adds	r5, #8
 8007a58:	2d0c      	cmp	r5, #12
 8007a5a:	bf38      	it	cc
 8007a5c:	250c      	movcc	r5, #12
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	4607      	mov	r7, r0
 8007a62:	db01      	blt.n	8007a68 <_malloc_r+0x1c>
 8007a64:	42a9      	cmp	r1, r5
 8007a66:	d905      	bls.n	8007a74 <_malloc_r+0x28>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	4630      	mov	r0, r6
 8007a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a74:	4e2e      	ldr	r6, [pc, #184]	; (8007b30 <_malloc_r+0xe4>)
 8007a76:	f000 f89d 	bl	8007bb4 <__malloc_lock>
 8007a7a:	6833      	ldr	r3, [r6, #0]
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	bb34      	cbnz	r4, 8007ace <_malloc_r+0x82>
 8007a80:	4629      	mov	r1, r5
 8007a82:	4638      	mov	r0, r7
 8007a84:	f7ff ffc2 	bl	8007a0c <sbrk_aligned>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	d14d      	bne.n	8007b2a <_malloc_r+0xde>
 8007a8e:	6834      	ldr	r4, [r6, #0]
 8007a90:	4626      	mov	r6, r4
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d140      	bne.n	8007b18 <_malloc_r+0xcc>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	eb04 0803 	add.w	r8, r4, r3
 8007aa0:	f000 f878 	bl	8007b94 <_sbrk_r>
 8007aa4:	4580      	cmp	r8, r0
 8007aa6:	d13a      	bne.n	8007b1e <_malloc_r+0xd2>
 8007aa8:	6821      	ldr	r1, [r4, #0]
 8007aaa:	3503      	adds	r5, #3
 8007aac:	1a6d      	subs	r5, r5, r1
 8007aae:	f025 0503 	bic.w	r5, r5, #3
 8007ab2:	3508      	adds	r5, #8
 8007ab4:	2d0c      	cmp	r5, #12
 8007ab6:	bf38      	it	cc
 8007ab8:	250c      	movcc	r5, #12
 8007aba:	4629      	mov	r1, r5
 8007abc:	4638      	mov	r0, r7
 8007abe:	f7ff ffa5 	bl	8007a0c <sbrk_aligned>
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d02b      	beq.n	8007b1e <_malloc_r+0xd2>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	442b      	add	r3, r5
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	e00e      	b.n	8007aec <_malloc_r+0xa0>
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	1b52      	subs	r2, r2, r5
 8007ad2:	d41e      	bmi.n	8007b12 <_malloc_r+0xc6>
 8007ad4:	2a0b      	cmp	r2, #11
 8007ad6:	d916      	bls.n	8007b06 <_malloc_r+0xba>
 8007ad8:	1961      	adds	r1, r4, r5
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	6025      	str	r5, [r4, #0]
 8007ade:	bf18      	it	ne
 8007ae0:	6059      	strne	r1, [r3, #4]
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	bf08      	it	eq
 8007ae6:	6031      	streq	r1, [r6, #0]
 8007ae8:	5162      	str	r2, [r4, r5]
 8007aea:	604b      	str	r3, [r1, #4]
 8007aec:	4638      	mov	r0, r7
 8007aee:	f104 060b 	add.w	r6, r4, #11
 8007af2:	f000 f865 	bl	8007bc0 <__malloc_unlock>
 8007af6:	f026 0607 	bic.w	r6, r6, #7
 8007afa:	1d23      	adds	r3, r4, #4
 8007afc:	1af2      	subs	r2, r6, r3
 8007afe:	d0b6      	beq.n	8007a6e <_malloc_r+0x22>
 8007b00:	1b9b      	subs	r3, r3, r6
 8007b02:	50a3      	str	r3, [r4, r2]
 8007b04:	e7b3      	b.n	8007a6e <_malloc_r+0x22>
 8007b06:	6862      	ldr	r2, [r4, #4]
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	bf0c      	ite	eq
 8007b0c:	6032      	streq	r2, [r6, #0]
 8007b0e:	605a      	strne	r2, [r3, #4]
 8007b10:	e7ec      	b.n	8007aec <_malloc_r+0xa0>
 8007b12:	4623      	mov	r3, r4
 8007b14:	6864      	ldr	r4, [r4, #4]
 8007b16:	e7b2      	b.n	8007a7e <_malloc_r+0x32>
 8007b18:	4634      	mov	r4, r6
 8007b1a:	6876      	ldr	r6, [r6, #4]
 8007b1c:	e7b9      	b.n	8007a92 <_malloc_r+0x46>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	603b      	str	r3, [r7, #0]
 8007b22:	4638      	mov	r0, r7
 8007b24:	f000 f84c 	bl	8007bc0 <__malloc_unlock>
 8007b28:	e7a1      	b.n	8007a6e <_malloc_r+0x22>
 8007b2a:	6025      	str	r5, [r4, #0]
 8007b2c:	e7de      	b.n	8007aec <_malloc_r+0xa0>
 8007b2e:	bf00      	nop
 8007b30:	20000788 	.word	0x20000788

08007b34 <_realloc_r>:
 8007b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b38:	4680      	mov	r8, r0
 8007b3a:	4614      	mov	r4, r2
 8007b3c:	460e      	mov	r6, r1
 8007b3e:	b921      	cbnz	r1, 8007b4a <_realloc_r+0x16>
 8007b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b44:	4611      	mov	r1, r2
 8007b46:	f7ff bf81 	b.w	8007a4c <_malloc_r>
 8007b4a:	b92a      	cbnz	r2, 8007b58 <_realloc_r+0x24>
 8007b4c:	f7ff ff12 	bl	8007974 <_free_r>
 8007b50:	4625      	mov	r5, r4
 8007b52:	4628      	mov	r0, r5
 8007b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b58:	f000 f838 	bl	8007bcc <_malloc_usable_size_r>
 8007b5c:	4284      	cmp	r4, r0
 8007b5e:	4607      	mov	r7, r0
 8007b60:	d802      	bhi.n	8007b68 <_realloc_r+0x34>
 8007b62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b66:	d812      	bhi.n	8007b8e <_realloc_r+0x5a>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	f7ff ff6e 	bl	8007a4c <_malloc_r>
 8007b70:	4605      	mov	r5, r0
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d0ed      	beq.n	8007b52 <_realloc_r+0x1e>
 8007b76:	42bc      	cmp	r4, r7
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	bf28      	it	cs
 8007b7e:	463a      	movcs	r2, r7
 8007b80:	f7ff fed0 	bl	8007924 <memcpy>
 8007b84:	4631      	mov	r1, r6
 8007b86:	4640      	mov	r0, r8
 8007b88:	f7ff fef4 	bl	8007974 <_free_r>
 8007b8c:	e7e1      	b.n	8007b52 <_realloc_r+0x1e>
 8007b8e:	4635      	mov	r5, r6
 8007b90:	e7df      	b.n	8007b52 <_realloc_r+0x1e>
	...

08007b94 <_sbrk_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d06      	ldr	r5, [pc, #24]	; (8007bb0 <_sbrk_r+0x1c>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	f7f9 f9f0 	bl	8000f84 <_sbrk>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_sbrk_r+0x1a>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_sbrk_r+0x1a>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	20000780 	.word	0x20000780

08007bb4 <__malloc_lock>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	; (8007bbc <__malloc_lock+0x8>)
 8007bb6:	f7ff beb3 	b.w	8007920 <__retarget_lock_acquire_recursive>
 8007bba:	bf00      	nop
 8007bbc:	20000784 	.word	0x20000784

08007bc0 <__malloc_unlock>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	; (8007bc8 <__malloc_unlock+0x8>)
 8007bc2:	f7ff beae 	b.w	8007922 <__retarget_lock_release_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	20000784 	.word	0x20000784

08007bcc <_malloc_usable_size_r>:
 8007bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd0:	1f18      	subs	r0, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfbc      	itt	lt
 8007bd6:	580b      	ldrlt	r3, [r1, r0]
 8007bd8:	18c0      	addlt	r0, r0, r3
 8007bda:	4770      	bx	lr

08007bdc <_init>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr

08007be8 <_fini>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	bf00      	nop
 8007bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bee:	bc08      	pop	{r3}
 8007bf0:	469e      	mov	lr, r3
 8007bf2:	4770      	bx	lr
