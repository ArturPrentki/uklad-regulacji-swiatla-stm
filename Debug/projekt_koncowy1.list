
projekt_koncowy1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006720  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a98  08006a98  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aa0  08006aa0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aa4  08006aa4  00016aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200000a4  08006b4c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006b4c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166c5  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e40  00000000  00000000  00036799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  000395e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284eb  00000000  00000000  0003b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186ed  00000000  00000000  00063c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4d77  00000000  00000000  0007c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001710c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e94  00000000  00000000  00171118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068d8 	.word	0x080068d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	080068d8 	.word	0x080068d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	b299      	uxth	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f107 020f 	add.w	r2, r7, #15
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	f001 fb95 	bl	8001d14 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 80005ea:	2310      	movs	r3, #16
 80005ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	b299      	uxth	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f107 020f 	add.w	r2, r7, #15
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	f001 fb86 	bl	8001d14 <HAL_I2C_Master_Transmit>
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	b299      	uxth	r1, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f107 020c 	add.w	r2, r7, #12
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	f001 fc65 	bl	8001efc <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 8000632:	7b3b      	ldrb	r3, [r7, #12]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	7b7a      	ldrb	r2, [r7, #13]
 8000638:	4313      	orrs	r3, r2
 800063a:	ee07 3a90 	vmov	s15, r3
 800063e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000642:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000658 <BH1750_ReadIlluminance_lux+0x48>
 8000646:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800064a:	eef0 7a66 	vmov.f32	s15, s13
}
 800064e:	eeb0 0a67 	vmov.f32	s0, s15
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	3f99999a 	.word	0x3f99999a

0800065c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b9c      	ldr	r3, [pc, #624]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a9b      	ldr	r2, [pc, #620]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b99      	ldr	r3, [pc, #612]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068a:	4b96      	ldr	r3, [pc, #600]	; (80008e4 <MX_GPIO_Init+0x288>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a95      	ldr	r2, [pc, #596]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000690:	f043 0320 	orr.w	r3, r3, #32
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b93      	ldr	r3, [pc, #588]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0320 	and.w	r3, r3, #32
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	4b90      	ldr	r3, [pc, #576]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a8f      	ldr	r2, [pc, #572]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b8d      	ldr	r3, [pc, #564]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b8a      	ldr	r3, [pc, #552]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a89      	ldr	r2, [pc, #548]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b87      	ldr	r3, [pc, #540]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b84      	ldr	r3, [pc, #528]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a83      	ldr	r2, [pc, #524]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b81      	ldr	r3, [pc, #516]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	4b7e      	ldr	r3, [pc, #504]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a7d      	ldr	r2, [pc, #500]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b7b      	ldr	r3, [pc, #492]	; (80008e4 <MX_GPIO_Init+0x288>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	4b78      	ldr	r3, [pc, #480]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a77      	ldr	r2, [pc, #476]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b75      	ldr	r3, [pc, #468]	; (80008e4 <MX_GPIO_Init+0x288>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000720:	4871      	ldr	r0, [pc, #452]	; (80008e8 <MX_GPIO_Init+0x28c>)
 8000722:	f001 fa29 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	4870      	ldr	r0, [pc, #448]	; (80008ec <MX_GPIO_Init+0x290>)
 800072c:	f001 fa24 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	486e      	ldr	r0, [pc, #440]	; (80008f0 <MX_GPIO_Init+0x294>)
 8000736:	f001 fa1f 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800073a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000740:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4867      	ldr	r0, [pc, #412]	; (80008f0 <MX_GPIO_Init+0x294>)
 8000752:	f001 f865 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn11_Pin;
 8000756:	2308      	movs	r3, #8
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075e:	2301      	movs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn11_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4862      	ldr	r0, [pc, #392]	; (80008f4 <MX_GPIO_Init+0x298>)
 800076a:	f001 f859 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn2_Pin;
 800076e:	2301      	movs	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000778:	2302      	movs	r3, #2
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn2_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	485b      	ldr	r0, [pc, #364]	; (80008f0 <MX_GPIO_Init+0x294>)
 8000784:	f001 f84c 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000788:	2332      	movs	r3, #50	; 0x32
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000798:	230b      	movs	r3, #11
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4853      	ldr	r0, [pc, #332]	; (80008f0 <MX_GPIO_Init+0x294>)
 80007a4:	f001 f83c 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn3_Pin;
 80007a8:	2308      	movs	r3, #8
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn3_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	484d      	ldr	r0, [pc, #308]	; (80008f0 <MX_GPIO_Init+0x294>)
 80007bc:	f001 f830 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007c0:	2386      	movs	r3, #134	; 0x86
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	230b      	movs	r3, #11
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4847      	ldr	r0, [pc, #284]	; (80008f8 <MX_GPIO_Init+0x29c>)
 80007dc:	f001 f820 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn1_Pin;
 80007e0:	2308      	movs	r3, #8
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ea:	2302      	movs	r3, #2
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4840      	ldr	r0, [pc, #256]	; (80008f8 <MX_GPIO_Init+0x29c>)
 80007f6:	f001 f813 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80007fa:	f244 0301 	movw	r3, #16385	; 0x4001
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4835      	ldr	r0, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x28c>)
 8000814:	f001 f804 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082a:	230b      	movs	r3, #11
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	482c      	ldr	r0, [pc, #176]	; (80008e8 <MX_GPIO_Init+0x28c>)
 8000836:	f000 fff3 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4826      	ldr	r0, [pc, #152]	; (80008ec <MX_GPIO_Init+0x290>)
 8000852:	f000 ffe5 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x290>)
 800086a:	f000 ffd9 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x294>)
 8000886:	f000 ffcb 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800088a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089c:	230b      	movs	r3, #11
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4811      	ldr	r0, [pc, #68]	; (80008ec <MX_GPIO_Init+0x290>)
 80008a8:	f000 ffba 	bl	8001820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2006      	movs	r0, #6
 80008b2:	f000 feec 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008b6:	2006      	movs	r0, #6
 80008b8:	f000 ff05 	bl	80016c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2009      	movs	r0, #9
 80008c2:	f000 fee4 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008c6:	2009      	movs	r0, #9
 80008c8:	f000 fefd 	bl	80016c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f000 fedc 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d6:	2028      	movs	r0, #40	; 0x28
 80008d8:	f000 fef5 	bl	80016c6 <HAL_NVIC_EnableIRQ>

}
 80008dc:	bf00      	nop
 80008de:	3730      	adds	r7, #48	; 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400
 80008ec:	40021800 	.word	0x40021800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40021400 	.word	0x40021400
 80008f8:	40020000 	.word	0x40020000

080008fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_I2C1_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_I2C1_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_I2C1_Init+0x74>)
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <MX_I2C1_Init+0x7c>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_I2C1_Init+0x74>)
 8000914:	2201      	movs	r2, #1
 8000916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_I2C1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_I2C1_Init+0x74>)
 8000938:	f001 f95c 	bl	8001bf4 <HAL_I2C_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000942:	f000 f96d 	bl	8000c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <MX_I2C1_Init+0x74>)
 800094a:	f001 fe39 	bl	80025c0 <HAL_I2CEx_ConfigAnalogFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000954:	f000 f964 	bl	8000c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_I2C1_Init+0x74>)
 800095c:	f001 fe7b 	bl	8002656 <HAL_I2CEx_ConfigDigitalFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 f95b 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000c0 	.word	0x200000c0
 8000974:	40005400 	.word	0x40005400
 8000978:	00808cd2 	.word	0x00808cd2

0800097c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0aa      	sub	sp, #168	; 0xa8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2284      	movs	r2, #132	; 0x84
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f005 f993 	bl	8005cc8 <memset>
  if(i2cHandle->Instance==I2C1)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <HAL_I2C_MspInit+0xb4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d13c      	bne.n	8000a26 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fb72 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009c6:	f000 f92b 	bl	8000c20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <HAL_I2C_MspInit+0xbc>)
 8000a0a:	f000 ff09 	bl	8001820 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 8000a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_I2C_MspInit+0xb8>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a26:	bf00      	nop
 8000a28:	37a8      	adds	r7, #168	; 0xa8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b092      	sub	sp, #72	; 0x48
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t single_message_recived [30]={0};
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	831a      	strh	r2, [r3, #24]
	int var=0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
	char single_message_response [30]={0};
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	831a      	strh	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f000 fcd2 	bl	800141e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f869 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f7ff fded 	bl	800065c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a82:	f000 fc0b 	bl	800129c <MX_USART3_UART_Init>
  //MX_USB_OTG_FS_PCD_Init();
  MX_TIM2_Init();
 8000a86:	f000 fa4b 	bl	8000f20 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000a8a:	f000 fb1d 	bl	80010c8 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000a8e:	f000 fa95 	bl	8000fbc <MX_TIM3_Init>
  MX_I2C1_Init();
 8000a92:	f7ff ff33 	bl	80008fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a96:	2100      	movs	r1, #0
 8000a98:	4826      	ldr	r0, [pc, #152]	; (8000b34 <main+0xf8>)
 8000a9a:	f002 ffab 	bl	80039f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4824      	ldr	r0, [pc, #144]	; (8000b34 <main+0xf8>)
 8000aa2:	f002 ffa7 	bl	80039f4 <HAL_TIM_PWM_Start>

  BH1750_Init(&hbh1750_1);
 8000aa6:	4824      	ldr	r0, [pc, #144]	; (8000b38 <main+0xfc>)
 8000aa8:	f7ff fd8c 	bl	80005c4 <BH1750_Init>
  {

//

//Komunikacja z bh1750
	  light = BH1750_ReadIlluminance_lux(&hbh1750_1);
 8000aac:	4822      	ldr	r0, [pc, #136]	; (8000b38 <main+0xfc>)
 8000aae:	f7ff fdaf 	bl	8000610 <BH1750_ReadIlluminance_lux>
 8000ab2:	eef0 7a40 	vmov.f32	s15, s0
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <main+0x100>)
 8000ab8:	edc3 7a00 	vstr	s15, [r3]
//	  HAL_Delay(100);
	  //to jest nasza wartość aktualna


	  //miejsce na przyjęcie wiadomości z uart
	  uart3_recived_status = HAL_UART_Receive (& huart3 , ( uint8_t *)single_message_recived ,strlen("999"), 100);
 8000abc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	481e      	ldr	r0, [pc, #120]	; (8000b40 <main+0x104>)
 8000ac6:	f004 f877 	bl	8004bb8 <HAL_UART_Receive>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  single_message_recived [4]= ' \0 ';
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	  if ( uart3_recived_status == HAL_OK )
 8000ad6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d107      	bne.n	8000aee <main+0xb2>
	  {
		  sscanf((char*) single_message_recived, "%i" , &var);
 8000ade:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae6:	4917      	ldr	r1, [pc, #92]	; (8000b44 <main+0x108>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f005 f8f5 	bl	8005cd8 <siscanf>
//	  HAL_UART_Transmit (& huart3 , ( uint8_t *) single_message_response ,
//	  strlen ( single_message_response) , 10000) ;

	  //miesjce na regulator

	  light_ctrl = PID2DOF_GetOutput(&hlight_pid, var, light);
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	ee07 3a90 	vmov	s15, r3
 8000af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <main+0x100>)
 8000afa:	ed93 7a00 	vldr	s14, [r3]
 8000afe:	eef0 0a47 	vmov.f32	s1, s14
 8000b02:	eeb0 0a67 	vmov.f32	s0, s15
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <main+0x10c>)
 8000b08:	f000 f88f 	bl	8000c2a <PID2DOF_GetOutput>
 8000b0c:	eef0 7a40 	vmov.f32	s15, s0
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <main+0x110>)
 8000b12:	edc3 7a00 	vstr	s15, [r3]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, light_ctrl*10);
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <main+0x110>)
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <main+0xf8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2c:	ee17 2a90 	vmov	r2, s15
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
	  light = BH1750_ReadIlluminance_lux(&hbh1750_1);
 8000b32:	e7bb      	b.n	8000aac <main+0x70>
 8000b34:	2000016c 	.word	0x2000016c
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000114 	.word	0x20000114
 8000b40:	20000204 	.word	0x20000204
 8000b44:	080068f0 	.word	0x080068f0
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000118 	.word	0x20000118

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b094      	sub	sp, #80	; 0x50
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0320 	add.w	r3, r7, #32
 8000b5a:	2230      	movs	r2, #48	; 0x30
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f005 f8b2 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b74:	f001 fdbc 	bl	80026f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <SystemClock_Config+0xc8>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <SystemClock_Config+0xc8>)
 8000b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <SystemClock_Config+0xc8>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <SystemClock_Config+0xcc>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b98:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <SystemClock_Config+0xcc>)
 8000b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <SystemClock_Config+0xcc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bc4:	2348      	movs	r3, #72	; 0x48
 8000bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 0320 	add.w	r3, r7, #32
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fd9b 	bl	8002710 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000be0:	f000 f81e 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	230f      	movs	r3, #15
 8000be6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be8:	2302      	movs	r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 f829 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c0c:	f000 f808 	bl	8000c20 <Error_Handler>
  }
}
 8000c10:	bf00      	nop
 8000c12:	3750      	adds	r7, #80	; 0x50
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>

08000c2a <PID2DOF_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}
 
float PID2DOF_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b089      	sub	sp, #36	; 0x24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c36:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 8000c3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c46:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	edd3 6a01 	vldr	s13, [r3, #4]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c60:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c88:	edd7 6a06 	vldr	s13, [r7, #24]
 8000c8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ca8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	edd3 7a07 	vldr	s15, [r3, #28]
 8000cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	ed93 7a00 	vldr	s14, [r3]
 8000ccc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	edd3 7a08 	vldr	s15, [r3, #32]
 8000cf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfe:	dd03      	ble.n	8000d08 <PID2DOF_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e00f      	b.n	8000d28 <PID2DOF_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	d503      	bpl.n	8000d24 <PID2DOF_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	e001      	b.n	8000d28 <PID2DOF_GetOutput+0xfe>
  else
	  u_sat = u;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 8000d28:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d30:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d38:	d013      	beq.n	8000d62 <PID2DOF_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d50:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	ee07 3a90 	vmov	s15, r3
}
 8000d68:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_MspInit+0x44>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_MspInit+0x44>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_MspInit+0x44>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x44>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x44>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x44>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 fb44 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn2_Pin);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 fec7 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn1_Pin);
 8000e26:	2008      	movs	r0, #8
 8000e28:	f000 fec0 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM2_IRQHandler+0x10>)
 8000e36:	f002 fed7 	bl	8003be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000120 	.word	0x20000120

08000e44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM3_IRQHandler+0x10>)
 8000e4a:	f002 fecd 	bl	8003be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000016c 	.word	0x2000016c

08000e58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <USART3_IRQHandler+0x10>)
 8000e5e:	f003 ff6f 	bl	8004d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000204 	.word	0x20000204

08000e6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e74:	f000 fe9a 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM6_DAC_IRQHandler+0x10>)
 8000e82:	f002 feb1 	bl	8003be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001b8 	.word	0x200001b8

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f004 fed8 	bl	8005c74 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20050000 	.word	0x20050000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	2000011c 	.word	0x2000011c
 8000ef8:	200002a0 	.word	0x200002a0

08000efc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f48:	2247      	movs	r2, #71	; 0x47
 8000f4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499999;
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f54:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <MX_TIM2_Init+0x98>)
 8000f56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f64:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f66:	f002 fc8d 	bl	8003884 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f70:	f7ff fe56 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f82:	f003 f865 	bl	8004050 <HAL_TIM_ConfigClockSource>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f8c:	f7ff fe48 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_TIM2_Init+0x94>)
 8000f9e:	f003 fd11 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f7ff fe3a 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000120 	.word	0x20000120
 8000fb8:	0007a11f 	.word	0x0007a11f

08000fbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08e      	sub	sp, #56	; 0x38
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <MX_TIM3_Init+0x104>)
 8000ff0:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <MX_TIM3_Init+0x108>)
 8000ff2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000ff4:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <MX_TIM3_Init+0x104>)
 8000ff6:	2247      	movs	r2, #71	; 0x47
 8000ff8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <MX_TIM3_Init+0x104>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <MX_TIM3_Init+0x104>)
 8001002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001006:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <MX_TIM3_Init+0x104>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_TIM3_Init+0x104>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001014:	482a      	ldr	r0, [pc, #168]	; (80010c0 <MX_TIM3_Init+0x104>)
 8001016:	f002 fc35 	bl	8003884 <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001020:	f7ff fdfe 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800102a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102e:	4619      	mov	r1, r3
 8001030:	4823      	ldr	r0, [pc, #140]	; (80010c0 <MX_TIM3_Init+0x104>)
 8001032:	f003 f80d 	bl	8004050 <HAL_TIM_ConfigClockSource>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800103c:	f7ff fdf0 	bl	8000c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001040:	481f      	ldr	r0, [pc, #124]	; (80010c0 <MX_TIM3_Init+0x104>)
 8001042:	f002 fc76 	bl	8003932 <HAL_TIM_PWM_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800104c:	f7ff fde8 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_TIM3_Init+0x104>)
 8001060:	f003 fcb0 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800106a:	f7ff fdd9 	bl	8000c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	2360      	movs	r3, #96	; 0x60
 8001070:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <MX_TIM3_Init+0x104>)
 8001088:	f002 fece 	bl	8003e28 <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001092:	f7ff fdc5 	bl	8000c20 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001096:	2304      	movs	r3, #4
 8001098:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	2204      	movs	r2, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_TIM3_Init+0x104>)
 80010a2:	f002 fec1 	bl	8003e28 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80010ac:	f7ff fdb8 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MX_TIM3_Init+0x104>)
 80010b2:	f000 f89d 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 80010b6:	bf00      	nop
 80010b8:	3738      	adds	r7, #56	; 0x38
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000016c 	.word	0x2000016c
 80010c4:	40000400 	.word	0x40000400

080010c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_TIM6_Init+0x68>)
 80010da:	4a16      	ldr	r2, [pc, #88]	; (8001134 <MX_TIM6_Init+0x6c>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_TIM6_Init+0x68>)
 80010e0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_TIM6_Init+0x68>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_TIM6_Init+0x68>)
 80010ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80010f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_TIM6_Init+0x68>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_TIM6_Init+0x68>)
 80010fc:	f002 fbc2 	bl	8003884 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001106:	f7ff fd8b 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_TIM6_Init+0x68>)
 8001118:	f003 fc54 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001122:	f7ff fd7d 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001b8 	.word	0x200001b8
 8001134:	40001000 	.word	0x40001000

08001138 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001148:	d114      	bne.n	8001174 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	201c      	movs	r0, #28
 8001168:	f000 fa91 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800116c:	201c      	movs	r0, #28
 800116e:	f000 faaa 	bl	80016c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001172:	e032      	b.n	80011da <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_TIM_Base_MspInit+0xb0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d114      	bne.n	80011a8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201d      	movs	r0, #29
 800119c:	f000 fa77 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011a0:	201d      	movs	r0, #29
 80011a2:	f000 fa90 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 80011a6:	e018      	b.n	80011da <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_TIM_Base_MspInit+0xb4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d113      	bne.n	80011da <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_TIM_Base_MspInit+0xac>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2106      	movs	r1, #6
 80011ce:	2036      	movs	r0, #54	; 0x36
 80011d0:	f000 fa5d 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011d4:	2036      	movs	r0, #54	; 0x36
 80011d6:	f000 fa76 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40001000 	.word	0x40001000

080011f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1f      	ldr	r2, [pc, #124]	; (800128c <HAL_TIM_MspPostInit+0x9c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d137      	bne.n	8001282 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_TIM_MspPostInit+0xa0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_TIM_MspPostInit+0xa0>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_TIM_MspPostInit+0xa0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_TIM_MspPostInit+0xa0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <HAL_TIM_MspPostInit+0xa0>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_TIM_MspPostInit+0xa0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001252:	2302      	movs	r3, #2
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <HAL_TIM_MspPostInit+0xa4>)
 800125e:	f000 fadf 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001272:	2302      	movs	r3, #2
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <HAL_TIM_MspPostInit+0xa8>)
 800127e:	f000 facf 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40000400 	.word	0x40000400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020800 	.word	0x40020800

0800129c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <MX_USART3_UART_Init+0x5c>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012e0:	f003 fc1c 	bl	8004b1c <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012ea:	f7ff fc99 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000204 	.word	0x20000204
 80012f8:	40004800 	.word	0x40004800

080012fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0aa      	sub	sp, #168	; 0xa8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2284      	movs	r2, #132	; 0x84
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fcd3 	bl	8005cc8 <memset>
  if(uartHandle->Instance==USART3)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_UART_MspInit+0xc4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d144      	bne.n	80013b6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800132c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001330:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001332:	2300      	movs	r3, #0
 8001334:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4618      	mov	r0, r3
 800133c:	f001 feb2 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001346:	f7ff fc6b 	bl	8000c20 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_UART_MspInit+0xc8>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_UART_MspInit+0xc8>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_UART_MspInit+0xc8>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_UART_MspInit+0xc8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_UART_MspInit+0xc8>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_UART_MspInit+0xc8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800137a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001394:	2307      	movs	r3, #7
 8001396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800139e:	4619      	mov	r1, r3
 80013a0:	4809      	ldr	r0, [pc, #36]	; (80013c8 <HAL_UART_MspInit+0xcc>)
 80013a2:	f000 fa3d 	bl	8001820 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2027      	movs	r0, #39	; 0x27
 80013ac:	f000 f96f 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013b0:	2027      	movs	r0, #39	; 0x27
 80013b2:	f000 f988 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013b6:	bf00      	nop
 80013b8:	37a8      	adds	r7, #168	; 0xa8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004800 	.word	0x40004800
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020c00 	.word	0x40020c00

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d2:	490e      	ldr	r1, [pc, #56]	; (800140c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e8:	4c0b      	ldr	r4, [pc, #44]	; (8001418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f6:	f7ff fd81 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f004 fc41 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff fb1d 	bl	8000a3c <main>
  bx  lr    
 8001402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001410:	08006aa8 	.word	0x08006aa8
  ldr r2, =_sbss
 8001414:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001418:	200002a0 	.word	0x200002a0

0800141c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC_IRQHandler>

0800141e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001422:	2003      	movs	r0, #3
 8001424:	f000 f928 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001428:	2000      	movs	r0, #0
 800142a:	f000 f805 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142e:	f7ff fca3 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f943 	bl	80016e2 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f90b 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000034 	.word	0x20000034
 8001490:	2000003c 	.word	0x2000003c
 8001494:	20000038 	.word	0x20000038

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2000003c 	.word	0x2000003c
 80014bc:	2000028c 	.word	0x2000028c

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000028c 	.word	0x2000028c

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	4313      	orrs	r3, r2
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	05fa0000 	.word	0x05fa0000

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff3e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff feda 	bl	80014c0 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d008      	beq.n	800172c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e052      	b.n	80017d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0216 	bic.w	r2, r2, #22
 800173a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800174a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <HAL_DMA_Abort+0x62>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0208 	bic.w	r2, r2, #8
 800176a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177c:	e013      	b.n	80017a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177e:	f7ff fe9f 	bl	80014c0 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b05      	cmp	r3, #5
 800178a:	d90c      	bls.n	80017a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e015      	b.n	80017d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e4      	bne.n	800177e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	223f      	movs	r2, #63	; 0x3f
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d004      	beq.n	80017f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e00c      	b.n	8001812 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2205      	movs	r2, #5
 80017fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e175      	b.n	8001b2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8164 	bne.w	8001b26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <HAL_GPIO_Init+0x56>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80be 	beq.w	8001b26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_GPIO_Init+0x324>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a65      	ldr	r2, [pc, #404]	; (8001b44 <HAL_GPIO_Init+0x324>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_GPIO_Init+0x324>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019c2:	4a61      	ldr	r2, [pc, #388]	; (8001b48 <HAL_GPIO_Init+0x328>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_GPIO_Init+0x32c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d037      	beq.n	8001a5e <HAL_GPIO_Init+0x23e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a57      	ldr	r2, [pc, #348]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d031      	beq.n	8001a5a <HAL_GPIO_Init+0x23a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a56      	ldr	r2, [pc, #344]	; (8001b54 <HAL_GPIO_Init+0x334>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d02b      	beq.n	8001a56 <HAL_GPIO_Init+0x236>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <HAL_GPIO_Init+0x338>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x232>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a54      	ldr	r2, [pc, #336]	; (8001b5c <HAL_GPIO_Init+0x33c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x22e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a53      	ldr	r2, [pc, #332]	; (8001b60 <HAL_GPIO_Init+0x340>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x22a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_GPIO_Init+0x344>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x226>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a51      	ldr	r2, [pc, #324]	; (8001b68 <HAL_GPIO_Init+0x348>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x222>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a50      	ldr	r2, [pc, #320]	; (8001b6c <HAL_GPIO_Init+0x34c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x21e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x21a>
 8001a36:	2309      	movs	r3, #9
 8001a38:	e012      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	e010      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a3e:	2308      	movs	r3, #8
 8001a40:	e00e      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a42:	2307      	movs	r3, #7
 8001a44:	e00c      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a46:	2306      	movs	r3, #6
 8001a48:	e00a      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_GPIO_Init+0x328>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_GPIO_Init+0x354>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa2:	4a34      	ldr	r2, [pc, #208]	; (8001b74 <HAL_GPIO_Init+0x354>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <HAL_GPIO_Init+0x354>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001acc:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <HAL_GPIO_Init+0x354>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_GPIO_Init+0x354>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af6:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_GPIO_Init+0x354>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_GPIO_Init+0x354>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <HAL_GPIO_Init+0x354>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f67f ae86 	bls.w	8001840 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40021400 	.word	0x40021400
 8001b64:	40021800 	.word	0x40021800
 8001b68:	40021c00 	.word	0x40021c00
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40022400 	.word	0x40022400
 8001b74:	40013c00 	.word	0x40013c00

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	619a      	str	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f806 	bl	8001bdc <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07f      	b.n	8001d06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe feae 	bl	800097c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	e006      	b.n	8001c7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d104      	bne.n	8001c8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_I2C_Init+0x11c>)
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69d9      	ldr	r1, [r3, #28]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1a      	ldr	r2, [r3, #32]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	02008000 	.word	0x02008000

08001d14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	460b      	mov	r3, r1
 8001d22:	817b      	strh	r3, [r7, #10]
 8001d24:	4613      	mov	r3, r2
 8001d26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	f040 80da 	bne.w	8001eea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_I2C_Master_Transmit+0x30>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e0d3      	b.n	8001eec <HAL_I2C_Master_Transmit+0x1d8>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d4c:	f7ff fbb8 	bl	80014c0 <HAL_GetTick>
 8001d50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2319      	movs	r3, #25
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f9e6 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0be      	b.n	8001eec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2221      	movs	r2, #33	; 0x21
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	893a      	ldrh	r2, [r7, #8]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2bff      	cmp	r3, #255	; 0xff
 8001d9e:	d90e      	bls.n	8001dbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	22ff      	movs	r2, #255	; 0xff
 8001da4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	8979      	ldrh	r1, [r7, #10]
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fbd0 	bl	800255c <I2C_TransferConfig>
 8001dbc:	e06c      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	8979      	ldrh	r1, [r7, #10]
 8001dd0:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fbbf 	bl	800255c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001dde:	e05b      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	6a39      	ldr	r1, [r7, #32]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f9e3 	bl	80021b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e07b      	b.n	8001eec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d034      	beq.n	8001e98 <HAL_I2C_Master_Transmit+0x184>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d130      	bne.n	8001e98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f975 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04d      	b.n	8001eec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d90e      	bls.n	8001e78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	22ff      	movs	r2, #255	; 0xff
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	8979      	ldrh	r1, [r7, #10]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 fb73 	bl	800255c <I2C_TransferConfig>
 8001e76:	e00f      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	8979      	ldrh	r1, [r7, #10]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fb62 	bl	800255c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d19e      	bne.n	8001de0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f9c2 	bl	8002230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e01a      	b.n	8001eec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001eca:	400b      	ands	r3, r1
 8001ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
  }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	80002000 	.word	0x80002000
 8001ef8:	fe00e800 	.word	0xfe00e800

08001efc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	461a      	mov	r2, r3
 8001f08:	460b      	mov	r3, r1
 8001f0a:	817b      	strh	r3, [r7, #10]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	f040 80db 	bne.w	80020d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_I2C_Master_Receive+0x30>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e0d4      	b.n	80020d6 <HAL_I2C_Master_Receive+0x1da>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f34:	f7ff fac4 	bl	80014c0 <HAL_GetTick>
 8001f38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2319      	movs	r3, #25
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f8f2 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0bf      	b.n	80020d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2222      	movs	r2, #34	; 0x22
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2210      	movs	r2, #16
 8001f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	893a      	ldrh	r2, [r7, #8]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2bff      	cmp	r3, #255	; 0xff
 8001f86:	d90e      	bls.n	8001fa6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	22ff      	movs	r2, #255	; 0xff
 8001f8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	8979      	ldrh	r1, [r7, #10]
 8001f96:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <HAL_I2C_Master_Receive+0x1e4>)
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fadc 	bl	800255c <I2C_TransferConfig>
 8001fa4:	e06d      	b.n	8002082 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	8979      	ldrh	r1, [r7, #10]
 8001fb8:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <HAL_I2C_Master_Receive+0x1e4>)
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 facb 	bl	800255c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001fc6:	e05c      	b.n	8002082 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	6a39      	ldr	r1, [r7, #32]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f96b 	bl	80022a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e07c      	b.n	80020d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d034      	beq.n	8002082 <HAL_I2C_Master_Receive+0x186>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d130      	bne.n	8002082 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2200      	movs	r2, #0
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f880 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e04d      	b.n	80020d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2bff      	cmp	r3, #255	; 0xff
 8002042:	d90e      	bls.n	8002062 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	22ff      	movs	r2, #255	; 0xff
 8002048:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204e:	b2da      	uxtb	r2, r3
 8002050:	8979      	ldrh	r1, [r7, #10]
 8002052:	2300      	movs	r3, #0
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fa7e 	bl	800255c <I2C_TransferConfig>
 8002060:	e00f      	b.n	8002082 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	b2da      	uxtb	r2, r3
 8002072:	8979      	ldrh	r1, [r7, #10]
 8002074:	2300      	movs	r3, #0
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fa6d 	bl	800255c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d19d      	bne.n	8001fc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	6a39      	ldr	r1, [r7, #32]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f8cd 	bl	8002230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e01a      	b.n	80020d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2220      	movs	r2, #32
 80020a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6859      	ldr	r1, [r3, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_I2C_Master_Receive+0x1e8>)
 80020b4:	400b      	ands	r3, r1
 80020b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	80002400 	.word	0x80002400
 80020e4:	fe00e800 	.word	0xfe00e800

080020e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d103      	bne.n	8002106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d007      	beq.n	8002124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	619a      	str	r2, [r3, #24]
  }
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	e022      	b.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d01e      	beq.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff f9b9 	bl	80014c0 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d113      	bne.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e00f      	b.n	80021a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d0cd      	beq.n	8002142 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021bc:	e02c      	b.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f8ea 	bl	800239c <I2C_IsErrorOccurred>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e02a      	b.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d01e      	beq.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021da:	f7ff f971 	bl	80014c0 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d113      	bne.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f043 0220 	orr.w	r2, r3, #32
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e007      	b.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b02      	cmp	r3, #2
 8002224:	d1cb      	bne.n	80021be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800223c:	e028      	b.n	8002290 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f8aa 	bl	800239c <I2C_IsErrorOccurred>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e026      	b.n	80022a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002252:	f7ff f935 	bl	80014c0 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	429a      	cmp	r2, r3
 8002260:	d302      	bcc.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d113      	bne.n	8002290 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f043 0220 	orr.w	r2, r3, #32
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e007      	b.n	80022a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b20      	cmp	r3, #32
 800229c:	d1cf      	bne.n	800223e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022b4:	e064      	b.n	8002380 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f86e 	bl	800239c <I2C_IsErrorOccurred>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e062      	b.n	8002390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d138      	bne.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d105      	bne.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e04e      	b.n	8002390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d107      	bne.n	8002310 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2210      	movs	r2, #16
 8002306:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2204      	movs	r2, #4
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
 800230e:	e002      	b.n	8002316 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2220      	movs	r2, #32
 800231c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800232a:	400b      	ands	r3, r1
 800232c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e022      	b.n	8002390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7ff f8b9 	bl	80014c0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e007      	b.n	8002390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d193      	bne.n	80022b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	fe00e800 	.word	0xfe00e800

0800239c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d068      	beq.n	800249a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2210      	movs	r2, #16
 80023ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d0:	e049      	b.n	8002466 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d045      	beq.n	8002466 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7ff f871 	bl	80014c0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_IsErrorOccurred+0x54>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d13a      	bne.n	8002466 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002402:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002412:	d121      	bne.n	8002458 <I2C_IsErrorOccurred+0xbc>
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800241a:	d01d      	beq.n	8002458 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b20      	cmp	r3, #32
 8002420:	d01a      	beq.n	8002458 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002430:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002432:	f7ff f845 	bl	80014c0 <HAL_GetTick>
 8002436:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002438:	e00e      	b.n	8002458 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800243a:	f7ff f841 	bl	80014c0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b19      	cmp	r3, #25
 8002446:	d907      	bls.n	8002458 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	f043 0320 	orr.w	r3, r3, #32
 800244e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002456:	e006      	b.n	8002466 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b20      	cmp	r3, #32
 8002464:	d1e9      	bne.n	800243a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b20      	cmp	r3, #32
 8002472:	d003      	beq.n	800247c <I2C_IsErrorOccurred+0xe0>
 8002474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0aa      	beq.n	80023d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002500:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01c      	beq.n	800254a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff fde9 	bl	80020e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <I2C_IsErrorOccurred+0x1bc>)
 8002522:	400b      	ands	r3, r1
 8002524:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800254a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800254e:	4618      	mov	r0, r3
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	fe00e800 	.word	0xfe00e800

0800255c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	817b      	strh	r3, [r7, #10]
 800256a:	4613      	mov	r3, r2
 800256c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800256e:	897b      	ldrh	r3, [r7, #10]
 8002570:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002574:	7a7b      	ldrb	r3, [r7, #9]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800257c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	4313      	orrs	r3, r2
 8002586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800258a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	0d5b      	lsrs	r3, r3, #21
 8002596:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <I2C_TransferConfig+0x60>)
 800259c:	430b      	orrs	r3, r1
 800259e:	43db      	mvns	r3, r3
 80025a0:	ea02 0103 	and.w	r1, r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	03ff63ff 	.word	0x03ff63ff

080025c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d138      	bne.n	8002648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e032      	b.n	800264a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b20      	cmp	r3, #32
 800266a:	d139      	bne.n	80026e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002676:	2302      	movs	r3, #2
 8002678:	e033      	b.n	80026e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2224      	movs	r2, #36	; 0x24
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40007000 	.word	0x40007000

08002710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e291      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8087 	beq.w	8002842 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002734:	4b96      	ldr	r3, [pc, #600]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b04      	cmp	r3, #4
 800273e:	d00c      	beq.n	800275a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002740:	4b93      	ldr	r3, [pc, #588]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d112      	bne.n	8002772 <HAL_RCC_OscConfig+0x62>
 800274c:	4b90      	ldr	r3, [pc, #576]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002758:	d10b      	bne.n	8002772 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	4b8d      	ldr	r3, [pc, #564]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d06c      	beq.n	8002840 <HAL_RCC_OscConfig+0x130>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d168      	bne.n	8002840 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e26b      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x7a>
 800277c:	4b84      	ldr	r3, [pc, #528]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a83      	ldr	r2, [pc, #524]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e02e      	b.n	80027e8 <HAL_RCC_OscConfig+0xd8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x9c>
 8002792:	4b7f      	ldr	r3, [pc, #508]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7e      	ldr	r2, [pc, #504]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b7c      	ldr	r3, [pc, #496]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7b      	ldr	r2, [pc, #492]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e01d      	b.n	80027e8 <HAL_RCC_OscConfig+0xd8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0xc0>
 80027b6:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a75      	ldr	r2, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b73      	ldr	r3, [pc, #460]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a72      	ldr	r2, [pc, #456]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0xd8>
 80027d0:	4b6f      	ldr	r3, [pc, #444]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6e      	ldr	r2, [pc, #440]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6b      	ldr	r2, [pc, #428]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80027e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe fe66 	bl	80014c0 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f8:	f7fe fe62 	bl	80014c0 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e21f      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b61      	ldr	r3, [pc, #388]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe8>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fe52 	bl	80014c0 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe fe4e 	bl	80014c0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e20b      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	4b57      	ldr	r3, [pc, #348]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x110>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d069      	beq.n	8002922 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800284e:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285a:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b08      	cmp	r3, #8
 8002864:	d11c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x190>
 8002866:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d116      	bne.n	80028a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_RCC_OscConfig+0x17a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e1df      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288a:	4b41      	ldr	r3, [pc, #260]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	493d      	ldr	r1, [pc, #244]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	e040      	b.n	8002922 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d023      	beq.n	80028f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a38      	ldr	r2, [pc, #224]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fe04 	bl	80014c0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028bc:	f7fe fe00 	bl	80014c0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1bd      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4929      	ldr	r1, [pc, #164]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
 80028ee:	e018      	b.n	8002922 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a26      	ldr	r2, [pc, #152]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fde0 	bl	80014c0 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002904:	f7fe fddc 	bl	80014c0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e199      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d038      	beq.n	80029a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d019      	beq.n	800296a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293a:	4a15      	ldr	r2, [pc, #84]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe fdbd 	bl	80014c0 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe fdb9 	bl	80014c0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e176      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x23a>
 8002968:	e01a      	b.n	80029a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <HAL_RCC_OscConfig+0x280>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fda3 	bl	80014c0 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe fd9f 	bl	80014c0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d903      	bls.n	8002994 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e15c      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
 8002990:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	4b91      	ldr	r3, [pc, #580]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ee      	bne.n	800297e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a4 	beq.w	8002af6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ae:	4b8b      	ldr	r3, [pc, #556]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a87      	ldr	r2, [pc, #540]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b85      	ldr	r3, [pc, #532]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d6:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <HAL_RCC_OscConfig+0x4d0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029e2:	4b7f      	ldr	r3, [pc, #508]	; (8002be0 <HAL_RCC_OscConfig+0x4d0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7e      	ldr	r2, [pc, #504]	; (8002be0 <HAL_RCC_OscConfig+0x4d0>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fd67 	bl	80014c0 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fe fd63 	bl	80014c0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b64      	cmp	r3, #100	; 0x64
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e120      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a08:	4b75      	ldr	r3, [pc, #468]	; (8002be0 <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x31a>
 8002a1c:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a6e      	ldr	r2, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	e02d      	b.n	8002a86 <HAL_RCC_OscConfig+0x376>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x33c>
 8002a32:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a66      	ldr	r2, [pc, #408]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	e01c      	b.n	8002a86 <HAL_RCC_OscConfig+0x376>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d10c      	bne.n	8002a6e <HAL_RCC_OscConfig+0x35e>
 8002a54:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	4a60      	ldr	r2, [pc, #384]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a60:	4b5e      	ldr	r3, [pc, #376]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6c:	e00b      	b.n	8002a86 <HAL_RCC_OscConfig+0x376>
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a5a      	ldr	r2, [pc, #360]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	4a57      	ldr	r2, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002a80:	f023 0304 	bic.w	r3, r3, #4
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d015      	beq.n	8002aba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fd17 	bl	80014c0 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe fd13 	bl	80014c0 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0ce      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ee      	beq.n	8002a96 <HAL_RCC_OscConfig+0x386>
 8002ab8:	e014      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aba:	f7fe fd01 	bl	80014c0 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fe fcfd 	bl	80014c0 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad8:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ee      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aea:	4b3c      	ldr	r3, [pc, #240]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80a4 	beq.w	8002c48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b00:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d06b      	beq.n	8002be4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d149      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fcce 	bl	80014c0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fcca 	bl	80014c0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e087      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	019b      	lsls	r3, r3, #6
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fc9e 	bl	80014c0 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fc9a 	bl	80014c0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e057      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x478>
 8002ba6:	e04f      	b.n	8002c48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fc84 	bl	80014c0 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fc80 	bl	80014c0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e03d      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bce:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4ac>
 8002bda:	e035      	b.n	8002c48 <HAL_RCC_OscConfig+0x538>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x544>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d121      	bne.n	8002c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d11a      	bne.n	8002c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d111      	bne.n	8002c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d0      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d910      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b67      	ldr	r3, [pc, #412]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 020f 	bic.w	r2, r3, #15
 8002c86:	4965      	ldr	r1, [pc, #404]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b8      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb8:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd0:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a52      	ldr	r2, [pc, #328]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	494d      	ldr	r1, [pc, #308]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d040      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d115      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e07f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e073      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06b      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4936      	ldr	r1, [pc, #216]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fbb8 	bl	80014c0 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe fbb4 	bl	80014c0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e053      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d210      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 020f 	bic.w	r2, r3, #15
 8002d92:	4922      	ldr	r1, [pc, #136]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e032      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4916      	ldr	r1, [pc, #88]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	490e      	ldr	r1, [pc, #56]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dea:	f000 f821 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	490a      	ldr	r1, [pc, #40]	; (8002e24 <HAL_RCC_ClockConfig+0x1cc>)
 8002dfc:	5ccb      	ldrb	r3, [r1, r3]
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <HAL_RCC_ClockConfig+0x1d0>)
 8002e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_ClockConfig+0x1d4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fb14 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023c00 	.word	0x40023c00
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08006900 	.word	0x08006900
 8002e28:	20000034 	.word	0x20000034
 8002e2c:	20000038 	.word	0x20000038

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b094      	sub	sp, #80	; 0x50
 8002e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	2300      	movs	r3, #0
 8002e42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e48:	4b79      	ldr	r3, [pc, #484]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d00d      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x40>
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	f200 80e1 	bhi.w	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e62:	e0db      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e68:	e0db      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e6e:	e0d8      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e70:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	0159      	lsls	r1, r3, #5
 8002eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb4:	0150      	lsls	r0, r2, #5
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4621      	mov	r1, r4
 8002ebc:	1a51      	subs	r1, r2, r1
 8002ebe:	6139      	str	r1, [r7, #16]
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	018b      	lsls	r3, r1, #6
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ede:	4651      	mov	r1, sl
 8002ee0:	018a      	lsls	r2, r1, #6
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee8:	4659      	mov	r1, fp
 8002eea:	eb63 0901 	sbc.w	r9, r3, r1
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	eb18 0303 	adds.w	r3, r8, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	462b      	mov	r3, r5
 8002f10:	eb49 0303 	adc.w	r3, r9, r3
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f22:	4629      	mov	r1, r5
 8002f24:	024b      	lsls	r3, r1, #9
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	024a      	lsls	r2, r1, #9
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f36:	2200      	movs	r2, #0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f40:	f7fd f9be 	bl	80002c0 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f4c:	e058      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b38      	ldr	r3, [pc, #224]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	4611      	mov	r1, r2
 8002f5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	0159      	lsls	r1, r3, #5
 8002f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7a:	0150      	lsls	r0, r2, #5
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4641      	mov	r1, r8
 8002f82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f86:	4649      	mov	r1, r9
 8002f88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fa0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	00eb      	lsls	r3, r5, #3
 8002fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb6:	00e2      	lsls	r2, r4, #3
 8002fb8:	4614      	mov	r4, r2
 8002fba:	461d      	mov	r5, r3
 8002fbc:	4643      	mov	r3, r8
 8002fbe:	18e3      	adds	r3, r4, r3
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	eb45 0303 	adc.w	r3, r5, r3
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	028b      	lsls	r3, r1, #10
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	028a      	lsls	r2, r1, #10
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff4:	f7fd f964 	bl	80002c0 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	3301      	adds	r3, #1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003024:	4618      	mov	r0, r3
 8003026:	3750      	adds	r7, #80	; 0x50
 8003028:	46bd      	mov	sp, r7
 800302a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200

0800303c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCC_GetHCLKFreq+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000034 	.word	0x20000034

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003058:	f7ff fff0 	bl	800303c <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	0a9b      	lsrs	r3, r3, #10
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	08006910 	.word	0x08006910

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003080:	f7ff ffdc 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0b5b      	lsrs	r3, r3, #13
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	08006910 	.word	0x08006910

080030a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030cc:	4b69      	ldr	r3, [pc, #420]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a68      	ldr	r2, [pc, #416]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030d6:	6093      	str	r3, [r2, #8]
 80030d8:	4b66      	ldr	r3, [pc, #408]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	4964      	ldr	r1, [pc, #400]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d017      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030fe:	4b5d      	ldr	r3, [pc, #372]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	4959      	ldr	r1, [pc, #356]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311c:	d101      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d017      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800313a:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	494a      	ldr	r1, [pc, #296]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003158:	d101      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800315a:	2301      	movs	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 808b 	beq.w	800329e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	4a39      	ldr	r2, [pc, #228]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	6413      	str	r3, [r2, #64]	; 0x40
 8003194:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031a0:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a34      	ldr	r2, [pc, #208]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7fe f988 	bl	80014c0 <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fe f984 	bl	80014c0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e357      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031c6:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d035      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d02e      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d114      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe f94c 	bl	80014c0 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fe f948 	bl	80014c0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e319      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ee      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325a:	d111      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800326a:	400b      	ands	r3, r1
 800326c:	4901      	ldr	r1, [pc, #4]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
 8003272:	e00b      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000
 800327c:	0ffffcff 	.word	0x0ffffcff
 8003280:	4baa      	ldr	r3, [pc, #680]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4aa9      	ldr	r2, [pc, #676]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003286:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800328a:	6093      	str	r3, [r2, #8]
 800328c:	4ba7      	ldr	r3, [pc, #668]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	49a4      	ldr	r1, [pc, #656]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329a:	4313      	orrs	r3, r2
 800329c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032aa:	4ba0      	ldr	r3, [pc, #640]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b0:	4a9e      	ldr	r2, [pc, #632]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032ba:	4b9c      	ldr	r3, [pc, #624]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	4999      	ldr	r1, [pc, #612]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d8:	4b94      	ldr	r3, [pc, #592]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e6:	4991      	ldr	r1, [pc, #580]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fa:	4b8c      	ldr	r3, [pc, #560]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	4988      	ldr	r1, [pc, #544]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800331c:	4b83      	ldr	r3, [pc, #524]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332a:	4980      	ldr	r1, [pc, #512]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800333e:	4b7b      	ldr	r3, [pc, #492]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4977      	ldr	r1, [pc, #476]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003360:	4b72      	ldr	r3, [pc, #456]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	496f      	ldr	r1, [pc, #444]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003382:	4b6a      	ldr	r3, [pc, #424]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f023 020c 	bic.w	r2, r3, #12
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003390:	4966      	ldr	r1, [pc, #408]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a4:	4b61      	ldr	r3, [pc, #388]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	495e      	ldr	r1, [pc, #376]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c6:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	4955      	ldr	r1, [pc, #340]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e8:	4b50      	ldr	r3, [pc, #320]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	494d      	ldr	r1, [pc, #308]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800340a:	4b48      	ldr	r3, [pc, #288]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	4944      	ldr	r1, [pc, #272]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800342c:	4b3f      	ldr	r3, [pc, #252]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	493c      	ldr	r1, [pc, #240]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	4933      	ldr	r1, [pc, #204]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003470:	4b2e      	ldr	r3, [pc, #184]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800347e:	492b      	ldr	r1, [pc, #172]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d011      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a0:	4922      	ldr	r1, [pc, #136]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034b0:	d101      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e0:	4912      	ldr	r1, [pc, #72]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003504:	4909      	ldr	r1, [pc, #36]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d006      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80d9 	beq.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a01      	ldr	r2, [pc, #4]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800352c:	40023800 	.word	0x40023800
 8003530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003532:	f7fd ffc5 	bl	80014c0 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003538:	e008      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800353a:	f7fd ffc1 	bl	80014c0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b64      	cmp	r3, #100	; 0x64
 8003546:	d901      	bls.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e194      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800354c:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d021      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11d      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800356c:	4b64      	ldr	r3, [pc, #400]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003580:	0e1b      	lsrs	r3, r3, #24
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	019a      	lsls	r2, r3, #6
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	431a      	orrs	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	071b      	lsls	r3, r3, #28
 80035a0:	4957      	ldr	r1, [pc, #348]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d02e      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d2:	d129      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035d4:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035da:	0c1b      	lsrs	r3, r3, #16
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e8:	0f1b      	lsrs	r3, r3, #28
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	019a      	lsls	r2, r3, #6
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	071b      	lsls	r3, r3, #28
 8003608:	493d      	ldr	r1, [pc, #244]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003610:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003616:	f023 021f 	bic.w	r2, r3, #31
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	3b01      	subs	r3, #1
 8003620:	4937      	ldr	r1, [pc, #220]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01d      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003634:	4b32      	ldr	r3, [pc, #200]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363a:	0e1b      	lsrs	r3, r3, #24
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003642:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003648:	0f1b      	lsrs	r3, r3, #28
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	019a      	lsls	r2, r3, #6
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	041b      	lsls	r3, r3, #16
 800365c:	431a      	orrs	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	431a      	orrs	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	071b      	lsls	r3, r3, #28
 8003668:	4925      	ldr	r1, [pc, #148]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d011      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	019a      	lsls	r2, r3, #6
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	041b      	lsls	r3, r3, #16
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	061b      	lsls	r3, r3, #24
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	071b      	lsls	r3, r3, #28
 8003698:	4919      	ldr	r1, [pc, #100]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a16      	ldr	r2, [pc, #88]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ac:	f7fd ff08 	bl	80014c0 <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036b4:	f7fd ff04 	bl	80014c0 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0d7      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	f040 80cd 	bne.w	8003874 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e6:	f7fd feeb 	bl	80014c0 <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036ee:	f7fd fee7 	bl	80014c0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b64      	cmp	r3, #100	; 0x64
 80036fa:	d903      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0ba      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003700:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003704:	4b5e      	ldr	r3, [pc, #376]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800370c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003710:	d0ed      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800372e:	2b00      	cmp	r3, #0
 8003730:	d02e      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d12a      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800373a:	4b51      	ldr	r3, [pc, #324]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003748:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	0f1b      	lsrs	r3, r3, #28
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	019a      	lsls	r2, r3, #6
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	061b      	lsls	r3, r3, #24
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	071b      	lsls	r3, r3, #28
 800376e:	4944      	ldr	r1, [pc, #272]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003776:	4b42      	ldr	r3, [pc, #264]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800377c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	493d      	ldr	r1, [pc, #244]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d022      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037a4:	d11d      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	0e1b      	lsrs	r3, r3, #24
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037b4:	4b32      	ldr	r3, [pc, #200]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	0f1b      	lsrs	r3, r3, #28
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	019a      	lsls	r2, r3, #6
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	431a      	orrs	r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	061b      	lsls	r3, r3, #24
 80037d4:	431a      	orrs	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	071b      	lsls	r3, r3, #28
 80037da:	4929      	ldr	r1, [pc, #164]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d028      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	0e1b      	lsrs	r3, r3, #24
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037fc:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	019a      	lsls	r2, r3, #6
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	431a      	orrs	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	071b      	lsls	r3, r3, #28
 8003822:	4917      	ldr	r1, [pc, #92]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800382c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4911      	ldr	r1, [pc, #68]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fd fe38 	bl	80014c0 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003854:	f7fd fe34 	bl	80014c0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e007      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800386e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003872:	d1ef      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800

08003884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e049      	b.n	800392a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fc44 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f000 fcc0 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e049      	b.n	80039d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f841 	bl	80039e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f000 fc69 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_TIM_PWM_Start+0x24>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e03c      	b.n	8003a92 <HAL_TIM_PWM_Start+0x9e>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d109      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x3e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e02f      	b.n	8003a92 <HAL_TIM_PWM_Start+0x9e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d109      	bne.n	8003a4c <HAL_TIM_PWM_Start+0x58>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e022      	b.n	8003a92 <HAL_TIM_PWM_Start+0x9e>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d109      	bne.n	8003a66 <HAL_TIM_PWM_Start+0x72>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	bf14      	ite	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	2300      	moveq	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	e015      	b.n	8003a92 <HAL_TIM_PWM_Start+0x9e>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d109      	bne.n	8003a80 <HAL_TIM_PWM_Start+0x8c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	e008      	b.n	8003a92 <HAL_TIM_PWM_Start+0x9e>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e092      	b.n	8003bc0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_PWM_Start+0xb6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa8:	e023      	b.n	8003af2 <HAL_TIM_PWM_Start+0xfe>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_PWM_Start+0xc6>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab8:	e01b      	b.n	8003af2 <HAL_TIM_PWM_Start+0xfe>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Start+0xd6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac8:	e013      	b.n	8003af2 <HAL_TIM_PWM_Start+0xfe>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Start+0xe6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ad8:	e00b      	b.n	8003af2 <HAL_TIM_PWM_Start+0xfe>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start+0xf6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ae8:	e003      	b.n	8003af2 <HAL_TIM_PWM_Start+0xfe>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	6839      	ldr	r1, [r7, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 ff3c 	bl	8004978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a30      	ldr	r2, [pc, #192]	; (8003bc8 <HAL_TIM_PWM_Start+0x1d4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x120>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2f      	ldr	r2, [pc, #188]	; (8003bcc <HAL_TIM_PWM_Start+0x1d8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <HAL_TIM_PWM_Start+0x124>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_TIM_PWM_Start+0x126>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <HAL_TIM_PWM_Start+0x1d4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x18a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d01d      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x18a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_TIM_PWM_Start+0x1dc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x18a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_TIM_PWM_Start+0x1e0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x18a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_TIM_PWM_Start+0x1e4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x18a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <HAL_TIM_PWM_Start+0x1d8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x18a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <HAL_TIM_PWM_Start+0x1e8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x18a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_TIM_PWM_Start+0x1ec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d115      	bne.n	8003baa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_TIM_PWM_Start+0x1f0>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b06      	cmp	r3, #6
 8003b8e:	d015      	beq.n	8003bbc <HAL_TIM_PWM_Start+0x1c8>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b96:	d011      	beq.n	8003bbc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	e008      	b.n	8003bbc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0201 	orr.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e000      	b.n	8003bbe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	40010400 	.word	0x40010400
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40001800 	.word	0x40001800
 8003be4:	00010007 	.word	0x00010007

08003be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d122      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0202 	mvn.w	r2, #2
 8003c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 faee 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fae0 	bl	80041f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 faf1 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d122      	bne.n	8003c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0204 	mvn.w	r2, #4
 8003c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fac4 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fab6 	bl	80041f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fac7 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d122      	bne.n	8003cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d11b      	bne.n	8003cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0208 	mvn.w	r2, #8
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa9a 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fa8c 	bl	80041f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fa9d 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d122      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d11b      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0210 	mvn.w	r2, #16
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2208      	movs	r2, #8
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa70 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa62 	bl	80041f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fa73 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0201 	mvn.w	r2, #1
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa3c 	bl	80041e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b80      	cmp	r3, #128	; 0x80
 8003d78:	d10e      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 feae 	bl	8004af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da6:	d10e      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b80      	cmp	r3, #128	; 0x80
 8003db4:	d107      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fea1 	bl	8004b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d10e      	bne.n	8003df2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d107      	bne.n	8003df2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fa21 	bl	8004234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d10e      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f06f 0220 	mvn.w	r2, #32
 8003e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fe61 	bl	8004ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e0ff      	b.n	8004046 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b14      	cmp	r3, #20
 8003e52:	f200 80f0 	bhi.w	8004036 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003eb1 	.word	0x08003eb1
 8003e60:	08004037 	.word	0x08004037
 8003e64:	08004037 	.word	0x08004037
 8003e68:	08004037 	.word	0x08004037
 8003e6c:	08003ef1 	.word	0x08003ef1
 8003e70:	08004037 	.word	0x08004037
 8003e74:	08004037 	.word	0x08004037
 8003e78:	08004037 	.word	0x08004037
 8003e7c:	08003f33 	.word	0x08003f33
 8003e80:	08004037 	.word	0x08004037
 8003e84:	08004037 	.word	0x08004037
 8003e88:	08004037 	.word	0x08004037
 8003e8c:	08003f73 	.word	0x08003f73
 8003e90:	08004037 	.word	0x08004037
 8003e94:	08004037 	.word	0x08004037
 8003e98:	08004037 	.word	0x08004037
 8003e9c:	08003fb5 	.word	0x08003fb5
 8003ea0:	08004037 	.word	0x08004037
 8003ea4:	08004037 	.word	0x08004037
 8003ea8:	08004037 	.word	0x08004037
 8003eac:	08003ff5 	.word	0x08003ff5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fa66 	bl	8004388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0208 	orr.w	r2, r2, #8
 8003eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0204 	bic.w	r2, r2, #4
 8003eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6999      	ldr	r1, [r3, #24]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	619a      	str	r2, [r3, #24]
      break;
 8003eee:	e0a5      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fab8 	bl	800446c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6999      	ldr	r1, [r3, #24]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	619a      	str	r2, [r3, #24]
      break;
 8003f30:	e084      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fb0f 	bl	800455c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0208 	orr.w	r2, r2, #8
 8003f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0204 	bic.w	r2, r2, #4
 8003f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69d9      	ldr	r1, [r3, #28]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	61da      	str	r2, [r3, #28]
      break;
 8003f70:	e064      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fb65 	bl	8004648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69d9      	ldr	r1, [r3, #28]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	021a      	lsls	r2, r3, #8
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	61da      	str	r2, [r3, #28]
      break;
 8003fb2:	e043      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb9c 	bl	80046f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0208 	orr.w	r2, r2, #8
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0204 	bic.w	r2, r2, #4
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ff2:	e023      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fbce 	bl	800479c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004034:	e002      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]
      break;
 800403a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop

08004050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_TIM_ConfigClockSource+0x1c>
 8004068:	2302      	movs	r3, #2
 800406a:	e0b4      	b.n	80041d6 <HAL_TIM_ConfigClockSource+0x186>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	4b56      	ldr	r3, [pc, #344]	; (80041e0 <HAL_TIM_ConfigClockSource+0x190>)
 8004088:	4013      	ands	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	d03e      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0xd4>
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040aa:	f200 8087 	bhi.w	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	f000 8086 	beq.w	80041c2 <HAL_TIM_ConfigClockSource+0x172>
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d87f      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040bc:	2b70      	cmp	r3, #112	; 0x70
 80040be:	d01a      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0xa6>
 80040c0:	2b70      	cmp	r3, #112	; 0x70
 80040c2:	d87b      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d050      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x11a>
 80040c8:	2b60      	cmp	r3, #96	; 0x60
 80040ca:	d877      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b50      	cmp	r3, #80	; 0x50
 80040ce:	d03c      	beq.n	800414a <HAL_TIM_ConfigClockSource+0xfa>
 80040d0:	2b50      	cmp	r3, #80	; 0x50
 80040d2:	d873      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d058      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x13a>
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d86f      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b30      	cmp	r3, #48	; 0x30
 80040de:	d064      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040e0:	2b30      	cmp	r3, #48	; 0x30
 80040e2:	d86b      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d060      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d867      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05c      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d05a      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040f4:	e062      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f000 fc17 	bl	8004938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	609a      	str	r2, [r3, #8]
      break;
 8004122:	e04f      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f000 fc00 	bl	8004938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004146:	609a      	str	r2, [r3, #8]
      break;
 8004148:	e03c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	461a      	mov	r2, r3
 8004158:	f000 fb74 	bl	8004844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2150      	movs	r1, #80	; 0x50
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fbcd 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004168:	e02c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	461a      	mov	r2, r3
 8004178:	f000 fb93 	bl	80048a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2160      	movs	r1, #96	; 0x60
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fbbd 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004188:	e01c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	461a      	mov	r2, r3
 8004198:	f000 fb54 	bl	8004844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fbad 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80041a8:	e00c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f000 fba4 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80041ba:	e003      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      break;
 80041c0:	e000      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	fffeff88 	.word	0xfffeff88

080041e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a40      	ldr	r2, [pc, #256]	; (800435c <TIM_Base_SetConfig+0x114>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004266:	d00f      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a3d      	ldr	r2, [pc, #244]	; (8004360 <TIM_Base_SetConfig+0x118>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00b      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a3c      	ldr	r2, [pc, #240]	; (8004364 <TIM_Base_SetConfig+0x11c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a3b      	ldr	r2, [pc, #236]	; (8004368 <TIM_Base_SetConfig+0x120>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a3a      	ldr	r2, [pc, #232]	; (800436c <TIM_Base_SetConfig+0x124>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d108      	bne.n	800429a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2f      	ldr	r2, [pc, #188]	; (800435c <TIM_Base_SetConfig+0x114>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d02b      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d027      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a2c      	ldr	r2, [pc, #176]	; (8004360 <TIM_Base_SetConfig+0x118>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d023      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a2b      	ldr	r2, [pc, #172]	; (8004364 <TIM_Base_SetConfig+0x11c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01f      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <TIM_Base_SetConfig+0x120>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01b      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a29      	ldr	r2, [pc, #164]	; (800436c <TIM_Base_SetConfig+0x124>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d017      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a28      	ldr	r2, [pc, #160]	; (8004370 <TIM_Base_SetConfig+0x128>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <TIM_Base_SetConfig+0x12c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00f      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a26      	ldr	r2, [pc, #152]	; (8004378 <TIM_Base_SetConfig+0x130>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00b      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a25      	ldr	r2, [pc, #148]	; (800437c <TIM_Base_SetConfig+0x134>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d007      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a24      	ldr	r2, [pc, #144]	; (8004380 <TIM_Base_SetConfig+0x138>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d003      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a23      	ldr	r2, [pc, #140]	; (8004384 <TIM_Base_SetConfig+0x13c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d108      	bne.n	800430c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <TIM_Base_SetConfig+0x114>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_Base_SetConfig+0xf8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0c      	ldr	r2, [pc, #48]	; (800436c <TIM_Base_SetConfig+0x124>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d103      	bne.n	8004348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	615a      	str	r2, [r3, #20]
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40010000 	.word	0x40010000
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40010400 	.word	0x40010400
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800
 800437c:	40001800 	.word	0x40001800
 8004380:	40001c00 	.word	0x40001c00
 8004384:	40002000 	.word	0x40002000

08004388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <TIM_OC1_SetConfig+0xd8>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0303 	bic.w	r3, r3, #3
 80043be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f023 0302 	bic.w	r3, r3, #2
 80043d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a21      	ldr	r2, [pc, #132]	; (8004464 <TIM_OC1_SetConfig+0xdc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC1_SetConfig+0x64>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a20      	ldr	r2, [pc, #128]	; (8004468 <TIM_OC1_SetConfig+0xe0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10c      	bne.n	8004406 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0308 	bic.w	r3, r3, #8
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <TIM_OC1_SetConfig+0xdc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_OC1_SetConfig+0x8e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <TIM_OC1_SetConfig+0xe0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d111      	bne.n	800443a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	fffeff8f 	.word	0xfffeff8f
 8004464:	40010000 	.word	0x40010000
 8004468:	40010400 	.word	0x40010400

0800446c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0210 	bic.w	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <TIM_OC2_SetConfig+0xe4>)
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f023 0320 	bic.w	r3, r3, #32
 80044b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a23      	ldr	r2, [pc, #140]	; (8004554 <TIM_OC2_SetConfig+0xe8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_OC2_SetConfig+0x68>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a22      	ldr	r2, [pc, #136]	; (8004558 <TIM_OC2_SetConfig+0xec>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10d      	bne.n	80044f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a18      	ldr	r2, [pc, #96]	; (8004554 <TIM_OC2_SetConfig+0xe8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_OC2_SetConfig+0x94>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a17      	ldr	r2, [pc, #92]	; (8004558 <TIM_OC2_SetConfig+0xec>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d113      	bne.n	8004528 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800450e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	feff8fff 	.word	0xfeff8fff
 8004554:	40010000 	.word	0x40010000
 8004558:	40010400 	.word	0x40010400

0800455c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4b2d      	ldr	r3, [pc, #180]	; (800463c <TIM_OC3_SetConfig+0xe0>)
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <TIM_OC3_SetConfig+0xe4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC3_SetConfig+0x66>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a21      	ldr	r2, [pc, #132]	; (8004644 <TIM_OC3_SetConfig+0xe8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10d      	bne.n	80045de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <TIM_OC3_SetConfig+0xe4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_OC3_SetConfig+0x92>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a16      	ldr	r2, [pc, #88]	; (8004644 <TIM_OC3_SetConfig+0xe8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d113      	bne.n	8004616 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	fffeff8f 	.word	0xfffeff8f
 8004640:	40010000 	.word	0x40010000
 8004644:	40010400 	.word	0x40010400

08004648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <TIM_OC4_SetConfig+0xa4>)
 8004674:	4013      	ands	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	031b      	lsls	r3, r3, #12
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <TIM_OC4_SetConfig+0xa8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC4_SetConfig+0x68>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <TIM_OC4_SetConfig+0xac>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d109      	bne.n	80046c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	feff8fff 	.word	0xfeff8fff
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40010400 	.word	0x40010400

080046f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <TIM_OC5_SetConfig+0x98>)
 8004724:	4013      	ands	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a12      	ldr	r2, [pc, #72]	; (8004794 <TIM_OC5_SetConfig+0x9c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_OC5_SetConfig+0x5e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a11      	ldr	r2, [pc, #68]	; (8004798 <TIM_OC5_SetConfig+0xa0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d109      	bne.n	800476a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	621a      	str	r2, [r3, #32]
}
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	fffeff8f 	.word	0xfffeff8f
 8004794:	40010000 	.word	0x40010000
 8004798:	40010400 	.word	0x40010400

0800479c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <TIM_OC6_SetConfig+0x9c>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	051b      	lsls	r3, r3, #20
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a13      	ldr	r2, [pc, #76]	; (800483c <TIM_OC6_SetConfig+0xa0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_OC6_SetConfig+0x60>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a12      	ldr	r2, [pc, #72]	; (8004840 <TIM_OC6_SetConfig+0xa4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d109      	bne.n	8004810 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	029b      	lsls	r3, r3, #10
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	feff8fff 	.word	0xfeff8fff
 800483c:	40010000 	.word	0x40010000
 8004840:	40010400 	.word	0x40010400

08004844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 030a 	bic.w	r3, r3, #10
 8004880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0210 	bic.w	r2, r3, #16
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 0307 	orr.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	431a      	orrs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2201      	movs	r2, #1
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	43db      	mvns	r3, r3
 800499a:	401a      	ands	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1a      	ldr	r2, [r3, #32]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d8:	2302      	movs	r3, #2
 80049da:	e06d      	b.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a30      	ldr	r2, [pc, #192]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d022      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d01d      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d018      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d013      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00e      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a15      	ldr	r2, [pc, #84]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40001800 	.word	0x40001800

08004ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e040      	b.n	8004bb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc fbdc 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fbe2 	bl	8005324 <UART_SetConfig>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e022      	b.n	8004bb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fe3a 	bl	80057ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fec1 	bl	8005930 <UART_CheckIdleState>
 8004bae:	4603      	mov	r3, r0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	f040 80b1 	bne.w	8004d36 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_UART_Receive+0x28>
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0a9      	b.n	8004d38 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2222      	movs	r2, #34	; 0x22
 8004bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bfa:	f7fc fc61 	bl	80014c0 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d10e      	bne.n	8004c38 <HAL_UART_Receive+0x80>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <HAL_UART_Receive+0x76>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c2c:	e02d      	b.n	8004c8a <HAL_UART_Receive+0xd2>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	22ff      	movs	r2, #255	; 0xff
 8004c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c36:	e028      	b.n	8004c8a <HAL_UART_Receive+0xd2>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10d      	bne.n	8004c5c <HAL_UART_Receive+0xa4>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_UART_Receive+0x9a>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	22ff      	movs	r2, #255	; 0xff
 8004c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c50:	e01b      	b.n	8004c8a <HAL_UART_Receive+0xd2>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	227f      	movs	r2, #127	; 0x7f
 8004c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c5a:	e016      	b.n	8004c8a <HAL_UART_Receive+0xd2>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c64:	d10d      	bne.n	8004c82 <HAL_UART_Receive+0xca>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d104      	bne.n	8004c78 <HAL_UART_Receive+0xc0>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	227f      	movs	r2, #127	; 0x7f
 8004c72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c76:	e008      	b.n	8004c8a <HAL_UART_Receive+0xd2>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	223f      	movs	r2, #63	; 0x3f
 8004c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c80:	e003      	b.n	8004c8a <HAL_UART_Receive+0xd2>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c90:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d108      	bne.n	8004cae <HAL_UART_Receive+0xf6>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d104      	bne.n	8004cae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e003      	b.n	8004cb6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004cb6:	e032      	b.n	8004d1e <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2120      	movs	r1, #32
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fe6b 	bl	800599e <UART_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e032      	b.n	8004d38 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	8a7b      	ldrh	r3, [r7, #18]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	3302      	adds	r3, #2
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e00c      	b.n	8004d0c <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	8a7b      	ldrh	r3, [r7, #18]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	4013      	ands	r3, r2
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1c6      	bne.n	8004cb8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e000      	b.n	8004d38 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b0ba      	sub	sp, #232	; 0xe8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d6e:	4013      	ands	r3, r2
 8004d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d115      	bne.n	8004da8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00f      	beq.n	8004da8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d009      	beq.n	8004da8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8297 	beq.w	80052cc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
      }
      return;
 8004da6:	e291      	b.n	80052cc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8117 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004dc2:	4b85      	ldr	r3, [pc, #532]	; (8004fd8 <HAL_UART_IRQHandler+0x298>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 810a 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d011      	beq.n	8004dfc <HAL_UART_IRQHandler+0xbc>
 8004dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2201      	movs	r2, #1
 8004dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df2:	f043 0201 	orr.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d011      	beq.n	8004e2c <HAL_UART_IRQHandler+0xec>
 8004e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d011      	beq.n	8004e5c <HAL_UART_IRQHandler+0x11c>
 8004e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e52:	f043 0202 	orr.w	r2, r3, #2
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d017      	beq.n	8004e98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00b      	beq.n	8004e98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2208      	movs	r2, #8
 8004e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8e:	f043 0208 	orr.w	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d012      	beq.n	8004eca <HAL_UART_IRQHandler+0x18a>
 8004ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 81fd 	beq.w	80052d0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d005      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04f      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fe01 	bl	8005b2a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d141      	bne.n	8004fba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1d9      	bne.n	8004f36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8e:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <HAL_UART_IRQHandler+0x29c>)
 8004f90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc fc1f 	bl	80017da <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d017      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e00f      	b.n	8004fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9a0 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e00b      	b.n	8004fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f99c 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e007      	b.n	8004fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f998 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004fd0:	e17e      	b.n	80052d0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd2:	bf00      	nop
    return;
 8004fd4:	e17c      	b.n	80052d0 <HAL_UART_IRQHandler+0x590>
 8004fd6:	bf00      	nop
 8004fd8:	04000120 	.word	0x04000120
 8004fdc:	08005bf3 	.word	0x08005bf3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	f040 814c 	bne.w	8005282 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8145 	beq.w	8005282 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 813e 	beq.w	8005282 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2210      	movs	r2, #16
 800500c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	f040 80b6 	bne.w	800518a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800502a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8150 	beq.w	80052d4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800503a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800503e:	429a      	cmp	r2, r3
 8005040:	f080 8148 	bcs.w	80052d4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800504a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005058:	f000 8086 	beq.w	8005168 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005086:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800508a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005092:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800509e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1da      	bne.n	800505c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3308      	adds	r3, #8
 80050ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e1      	bne.n	80050a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005106:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005108:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800510c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e3      	bne.n	80050e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005138:	f023 0310 	bic.w	r3, r3, #16
 800513c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800514a:	65bb      	str	r3, [r7, #88]	; 0x58
 800514c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e4      	bne.n	8005128 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005162:	4618      	mov	r0, r3
 8005164:	f7fc fac9 	bl	80016fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800517a:	b29b      	uxth	r3, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8c2 	bl	800530c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005188:	e0a4      	b.n	80052d4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005196:	b29b      	uxth	r3, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8096 	beq.w	80052d8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80051ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8091 	beq.w	80052d8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051d8:	647b      	str	r3, [r7, #68]	; 0x44
 80051da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e4      	bne.n	80051b6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	623b      	str	r3, [r7, #32]
   return(result);
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005210:	633a      	str	r2, [r7, #48]	; 0x30
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e3      	bne.n	80051ec <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	60fb      	str	r3, [r7, #12]
   return(result);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f023 0310 	bic.w	r3, r3, #16
 800524c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	69b9      	ldr	r1, [r7, #24]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	617b      	str	r3, [r7, #20]
   return(result);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e4      	bne.n	8005238 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f846 	bl	800530c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005280:	e02a      	b.n	80052d8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800528e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01c      	beq.n	80052dc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
    }
    return;
 80052aa:	e017      	b.n	80052dc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d012      	beq.n	80052de <HAL_UART_IRQHandler+0x59e>
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00c      	beq.n	80052de <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fcaa 	bl	8005c1e <UART_EndTransmit_IT>
    return;
 80052ca:	e008      	b.n	80052de <HAL_UART_IRQHandler+0x59e>
      return;
 80052cc:	bf00      	nop
 80052ce:	e006      	b.n	80052de <HAL_UART_IRQHandler+0x59e>
    return;
 80052d0:	bf00      	nop
 80052d2:	e004      	b.n	80052de <HAL_UART_IRQHandler+0x59e>
      return;
 80052d4:	bf00      	nop
 80052d6:	e002      	b.n	80052de <HAL_UART_IRQHandler+0x59e>
      return;
 80052d8:	bf00      	nop
 80052da:	e000      	b.n	80052de <HAL_UART_IRQHandler+0x59e>
    return;
 80052dc:	bf00      	nop
  }

}
 80052de:	37e8      	adds	r7, #232	; 0xe8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4ba6      	ldr	r3, [pc, #664]	; (80055e8 <UART_SetConfig+0x2c4>)
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	6979      	ldr	r1, [r7, #20]
 8005358:	430b      	orrs	r3, r1
 800535a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	430a      	orrs	r2, r1
 8005394:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a94      	ldr	r2, [pc, #592]	; (80055ec <UART_SetConfig+0x2c8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d120      	bne.n	80053e2 <UART_SetConfig+0xbe>
 80053a0:	4b93      	ldr	r3, [pc, #588]	; (80055f0 <UART_SetConfig+0x2cc>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d816      	bhi.n	80053dc <UART_SetConfig+0xb8>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <UART_SetConfig+0x90>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	080053cb 	.word	0x080053cb
 80053c0:	080053d7 	.word	0x080053d7
 80053c4:	2301      	movs	r3, #1
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e150      	b.n	800566c <UART_SetConfig+0x348>
 80053ca:	2302      	movs	r3, #2
 80053cc:	77fb      	strb	r3, [r7, #31]
 80053ce:	e14d      	b.n	800566c <UART_SetConfig+0x348>
 80053d0:	2304      	movs	r3, #4
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e14a      	b.n	800566c <UART_SetConfig+0x348>
 80053d6:	2308      	movs	r3, #8
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e147      	b.n	800566c <UART_SetConfig+0x348>
 80053dc:	2310      	movs	r3, #16
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e144      	b.n	800566c <UART_SetConfig+0x348>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a83      	ldr	r2, [pc, #524]	; (80055f4 <UART_SetConfig+0x2d0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d132      	bne.n	8005452 <UART_SetConfig+0x12e>
 80053ec:	4b80      	ldr	r3, [pc, #512]	; (80055f0 <UART_SetConfig+0x2cc>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d828      	bhi.n	800544c <UART_SetConfig+0x128>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0xdc>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005435 	.word	0x08005435
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800544d 	.word	0x0800544d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	08005441 	.word	0x08005441
 8005414:	0800544d 	.word	0x0800544d
 8005418:	0800544d 	.word	0x0800544d
 800541c:	0800544d 	.word	0x0800544d
 8005420:	0800543b 	.word	0x0800543b
 8005424:	0800544d 	.word	0x0800544d
 8005428:	0800544d 	.word	0x0800544d
 800542c:	0800544d 	.word	0x0800544d
 8005430:	08005447 	.word	0x08005447
 8005434:	2300      	movs	r3, #0
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e118      	b.n	800566c <UART_SetConfig+0x348>
 800543a:	2302      	movs	r3, #2
 800543c:	77fb      	strb	r3, [r7, #31]
 800543e:	e115      	b.n	800566c <UART_SetConfig+0x348>
 8005440:	2304      	movs	r3, #4
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	e112      	b.n	800566c <UART_SetConfig+0x348>
 8005446:	2308      	movs	r3, #8
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e10f      	b.n	800566c <UART_SetConfig+0x348>
 800544c:	2310      	movs	r3, #16
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e10c      	b.n	800566c <UART_SetConfig+0x348>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a68      	ldr	r2, [pc, #416]	; (80055f8 <UART_SetConfig+0x2d4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d120      	bne.n	800549e <UART_SetConfig+0x17a>
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <UART_SetConfig+0x2cc>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005466:	2b30      	cmp	r3, #48	; 0x30
 8005468:	d013      	beq.n	8005492 <UART_SetConfig+0x16e>
 800546a:	2b30      	cmp	r3, #48	; 0x30
 800546c:	d814      	bhi.n	8005498 <UART_SetConfig+0x174>
 800546e:	2b20      	cmp	r3, #32
 8005470:	d009      	beq.n	8005486 <UART_SetConfig+0x162>
 8005472:	2b20      	cmp	r3, #32
 8005474:	d810      	bhi.n	8005498 <UART_SetConfig+0x174>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <UART_SetConfig+0x15c>
 800547a:	2b10      	cmp	r3, #16
 800547c:	d006      	beq.n	800548c <UART_SetConfig+0x168>
 800547e:	e00b      	b.n	8005498 <UART_SetConfig+0x174>
 8005480:	2300      	movs	r3, #0
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e0f2      	b.n	800566c <UART_SetConfig+0x348>
 8005486:	2302      	movs	r3, #2
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e0ef      	b.n	800566c <UART_SetConfig+0x348>
 800548c:	2304      	movs	r3, #4
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e0ec      	b.n	800566c <UART_SetConfig+0x348>
 8005492:	2308      	movs	r3, #8
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e0e9      	b.n	800566c <UART_SetConfig+0x348>
 8005498:	2310      	movs	r3, #16
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e0e6      	b.n	800566c <UART_SetConfig+0x348>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a56      	ldr	r2, [pc, #344]	; (80055fc <UART_SetConfig+0x2d8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d120      	bne.n	80054ea <UART_SetConfig+0x1c6>
 80054a8:	4b51      	ldr	r3, [pc, #324]	; (80055f0 <UART_SetConfig+0x2cc>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054b2:	2bc0      	cmp	r3, #192	; 0xc0
 80054b4:	d013      	beq.n	80054de <UART_SetConfig+0x1ba>
 80054b6:	2bc0      	cmp	r3, #192	; 0xc0
 80054b8:	d814      	bhi.n	80054e4 <UART_SetConfig+0x1c0>
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d009      	beq.n	80054d2 <UART_SetConfig+0x1ae>
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d810      	bhi.n	80054e4 <UART_SetConfig+0x1c0>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <UART_SetConfig+0x1a8>
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d006      	beq.n	80054d8 <UART_SetConfig+0x1b4>
 80054ca:	e00b      	b.n	80054e4 <UART_SetConfig+0x1c0>
 80054cc:	2300      	movs	r3, #0
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	e0cc      	b.n	800566c <UART_SetConfig+0x348>
 80054d2:	2302      	movs	r3, #2
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	e0c9      	b.n	800566c <UART_SetConfig+0x348>
 80054d8:	2304      	movs	r3, #4
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e0c6      	b.n	800566c <UART_SetConfig+0x348>
 80054de:	2308      	movs	r3, #8
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e0c3      	b.n	800566c <UART_SetConfig+0x348>
 80054e4:	2310      	movs	r3, #16
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e0c0      	b.n	800566c <UART_SetConfig+0x348>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a44      	ldr	r2, [pc, #272]	; (8005600 <UART_SetConfig+0x2dc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d125      	bne.n	8005540 <UART_SetConfig+0x21c>
 80054f4:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <UART_SetConfig+0x2cc>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d017      	beq.n	8005534 <UART_SetConfig+0x210>
 8005504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005508:	d817      	bhi.n	800553a <UART_SetConfig+0x216>
 800550a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550e:	d00b      	beq.n	8005528 <UART_SetConfig+0x204>
 8005510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005514:	d811      	bhi.n	800553a <UART_SetConfig+0x216>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <UART_SetConfig+0x1fe>
 800551a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551e:	d006      	beq.n	800552e <UART_SetConfig+0x20a>
 8005520:	e00b      	b.n	800553a <UART_SetConfig+0x216>
 8005522:	2300      	movs	r3, #0
 8005524:	77fb      	strb	r3, [r7, #31]
 8005526:	e0a1      	b.n	800566c <UART_SetConfig+0x348>
 8005528:	2302      	movs	r3, #2
 800552a:	77fb      	strb	r3, [r7, #31]
 800552c:	e09e      	b.n	800566c <UART_SetConfig+0x348>
 800552e:	2304      	movs	r3, #4
 8005530:	77fb      	strb	r3, [r7, #31]
 8005532:	e09b      	b.n	800566c <UART_SetConfig+0x348>
 8005534:	2308      	movs	r3, #8
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e098      	b.n	800566c <UART_SetConfig+0x348>
 800553a:	2310      	movs	r3, #16
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	e095      	b.n	800566c <UART_SetConfig+0x348>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2f      	ldr	r2, [pc, #188]	; (8005604 <UART_SetConfig+0x2e0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d125      	bne.n	8005596 <UART_SetConfig+0x272>
 800554a:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <UART_SetConfig+0x2cc>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005558:	d017      	beq.n	800558a <UART_SetConfig+0x266>
 800555a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800555e:	d817      	bhi.n	8005590 <UART_SetConfig+0x26c>
 8005560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005564:	d00b      	beq.n	800557e <UART_SetConfig+0x25a>
 8005566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556a:	d811      	bhi.n	8005590 <UART_SetConfig+0x26c>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <UART_SetConfig+0x254>
 8005570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005574:	d006      	beq.n	8005584 <UART_SetConfig+0x260>
 8005576:	e00b      	b.n	8005590 <UART_SetConfig+0x26c>
 8005578:	2301      	movs	r3, #1
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e076      	b.n	800566c <UART_SetConfig+0x348>
 800557e:	2302      	movs	r3, #2
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e073      	b.n	800566c <UART_SetConfig+0x348>
 8005584:	2304      	movs	r3, #4
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e070      	b.n	800566c <UART_SetConfig+0x348>
 800558a:	2308      	movs	r3, #8
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e06d      	b.n	800566c <UART_SetConfig+0x348>
 8005590:	2310      	movs	r3, #16
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e06a      	b.n	800566c <UART_SetConfig+0x348>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <UART_SetConfig+0x2e4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d138      	bne.n	8005612 <UART_SetConfig+0x2ee>
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <UART_SetConfig+0x2cc>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ae:	d017      	beq.n	80055e0 <UART_SetConfig+0x2bc>
 80055b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055b4:	d82a      	bhi.n	800560c <UART_SetConfig+0x2e8>
 80055b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ba:	d00b      	beq.n	80055d4 <UART_SetConfig+0x2b0>
 80055bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c0:	d824      	bhi.n	800560c <UART_SetConfig+0x2e8>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <UART_SetConfig+0x2aa>
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d006      	beq.n	80055da <UART_SetConfig+0x2b6>
 80055cc:	e01e      	b.n	800560c <UART_SetConfig+0x2e8>
 80055ce:	2300      	movs	r3, #0
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e04b      	b.n	800566c <UART_SetConfig+0x348>
 80055d4:	2302      	movs	r3, #2
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e048      	b.n	800566c <UART_SetConfig+0x348>
 80055da:	2304      	movs	r3, #4
 80055dc:	77fb      	strb	r3, [r7, #31]
 80055de:	e045      	b.n	800566c <UART_SetConfig+0x348>
 80055e0:	2308      	movs	r3, #8
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e042      	b.n	800566c <UART_SetConfig+0x348>
 80055e6:	bf00      	nop
 80055e8:	efff69f3 	.word	0xefff69f3
 80055ec:	40011000 	.word	0x40011000
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40004400 	.word	0x40004400
 80055f8:	40004800 	.word	0x40004800
 80055fc:	40004c00 	.word	0x40004c00
 8005600:	40005000 	.word	0x40005000
 8005604:	40011400 	.word	0x40011400
 8005608:	40007800 	.word	0x40007800
 800560c:	2310      	movs	r3, #16
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e02c      	b.n	800566c <UART_SetConfig+0x348>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a72      	ldr	r2, [pc, #456]	; (80057e0 <UART_SetConfig+0x4bc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d125      	bne.n	8005668 <UART_SetConfig+0x344>
 800561c:	4b71      	ldr	r3, [pc, #452]	; (80057e4 <UART_SetConfig+0x4c0>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005626:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800562a:	d017      	beq.n	800565c <UART_SetConfig+0x338>
 800562c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005630:	d817      	bhi.n	8005662 <UART_SetConfig+0x33e>
 8005632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005636:	d00b      	beq.n	8005650 <UART_SetConfig+0x32c>
 8005638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563c:	d811      	bhi.n	8005662 <UART_SetConfig+0x33e>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <UART_SetConfig+0x326>
 8005642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005646:	d006      	beq.n	8005656 <UART_SetConfig+0x332>
 8005648:	e00b      	b.n	8005662 <UART_SetConfig+0x33e>
 800564a:	2300      	movs	r3, #0
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e00d      	b.n	800566c <UART_SetConfig+0x348>
 8005650:	2302      	movs	r3, #2
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e00a      	b.n	800566c <UART_SetConfig+0x348>
 8005656:	2304      	movs	r3, #4
 8005658:	77fb      	strb	r3, [r7, #31]
 800565a:	e007      	b.n	800566c <UART_SetConfig+0x348>
 800565c:	2308      	movs	r3, #8
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e004      	b.n	800566c <UART_SetConfig+0x348>
 8005662:	2310      	movs	r3, #16
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e001      	b.n	800566c <UART_SetConfig+0x348>
 8005668:	2310      	movs	r3, #16
 800566a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005674:	d15b      	bne.n	800572e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005676:	7ffb      	ldrb	r3, [r7, #31]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d828      	bhi.n	80056ce <UART_SetConfig+0x3aa>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0x360>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	080056a9 	.word	0x080056a9
 8005688:	080056b1 	.word	0x080056b1
 800568c:	080056b9 	.word	0x080056b9
 8005690:	080056cf 	.word	0x080056cf
 8005694:	080056bf 	.word	0x080056bf
 8005698:	080056cf 	.word	0x080056cf
 800569c:	080056cf 	.word	0x080056cf
 80056a0:	080056cf 	.word	0x080056cf
 80056a4:	080056c7 	.word	0x080056c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a8:	f7fd fcd4 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 80056ac:	61b8      	str	r0, [r7, #24]
        break;
 80056ae:	e013      	b.n	80056d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b0:	f7fd fce4 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 80056b4:	61b8      	str	r0, [r7, #24]
        break;
 80056b6:	e00f      	b.n	80056d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b8:	4b4b      	ldr	r3, [pc, #300]	; (80057e8 <UART_SetConfig+0x4c4>)
 80056ba:	61bb      	str	r3, [r7, #24]
        break;
 80056bc:	e00c      	b.n	80056d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056be:	f7fd fbb7 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 80056c2:	61b8      	str	r0, [r7, #24]
        break;
 80056c4:	e008      	b.n	80056d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ca:	61bb      	str	r3, [r7, #24]
        break;
 80056cc:	e004      	b.n	80056d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	77bb      	strb	r3, [r7, #30]
        break;
 80056d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d074      	beq.n	80057c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	005a      	lsls	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	441a      	add	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d916      	bls.n	8005728 <UART_SetConfig+0x404>
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d212      	bcs.n	8005728 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f023 030f 	bic.w	r3, r3, #15
 800570a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	b29a      	uxth	r2, r3
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	4313      	orrs	r3, r2
 800571c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	89fa      	ldrh	r2, [r7, #14]
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e04f      	b.n	80057c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	77bb      	strb	r3, [r7, #30]
 800572c:	e04c      	b.n	80057c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800572e:	7ffb      	ldrb	r3, [r7, #31]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d828      	bhi.n	8005786 <UART_SetConfig+0x462>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x418>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005761 	.word	0x08005761
 8005740:	08005769 	.word	0x08005769
 8005744:	08005771 	.word	0x08005771
 8005748:	08005787 	.word	0x08005787
 800574c:	08005777 	.word	0x08005777
 8005750:	08005787 	.word	0x08005787
 8005754:	08005787 	.word	0x08005787
 8005758:	08005787 	.word	0x08005787
 800575c:	0800577f 	.word	0x0800577f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005760:	f7fd fc78 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8005764:	61b8      	str	r0, [r7, #24]
        break;
 8005766:	e013      	b.n	8005790 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005768:	f7fd fc88 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 800576c:	61b8      	str	r0, [r7, #24]
        break;
 800576e:	e00f      	b.n	8005790 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <UART_SetConfig+0x4c4>)
 8005772:	61bb      	str	r3, [r7, #24]
        break;
 8005774:	e00c      	b.n	8005790 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005776:	f7fd fb5b 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 800577a:	61b8      	str	r0, [r7, #24]
        break;
 800577c:	e008      	b.n	8005790 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005782:	61bb      	str	r3, [r7, #24]
        break;
 8005784:	e004      	b.n	8005790 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	77bb      	strb	r3, [r7, #30]
        break;
 800578e:	bf00      	nop
    }

    if (pclk != 0U)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	085a      	lsrs	r2, r3, #1
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	441a      	add	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b0f      	cmp	r3, #15
 80057ae:	d909      	bls.n	80057c4 <UART_SetConfig+0x4a0>
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b6:	d205      	bcs.n	80057c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60da      	str	r2, [r3, #12]
 80057c2:	e001      	b.n	80057c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40007c00 	.word	0x40007c00
 80057e4:	40023800 	.word	0x40023800
 80057e8:	00f42400 	.word	0x00f42400

080057ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01a      	beq.n	8005902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ea:	d10a      	bne.n	8005902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005940:	f7fb fdbe 	bl	80014c0 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10e      	bne.n	8005972 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f81b 	bl	800599e <UART_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e011      	b.n	8005996 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b09c      	sub	sp, #112	; 0x70
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ae:	e0a7      	b.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	f000 80a3 	beq.w	8005b00 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ba:	f7fb fd81 	bl	80014c0 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d302      	bcc.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d13f      	bne.n	8005a50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059e4:	667b      	str	r3, [r7, #100]	; 0x64
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e6      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3308      	adds	r3, #8
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	663b      	str	r3, [r7, #96]	; 0x60
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a22:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e5      	bne.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e068      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d050      	beq.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6c:	d148      	bne.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	637b      	str	r3, [r7, #52]	; 0x34
 8005a98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e6      	bne.n	8005a78 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aca:	623a      	str	r2, [r7, #32]
 8005acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	69f9      	ldr	r1, [r7, #28]
 8005ad0:	6a3a      	ldr	r2, [r7, #32]
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e5      	bne.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e010      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	f43f af48 	beq.w	80059b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3770      	adds	r7, #112	; 0x70
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b095      	sub	sp, #84	; 0x54
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	643b      	str	r3, [r7, #64]	; 0x40
 8005b52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e6      	bne.n	8005b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3308      	adds	r3, #8
 8005b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d118      	bne.n	8005bd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f023 0310 	bic.w	r3, r3, #16
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005be6:	bf00      	nop
 8005be8:	3754      	adds	r7, #84	; 0x54
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fb71 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b088      	sub	sp, #32
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fb3d 	bl	80052e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c6a:	bf00      	nop
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	; (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000040 	.word	0x20000040

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4d0d      	ldr	r5, [pc, #52]	; (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4d0b      	ldr	r5, [pc, #44]	; (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	; (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f000 fe20 	bl	80068d8 <_init>
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	08006aa0 	.word	0x08006aa0
 8005cbc:	08006aa0 	.word	0x08006aa0
 8005cc0:	08006aa0 	.word	0x08006aa0
 8005cc4:	08006aa4 	.word	0x08006aa4

08005cc8 <memset>:
 8005cc8:	4402      	add	r2, r0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <siscanf>:
 8005cd8:	b40e      	push	{r1, r2, r3}
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	b09f      	sub	sp, #124	; 0x7c
 8005cde:	ac21      	add	r4, sp, #132	; 0x84
 8005ce0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005ce4:	f854 2b04 	ldr.w	r2, [r4], #4
 8005ce8:	9201      	str	r2, [sp, #4]
 8005cea:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005cee:	9004      	str	r0, [sp, #16]
 8005cf0:	9008      	str	r0, [sp, #32]
 8005cf2:	f7fa fa8d 	bl	8000210 <strlen>
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <siscanf+0x50>)
 8005cf8:	9005      	str	r0, [sp, #20]
 8005cfa:	9009      	str	r0, [sp, #36]	; 0x24
 8005cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8005cfe:	480b      	ldr	r0, [pc, #44]	; (8005d2c <siscanf+0x54>)
 8005d00:	9a01      	ldr	r2, [sp, #4]
 8005d02:	6800      	ldr	r0, [r0, #0]
 8005d04:	9403      	str	r4, [sp, #12]
 8005d06:	2300      	movs	r3, #0
 8005d08:	9311      	str	r3, [sp, #68]	; 0x44
 8005d0a:	9316      	str	r3, [sp, #88]	; 0x58
 8005d0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005d14:	a904      	add	r1, sp, #16
 8005d16:	4623      	mov	r3, r4
 8005d18:	f000 f866 	bl	8005de8 <__ssvfiscanf_r>
 8005d1c:	b01f      	add	sp, #124	; 0x7c
 8005d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d22:	b003      	add	sp, #12
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	08005d31 	.word	0x08005d31
 8005d2c:	20000040 	.word	0x20000040

08005d30 <__seofread>:
 8005d30:	2000      	movs	r0, #0
 8005d32:	4770      	bx	lr

08005d34 <_sungetc_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	1c4b      	adds	r3, r1, #1
 8005d38:	4614      	mov	r4, r2
 8005d3a:	d103      	bne.n	8005d44 <_sungetc_r+0x10>
 8005d3c:	f04f 35ff 	mov.w	r5, #4294967295
 8005d40:	4628      	mov	r0, r5
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	8993      	ldrh	r3, [r2, #12]
 8005d46:	f023 0320 	bic.w	r3, r3, #32
 8005d4a:	8193      	strh	r3, [r2, #12]
 8005d4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d4e:	6852      	ldr	r2, [r2, #4]
 8005d50:	b2cd      	uxtb	r5, r1
 8005d52:	b18b      	cbz	r3, 8005d78 <_sungetc_r+0x44>
 8005d54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d56:	4293      	cmp	r3, r2
 8005d58:	dd08      	ble.n	8005d6c <_sungetc_r+0x38>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	1e5a      	subs	r2, r3, #1
 8005d5e:	6022      	str	r2, [r4, #0]
 8005d60:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	3301      	adds	r3, #1
 8005d68:	6063      	str	r3, [r4, #4]
 8005d6a:	e7e9      	b.n	8005d40 <_sungetc_r+0xc>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	f000 fc35 	bl	80065dc <__submore>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d0f1      	beq.n	8005d5a <_sungetc_r+0x26>
 8005d76:	e7e1      	b.n	8005d3c <_sungetc_r+0x8>
 8005d78:	6921      	ldr	r1, [r4, #16]
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	b151      	cbz	r1, 8005d94 <_sungetc_r+0x60>
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	d208      	bcs.n	8005d94 <_sungetc_r+0x60>
 8005d82:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005d86:	42a9      	cmp	r1, r5
 8005d88:	d104      	bne.n	8005d94 <_sungetc_r+0x60>
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	3201      	adds	r2, #1
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	6062      	str	r2, [r4, #4]
 8005d92:	e7d5      	b.n	8005d40 <_sungetc_r+0xc>
 8005d94:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d9e:	2303      	movs	r3, #3
 8005da0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005da2:	4623      	mov	r3, r4
 8005da4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	2301      	movs	r3, #1
 8005dac:	e7dc      	b.n	8005d68 <_sungetc_r+0x34>

08005dae <__ssrefill_r>:
 8005dae:	b510      	push	{r4, lr}
 8005db0:	460c      	mov	r4, r1
 8005db2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005db4:	b169      	cbz	r1, 8005dd2 <__ssrefill_r+0x24>
 8005db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dba:	4299      	cmp	r1, r3
 8005dbc:	d001      	beq.n	8005dc2 <__ssrefill_r+0x14>
 8005dbe:	f000 fc57 	bl	8006670 <_free_r>
 8005dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dca:	b113      	cbz	r3, 8005dd2 <__ssrefill_r+0x24>
 8005dcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6063      	str	r3, [r4, #4]
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	f043 0320 	orr.w	r3, r3, #32
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295
 8005de6:	e7f3      	b.n	8005dd0 <__ssrefill_r+0x22>

08005de8 <__ssvfiscanf_r>:
 8005de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	460c      	mov	r4, r1
 8005dee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005df2:	2100      	movs	r1, #0
 8005df4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005df8:	49a6      	ldr	r1, [pc, #664]	; (8006094 <__ssvfiscanf_r+0x2ac>)
 8005dfa:	91a0      	str	r1, [sp, #640]	; 0x280
 8005dfc:	f10d 0804 	add.w	r8, sp, #4
 8005e00:	49a5      	ldr	r1, [pc, #660]	; (8006098 <__ssvfiscanf_r+0x2b0>)
 8005e02:	4fa6      	ldr	r7, [pc, #664]	; (800609c <__ssvfiscanf_r+0x2b4>)
 8005e04:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80060a0 <__ssvfiscanf_r+0x2b8>
 8005e08:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	7813      	ldrb	r3, [r2, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 815a 	beq.w	80060ce <__ssvfiscanf_r+0x2e6>
 8005e1a:	5dd9      	ldrb	r1, [r3, r7]
 8005e1c:	f011 0108 	ands.w	r1, r1, #8
 8005e20:	f102 0501 	add.w	r5, r2, #1
 8005e24:	d019      	beq.n	8005e5a <__ssvfiscanf_r+0x72>
 8005e26:	6863      	ldr	r3, [r4, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	dd0f      	ble.n	8005e4c <__ssvfiscanf_r+0x64>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	781a      	ldrb	r2, [r3, #0]
 8005e30:	5cba      	ldrb	r2, [r7, r2]
 8005e32:	0712      	lsls	r2, r2, #28
 8005e34:	d401      	bmi.n	8005e3a <__ssvfiscanf_r+0x52>
 8005e36:	462a      	mov	r2, r5
 8005e38:	e7eb      	b.n	8005e12 <__ssvfiscanf_r+0x2a>
 8005e3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005e3c:	3201      	adds	r2, #1
 8005e3e:	9245      	str	r2, [sp, #276]	; 0x114
 8005e40:	6862      	ldr	r2, [r4, #4]
 8005e42:	3301      	adds	r3, #1
 8005e44:	3a01      	subs	r2, #1
 8005e46:	6062      	str	r2, [r4, #4]
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	e7ec      	b.n	8005e26 <__ssvfiscanf_r+0x3e>
 8005e4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4630      	mov	r0, r6
 8005e52:	4798      	blx	r3
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d0e9      	beq.n	8005e2c <__ssvfiscanf_r+0x44>
 8005e58:	e7ed      	b.n	8005e36 <__ssvfiscanf_r+0x4e>
 8005e5a:	2b25      	cmp	r3, #37	; 0x25
 8005e5c:	d012      	beq.n	8005e84 <__ssvfiscanf_r+0x9c>
 8005e5e:	469a      	mov	sl, r3
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f340 8091 	ble.w	8005f8a <__ssvfiscanf_r+0x1a2>
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	7813      	ldrb	r3, [r2, #0]
 8005e6c:	4553      	cmp	r3, sl
 8005e6e:	f040 812e 	bne.w	80060ce <__ssvfiscanf_r+0x2e6>
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	6063      	str	r3, [r4, #4]
 8005e78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005e7a:	3201      	adds	r2, #1
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	6022      	str	r2, [r4, #0]
 8005e80:	9345      	str	r3, [sp, #276]	; 0x114
 8005e82:	e7d8      	b.n	8005e36 <__ssvfiscanf_r+0x4e>
 8005e84:	9141      	str	r1, [sp, #260]	; 0x104
 8005e86:	9143      	str	r1, [sp, #268]	; 0x10c
 8005e88:	7853      	ldrb	r3, [r2, #1]
 8005e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8c:	bf02      	ittt	eq
 8005e8e:	2310      	moveq	r3, #16
 8005e90:	1c95      	addeq	r5, r2, #2
 8005e92:	9341      	streq	r3, [sp, #260]	; 0x104
 8005e94:	220a      	movs	r2, #10
 8005e96:	46aa      	mov	sl, r5
 8005e98:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005e9c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005ea0:	2b09      	cmp	r3, #9
 8005ea2:	d91d      	bls.n	8005ee0 <__ssvfiscanf_r+0xf8>
 8005ea4:	487e      	ldr	r0, [pc, #504]	; (80060a0 <__ssvfiscanf_r+0x2b8>)
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	f7fa f9ba 	bl	8000220 <memchr>
 8005eac:	b140      	cbz	r0, 8005ec0 <__ssvfiscanf_r+0xd8>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	eba0 0009 	sub.w	r0, r0, r9
 8005eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8005eb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005eba:	4318      	orrs	r0, r3
 8005ebc:	9041      	str	r0, [sp, #260]	; 0x104
 8005ebe:	4655      	mov	r5, sl
 8005ec0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ec4:	2b78      	cmp	r3, #120	; 0x78
 8005ec6:	d806      	bhi.n	8005ed6 <__ssvfiscanf_r+0xee>
 8005ec8:	2b57      	cmp	r3, #87	; 0x57
 8005eca:	d810      	bhi.n	8005eee <__ssvfiscanf_r+0x106>
 8005ecc:	2b25      	cmp	r3, #37	; 0x25
 8005ece:	d0c6      	beq.n	8005e5e <__ssvfiscanf_r+0x76>
 8005ed0:	d856      	bhi.n	8005f80 <__ssvfiscanf_r+0x198>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d064      	beq.n	8005fa0 <__ssvfiscanf_r+0x1b8>
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	9347      	str	r3, [sp, #284]	; 0x11c
 8005eda:	230a      	movs	r3, #10
 8005edc:	9342      	str	r3, [sp, #264]	; 0x108
 8005ede:	e071      	b.n	8005fc4 <__ssvfiscanf_r+0x1dc>
 8005ee0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005ee2:	fb02 1103 	mla	r1, r2, r3, r1
 8005ee6:	3930      	subs	r1, #48	; 0x30
 8005ee8:	9143      	str	r1, [sp, #268]	; 0x10c
 8005eea:	4655      	mov	r5, sl
 8005eec:	e7d3      	b.n	8005e96 <__ssvfiscanf_r+0xae>
 8005eee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005ef2:	2a20      	cmp	r2, #32
 8005ef4:	d8ef      	bhi.n	8005ed6 <__ssvfiscanf_r+0xee>
 8005ef6:	a101      	add	r1, pc, #4	; (adr r1, 8005efc <__ssvfiscanf_r+0x114>)
 8005ef8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005efc:	08005faf 	.word	0x08005faf
 8005f00:	08005ed7 	.word	0x08005ed7
 8005f04:	08005ed7 	.word	0x08005ed7
 8005f08:	0800600d 	.word	0x0800600d
 8005f0c:	08005ed7 	.word	0x08005ed7
 8005f10:	08005ed7 	.word	0x08005ed7
 8005f14:	08005ed7 	.word	0x08005ed7
 8005f18:	08005ed7 	.word	0x08005ed7
 8005f1c:	08005ed7 	.word	0x08005ed7
 8005f20:	08005ed7 	.word	0x08005ed7
 8005f24:	08005ed7 	.word	0x08005ed7
 8005f28:	08006023 	.word	0x08006023
 8005f2c:	08005ff9 	.word	0x08005ff9
 8005f30:	08005f87 	.word	0x08005f87
 8005f34:	08005f87 	.word	0x08005f87
 8005f38:	08005f87 	.word	0x08005f87
 8005f3c:	08005ed7 	.word	0x08005ed7
 8005f40:	08005ffd 	.word	0x08005ffd
 8005f44:	08005ed7 	.word	0x08005ed7
 8005f48:	08005ed7 	.word	0x08005ed7
 8005f4c:	08005ed7 	.word	0x08005ed7
 8005f50:	08005ed7 	.word	0x08005ed7
 8005f54:	08006033 	.word	0x08006033
 8005f58:	08006005 	.word	0x08006005
 8005f5c:	08005fa7 	.word	0x08005fa7
 8005f60:	08005ed7 	.word	0x08005ed7
 8005f64:	08005ed7 	.word	0x08005ed7
 8005f68:	0800602f 	.word	0x0800602f
 8005f6c:	08005ed7 	.word	0x08005ed7
 8005f70:	08005ff9 	.word	0x08005ff9
 8005f74:	08005ed7 	.word	0x08005ed7
 8005f78:	08005ed7 	.word	0x08005ed7
 8005f7c:	08005faf 	.word	0x08005faf
 8005f80:	3b45      	subs	r3, #69	; 0x45
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d8a7      	bhi.n	8005ed6 <__ssvfiscanf_r+0xee>
 8005f86:	2305      	movs	r3, #5
 8005f88:	e01b      	b.n	8005fc2 <__ssvfiscanf_r+0x1da>
 8005f8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4630      	mov	r0, r6
 8005f90:	4798      	blx	r3
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f43f af68 	beq.w	8005e68 <__ssvfiscanf_r+0x80>
 8005f98:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	f040 808d 	bne.w	80060ba <__ssvfiscanf_r+0x2d2>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	e08f      	b.n	80060c6 <__ssvfiscanf_r+0x2de>
 8005fa6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005fa8:	f042 0220 	orr.w	r2, r2, #32
 8005fac:	9241      	str	r2, [sp, #260]	; 0x104
 8005fae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb4:	9241      	str	r2, [sp, #260]	; 0x104
 8005fb6:	2210      	movs	r2, #16
 8005fb8:	2b6f      	cmp	r3, #111	; 0x6f
 8005fba:	9242      	str	r2, [sp, #264]	; 0x108
 8005fbc:	bf34      	ite	cc
 8005fbe:	2303      	movcc	r3, #3
 8005fc0:	2304      	movcs	r3, #4
 8005fc2:	9347      	str	r3, [sp, #284]	; 0x11c
 8005fc4:	6863      	ldr	r3, [r4, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dd42      	ble.n	8006050 <__ssvfiscanf_r+0x268>
 8005fca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005fcc:	0659      	lsls	r1, r3, #25
 8005fce:	d404      	bmi.n	8005fda <__ssvfiscanf_r+0x1f2>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	5cba      	ldrb	r2, [r7, r2]
 8005fd6:	0712      	lsls	r2, r2, #28
 8005fd8:	d441      	bmi.n	800605e <__ssvfiscanf_r+0x276>
 8005fda:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	dc50      	bgt.n	8006082 <__ssvfiscanf_r+0x29a>
 8005fe0:	466b      	mov	r3, sp
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	a941      	add	r1, sp, #260	; 0x104
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f000 f876 	bl	80060d8 <_scanf_chars>
 8005fec:	2801      	cmp	r0, #1
 8005fee:	d06e      	beq.n	80060ce <__ssvfiscanf_r+0x2e6>
 8005ff0:	2802      	cmp	r0, #2
 8005ff2:	f47f af20 	bne.w	8005e36 <__ssvfiscanf_r+0x4e>
 8005ff6:	e7cf      	b.n	8005f98 <__ssvfiscanf_r+0x1b0>
 8005ff8:	220a      	movs	r2, #10
 8005ffa:	e7dd      	b.n	8005fb8 <__ssvfiscanf_r+0x1d0>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9342      	str	r3, [sp, #264]	; 0x108
 8006000:	2303      	movs	r3, #3
 8006002:	e7de      	b.n	8005fc2 <__ssvfiscanf_r+0x1da>
 8006004:	2308      	movs	r3, #8
 8006006:	9342      	str	r3, [sp, #264]	; 0x108
 8006008:	2304      	movs	r3, #4
 800600a:	e7da      	b.n	8005fc2 <__ssvfiscanf_r+0x1da>
 800600c:	4629      	mov	r1, r5
 800600e:	4640      	mov	r0, r8
 8006010:	f000 f9b4 	bl	800637c <__sccl>
 8006014:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601a:	9341      	str	r3, [sp, #260]	; 0x104
 800601c:	4605      	mov	r5, r0
 800601e:	2301      	movs	r3, #1
 8006020:	e7cf      	b.n	8005fc2 <__ssvfiscanf_r+0x1da>
 8006022:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006028:	9341      	str	r3, [sp, #260]	; 0x104
 800602a:	2300      	movs	r3, #0
 800602c:	e7c9      	b.n	8005fc2 <__ssvfiscanf_r+0x1da>
 800602e:	2302      	movs	r3, #2
 8006030:	e7c7      	b.n	8005fc2 <__ssvfiscanf_r+0x1da>
 8006032:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006034:	06c3      	lsls	r3, r0, #27
 8006036:	f53f aefe 	bmi.w	8005e36 <__ssvfiscanf_r+0x4e>
 800603a:	9b00      	ldr	r3, [sp, #0]
 800603c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800603e:	1d19      	adds	r1, r3, #4
 8006040:	9100      	str	r1, [sp, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f010 0f01 	tst.w	r0, #1
 8006048:	bf14      	ite	ne
 800604a:	801a      	strhne	r2, [r3, #0]
 800604c:	601a      	streq	r2, [r3, #0]
 800604e:	e6f2      	b.n	8005e36 <__ssvfiscanf_r+0x4e>
 8006050:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006052:	4621      	mov	r1, r4
 8006054:	4630      	mov	r0, r6
 8006056:	4798      	blx	r3
 8006058:	2800      	cmp	r0, #0
 800605a:	d0b6      	beq.n	8005fca <__ssvfiscanf_r+0x1e2>
 800605c:	e79c      	b.n	8005f98 <__ssvfiscanf_r+0x1b0>
 800605e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006060:	3201      	adds	r2, #1
 8006062:	9245      	str	r2, [sp, #276]	; 0x114
 8006064:	6862      	ldr	r2, [r4, #4]
 8006066:	3a01      	subs	r2, #1
 8006068:	2a00      	cmp	r2, #0
 800606a:	6062      	str	r2, [r4, #4]
 800606c:	dd02      	ble.n	8006074 <__ssvfiscanf_r+0x28c>
 800606e:	3301      	adds	r3, #1
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	e7ad      	b.n	8005fd0 <__ssvfiscanf_r+0x1e8>
 8006074:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006076:	4621      	mov	r1, r4
 8006078:	4630      	mov	r0, r6
 800607a:	4798      	blx	r3
 800607c:	2800      	cmp	r0, #0
 800607e:	d0a7      	beq.n	8005fd0 <__ssvfiscanf_r+0x1e8>
 8006080:	e78a      	b.n	8005f98 <__ssvfiscanf_r+0x1b0>
 8006082:	2b04      	cmp	r3, #4
 8006084:	dc0e      	bgt.n	80060a4 <__ssvfiscanf_r+0x2bc>
 8006086:	466b      	mov	r3, sp
 8006088:	4622      	mov	r2, r4
 800608a:	a941      	add	r1, sp, #260	; 0x104
 800608c:	4630      	mov	r0, r6
 800608e:	f000 f87d 	bl	800618c <_scanf_i>
 8006092:	e7ab      	b.n	8005fec <__ssvfiscanf_r+0x204>
 8006094:	08005d35 	.word	0x08005d35
 8006098:	08005daf 	.word	0x08005daf
 800609c:	08006938 	.word	0x08006938
 80060a0:	08006918 	.word	0x08006918
 80060a4:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <__ssvfiscanf_r+0x2ec>)
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f43f aec5 	beq.w	8005e36 <__ssvfiscanf_r+0x4e>
 80060ac:	466b      	mov	r3, sp
 80060ae:	4622      	mov	r2, r4
 80060b0:	a941      	add	r1, sp, #260	; 0x104
 80060b2:	4630      	mov	r0, r6
 80060b4:	f3af 8000 	nop.w
 80060b8:	e798      	b.n	8005fec <__ssvfiscanf_r+0x204>
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060c0:	bf18      	it	ne
 80060c2:	f04f 30ff 	movne.w	r0, #4294967295
 80060c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80060ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80060d0:	e7f9      	b.n	80060c6 <__ssvfiscanf_r+0x2de>
 80060d2:	bf00      	nop
 80060d4:	00000000 	.word	0x00000000

080060d8 <_scanf_chars>:
 80060d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060dc:	4615      	mov	r5, r2
 80060de:	688a      	ldr	r2, [r1, #8]
 80060e0:	4680      	mov	r8, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	b932      	cbnz	r2, 80060f4 <_scanf_chars+0x1c>
 80060e6:	698a      	ldr	r2, [r1, #24]
 80060e8:	2a00      	cmp	r2, #0
 80060ea:	bf0c      	ite	eq
 80060ec:	2201      	moveq	r2, #1
 80060ee:	f04f 32ff 	movne.w	r2, #4294967295
 80060f2:	608a      	str	r2, [r1, #8]
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006188 <_scanf_chars+0xb0>
 80060fa:	06d1      	lsls	r1, r2, #27
 80060fc:	bf5f      	itttt	pl
 80060fe:	681a      	ldrpl	r2, [r3, #0]
 8006100:	1d11      	addpl	r1, r2, #4
 8006102:	6019      	strpl	r1, [r3, #0]
 8006104:	6816      	ldrpl	r6, [r2, #0]
 8006106:	2700      	movs	r7, #0
 8006108:	69a0      	ldr	r0, [r4, #24]
 800610a:	b188      	cbz	r0, 8006130 <_scanf_chars+0x58>
 800610c:	2801      	cmp	r0, #1
 800610e:	d107      	bne.n	8006120 <_scanf_chars+0x48>
 8006110:	682a      	ldr	r2, [r5, #0]
 8006112:	7811      	ldrb	r1, [r2, #0]
 8006114:	6962      	ldr	r2, [r4, #20]
 8006116:	5c52      	ldrb	r2, [r2, r1]
 8006118:	b952      	cbnz	r2, 8006130 <_scanf_chars+0x58>
 800611a:	2f00      	cmp	r7, #0
 800611c:	d031      	beq.n	8006182 <_scanf_chars+0xaa>
 800611e:	e022      	b.n	8006166 <_scanf_chars+0x8e>
 8006120:	2802      	cmp	r0, #2
 8006122:	d120      	bne.n	8006166 <_scanf_chars+0x8e>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f813 3009 	ldrb.w	r3, [r3, r9]
 800612c:	071b      	lsls	r3, r3, #28
 800612e:	d41a      	bmi.n	8006166 <_scanf_chars+0x8e>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	06da      	lsls	r2, r3, #27
 8006134:	bf5e      	ittt	pl
 8006136:	682b      	ldrpl	r3, [r5, #0]
 8006138:	781b      	ldrbpl	r3, [r3, #0]
 800613a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800613e:	682a      	ldr	r2, [r5, #0]
 8006140:	686b      	ldr	r3, [r5, #4]
 8006142:	3201      	adds	r2, #1
 8006144:	602a      	str	r2, [r5, #0]
 8006146:	68a2      	ldr	r2, [r4, #8]
 8006148:	3b01      	subs	r3, #1
 800614a:	3a01      	subs	r2, #1
 800614c:	606b      	str	r3, [r5, #4]
 800614e:	3701      	adds	r7, #1
 8006150:	60a2      	str	r2, [r4, #8]
 8006152:	b142      	cbz	r2, 8006166 <_scanf_chars+0x8e>
 8006154:	2b00      	cmp	r3, #0
 8006156:	dcd7      	bgt.n	8006108 <_scanf_chars+0x30>
 8006158:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800615c:	4629      	mov	r1, r5
 800615e:	4640      	mov	r0, r8
 8006160:	4798      	blx	r3
 8006162:	2800      	cmp	r0, #0
 8006164:	d0d0      	beq.n	8006108 <_scanf_chars+0x30>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	f013 0310 	ands.w	r3, r3, #16
 800616c:	d105      	bne.n	800617a <_scanf_chars+0xa2>
 800616e:	68e2      	ldr	r2, [r4, #12]
 8006170:	3201      	adds	r2, #1
 8006172:	60e2      	str	r2, [r4, #12]
 8006174:	69a2      	ldr	r2, [r4, #24]
 8006176:	b102      	cbz	r2, 800617a <_scanf_chars+0xa2>
 8006178:	7033      	strb	r3, [r6, #0]
 800617a:	6923      	ldr	r3, [r4, #16]
 800617c:	443b      	add	r3, r7
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	2000      	movs	r0, #0
 8006182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006186:	bf00      	nop
 8006188:	08006938 	.word	0x08006938

0800618c <_scanf_i>:
 800618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006190:	4698      	mov	r8, r3
 8006192:	4b76      	ldr	r3, [pc, #472]	; (800636c <_scanf_i+0x1e0>)
 8006194:	460c      	mov	r4, r1
 8006196:	4682      	mov	sl, r0
 8006198:	4616      	mov	r6, r2
 800619a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800619e:	b087      	sub	sp, #28
 80061a0:	ab03      	add	r3, sp, #12
 80061a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80061a6:	4b72      	ldr	r3, [pc, #456]	; (8006370 <_scanf_i+0x1e4>)
 80061a8:	69a1      	ldr	r1, [r4, #24]
 80061aa:	4a72      	ldr	r2, [pc, #456]	; (8006374 <_scanf_i+0x1e8>)
 80061ac:	2903      	cmp	r1, #3
 80061ae:	bf18      	it	ne
 80061b0:	461a      	movne	r2, r3
 80061b2:	68a3      	ldr	r3, [r4, #8]
 80061b4:	9201      	str	r2, [sp, #4]
 80061b6:	1e5a      	subs	r2, r3, #1
 80061b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80061bc:	bf88      	it	hi
 80061be:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80061c2:	4627      	mov	r7, r4
 80061c4:	bf82      	ittt	hi
 80061c6:	eb03 0905 	addhi.w	r9, r3, r5
 80061ca:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061ce:	60a3      	strhi	r3, [r4, #8]
 80061d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80061d4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80061d8:	bf98      	it	ls
 80061da:	f04f 0900 	movls.w	r9, #0
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	463d      	mov	r5, r7
 80061e2:	f04f 0b00 	mov.w	fp, #0
 80061e6:	6831      	ldr	r1, [r6, #0]
 80061e8:	ab03      	add	r3, sp, #12
 80061ea:	7809      	ldrb	r1, [r1, #0]
 80061ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f7fa f815 	bl	8000220 <memchr>
 80061f6:	b328      	cbz	r0, 8006244 <_scanf_i+0xb8>
 80061f8:	f1bb 0f01 	cmp.w	fp, #1
 80061fc:	d159      	bne.n	80062b2 <_scanf_i+0x126>
 80061fe:	6862      	ldr	r2, [r4, #4]
 8006200:	b92a      	cbnz	r2, 800620e <_scanf_i+0x82>
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	2308      	movs	r3, #8
 8006206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800620a:	6063      	str	r3, [r4, #4]
 800620c:	6022      	str	r2, [r4, #0]
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006214:	6022      	str	r2, [r4, #0]
 8006216:	68a2      	ldr	r2, [r4, #8]
 8006218:	1e51      	subs	r1, r2, #1
 800621a:	60a1      	str	r1, [r4, #8]
 800621c:	b192      	cbz	r2, 8006244 <_scanf_i+0xb8>
 800621e:	6832      	ldr	r2, [r6, #0]
 8006220:	1c51      	adds	r1, r2, #1
 8006222:	6031      	str	r1, [r6, #0]
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	f805 2b01 	strb.w	r2, [r5], #1
 800622a:	6872      	ldr	r2, [r6, #4]
 800622c:	3a01      	subs	r2, #1
 800622e:	2a00      	cmp	r2, #0
 8006230:	6072      	str	r2, [r6, #4]
 8006232:	dc07      	bgt.n	8006244 <_scanf_i+0xb8>
 8006234:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006238:	4631      	mov	r1, r6
 800623a:	4650      	mov	r0, sl
 800623c:	4790      	blx	r2
 800623e:	2800      	cmp	r0, #0
 8006240:	f040 8085 	bne.w	800634e <_scanf_i+0x1c2>
 8006244:	f10b 0b01 	add.w	fp, fp, #1
 8006248:	f1bb 0f03 	cmp.w	fp, #3
 800624c:	d1cb      	bne.n	80061e6 <_scanf_i+0x5a>
 800624e:	6863      	ldr	r3, [r4, #4]
 8006250:	b90b      	cbnz	r3, 8006256 <_scanf_i+0xca>
 8006252:	230a      	movs	r3, #10
 8006254:	6063      	str	r3, [r4, #4]
 8006256:	6863      	ldr	r3, [r4, #4]
 8006258:	4947      	ldr	r1, [pc, #284]	; (8006378 <_scanf_i+0x1ec>)
 800625a:	6960      	ldr	r0, [r4, #20]
 800625c:	1ac9      	subs	r1, r1, r3
 800625e:	f000 f88d 	bl	800637c <__sccl>
 8006262:	f04f 0b00 	mov.w	fp, #0
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	6822      	ldr	r2, [r4, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d03d      	beq.n	80062ea <_scanf_i+0x15e>
 800626e:	6831      	ldr	r1, [r6, #0]
 8006270:	6960      	ldr	r0, [r4, #20]
 8006272:	f891 c000 	ldrb.w	ip, [r1]
 8006276:	f810 000c 	ldrb.w	r0, [r0, ip]
 800627a:	2800      	cmp	r0, #0
 800627c:	d035      	beq.n	80062ea <_scanf_i+0x15e>
 800627e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006282:	d124      	bne.n	80062ce <_scanf_i+0x142>
 8006284:	0510      	lsls	r0, r2, #20
 8006286:	d522      	bpl.n	80062ce <_scanf_i+0x142>
 8006288:	f10b 0b01 	add.w	fp, fp, #1
 800628c:	f1b9 0f00 	cmp.w	r9, #0
 8006290:	d003      	beq.n	800629a <_scanf_i+0x10e>
 8006292:	3301      	adds	r3, #1
 8006294:	f109 39ff 	add.w	r9, r9, #4294967295
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	6873      	ldr	r3, [r6, #4]
 800629c:	3b01      	subs	r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	6073      	str	r3, [r6, #4]
 80062a2:	dd1b      	ble.n	80062dc <_scanf_i+0x150>
 80062a4:	6833      	ldr	r3, [r6, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	6033      	str	r3, [r6, #0]
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	60a3      	str	r3, [r4, #8]
 80062b0:	e7d9      	b.n	8006266 <_scanf_i+0xda>
 80062b2:	f1bb 0f02 	cmp.w	fp, #2
 80062b6:	d1ae      	bne.n	8006216 <_scanf_i+0x8a>
 80062b8:	6822      	ldr	r2, [r4, #0]
 80062ba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80062be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80062c2:	d1bf      	bne.n	8006244 <_scanf_i+0xb8>
 80062c4:	2310      	movs	r3, #16
 80062c6:	6063      	str	r3, [r4, #4]
 80062c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062cc:	e7a2      	b.n	8006214 <_scanf_i+0x88>
 80062ce:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80062d2:	6022      	str	r2, [r4, #0]
 80062d4:	780b      	ldrb	r3, [r1, #0]
 80062d6:	f805 3b01 	strb.w	r3, [r5], #1
 80062da:	e7de      	b.n	800629a <_scanf_i+0x10e>
 80062dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062e0:	4631      	mov	r1, r6
 80062e2:	4650      	mov	r0, sl
 80062e4:	4798      	blx	r3
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d0df      	beq.n	80062aa <_scanf_i+0x11e>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	05db      	lsls	r3, r3, #23
 80062ee:	d50d      	bpl.n	800630c <_scanf_i+0x180>
 80062f0:	42bd      	cmp	r5, r7
 80062f2:	d909      	bls.n	8006308 <_scanf_i+0x17c>
 80062f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80062f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062fc:	4632      	mov	r2, r6
 80062fe:	4650      	mov	r0, sl
 8006300:	4798      	blx	r3
 8006302:	f105 39ff 	add.w	r9, r5, #4294967295
 8006306:	464d      	mov	r5, r9
 8006308:	42bd      	cmp	r5, r7
 800630a:	d02d      	beq.n	8006368 <_scanf_i+0x1dc>
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	f012 0210 	ands.w	r2, r2, #16
 8006312:	d113      	bne.n	800633c <_scanf_i+0x1b0>
 8006314:	702a      	strb	r2, [r5, #0]
 8006316:	6863      	ldr	r3, [r4, #4]
 8006318:	9e01      	ldr	r6, [sp, #4]
 800631a:	4639      	mov	r1, r7
 800631c:	4650      	mov	r0, sl
 800631e:	47b0      	blx	r6
 8006320:	6821      	ldr	r1, [r4, #0]
 8006322:	f8d8 3000 	ldr.w	r3, [r8]
 8006326:	f011 0f20 	tst.w	r1, #32
 800632a:	d013      	beq.n	8006354 <_scanf_i+0x1c8>
 800632c:	1d1a      	adds	r2, r3, #4
 800632e:	f8c8 2000 	str.w	r2, [r8]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6018      	str	r0, [r3, #0]
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60e3      	str	r3, [r4, #12]
 800633c:	1bed      	subs	r5, r5, r7
 800633e:	44ab      	add	fp, r5
 8006340:	6925      	ldr	r5, [r4, #16]
 8006342:	445d      	add	r5, fp
 8006344:	6125      	str	r5, [r4, #16]
 8006346:	2000      	movs	r0, #0
 8006348:	b007      	add	sp, #28
 800634a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634e:	f04f 0b00 	mov.w	fp, #0
 8006352:	e7ca      	b.n	80062ea <_scanf_i+0x15e>
 8006354:	1d1a      	adds	r2, r3, #4
 8006356:	f8c8 2000 	str.w	r2, [r8]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f011 0f01 	tst.w	r1, #1
 8006360:	bf14      	ite	ne
 8006362:	8018      	strhne	r0, [r3, #0]
 8006364:	6018      	streq	r0, [r3, #0]
 8006366:	e7e6      	b.n	8006336 <_scanf_i+0x1aa>
 8006368:	2001      	movs	r0, #1
 800636a:	e7ed      	b.n	8006348 <_scanf_i+0x1bc>
 800636c:	080068f4 	.word	0x080068f4
 8006370:	080065d9 	.word	0x080065d9
 8006374:	080064f1 	.word	0x080064f1
 8006378:	08006935 	.word	0x08006935

0800637c <__sccl>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	780b      	ldrb	r3, [r1, #0]
 8006380:	4604      	mov	r4, r0
 8006382:	2b5e      	cmp	r3, #94	; 0x5e
 8006384:	bf0b      	itete	eq
 8006386:	784b      	ldrbeq	r3, [r1, #1]
 8006388:	1c48      	addne	r0, r1, #1
 800638a:	1c88      	addeq	r0, r1, #2
 800638c:	2200      	movne	r2, #0
 800638e:	bf08      	it	eq
 8006390:	2201      	moveq	r2, #1
 8006392:	1e61      	subs	r1, r4, #1
 8006394:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006398:	f801 2f01 	strb.w	r2, [r1, #1]!
 800639c:	42a9      	cmp	r1, r5
 800639e:	d1fb      	bne.n	8006398 <__sccl+0x1c>
 80063a0:	b90b      	cbnz	r3, 80063a6 <__sccl+0x2a>
 80063a2:	3801      	subs	r0, #1
 80063a4:	bd70      	pop	{r4, r5, r6, pc}
 80063a6:	f082 0201 	eor.w	r2, r2, #1
 80063aa:	54e2      	strb	r2, [r4, r3]
 80063ac:	4605      	mov	r5, r0
 80063ae:	4628      	mov	r0, r5
 80063b0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80063b4:	292d      	cmp	r1, #45	; 0x2d
 80063b6:	d006      	beq.n	80063c6 <__sccl+0x4a>
 80063b8:	295d      	cmp	r1, #93	; 0x5d
 80063ba:	d0f3      	beq.n	80063a4 <__sccl+0x28>
 80063bc:	b909      	cbnz	r1, 80063c2 <__sccl+0x46>
 80063be:	4628      	mov	r0, r5
 80063c0:	e7f0      	b.n	80063a4 <__sccl+0x28>
 80063c2:	460b      	mov	r3, r1
 80063c4:	e7f1      	b.n	80063aa <__sccl+0x2e>
 80063c6:	786e      	ldrb	r6, [r5, #1]
 80063c8:	2e5d      	cmp	r6, #93	; 0x5d
 80063ca:	d0fa      	beq.n	80063c2 <__sccl+0x46>
 80063cc:	42b3      	cmp	r3, r6
 80063ce:	dcf8      	bgt.n	80063c2 <__sccl+0x46>
 80063d0:	3502      	adds	r5, #2
 80063d2:	4619      	mov	r1, r3
 80063d4:	3101      	adds	r1, #1
 80063d6:	428e      	cmp	r6, r1
 80063d8:	5462      	strb	r2, [r4, r1]
 80063da:	dcfb      	bgt.n	80063d4 <__sccl+0x58>
 80063dc:	1af1      	subs	r1, r6, r3
 80063de:	3901      	subs	r1, #1
 80063e0:	1c58      	adds	r0, r3, #1
 80063e2:	42b3      	cmp	r3, r6
 80063e4:	bfa8      	it	ge
 80063e6:	2100      	movge	r1, #0
 80063e8:	1843      	adds	r3, r0, r1
 80063ea:	e7e0      	b.n	80063ae <__sccl+0x32>

080063ec <_strtol_l.constprop.0>:
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f2:	d001      	beq.n	80063f8 <_strtol_l.constprop.0+0xc>
 80063f4:	2b24      	cmp	r3, #36	; 0x24
 80063f6:	d906      	bls.n	8006406 <_strtol_l.constprop.0+0x1a>
 80063f8:	f7ff fc3c 	bl	8005c74 <__errno>
 80063fc:	2316      	movs	r3, #22
 80063fe:	6003      	str	r3, [r0, #0]
 8006400:	2000      	movs	r0, #0
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80064ec <_strtol_l.constprop.0+0x100>
 800640a:	460d      	mov	r5, r1
 800640c:	462e      	mov	r6, r5
 800640e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006412:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006416:	f017 0708 	ands.w	r7, r7, #8
 800641a:	d1f7      	bne.n	800640c <_strtol_l.constprop.0+0x20>
 800641c:	2c2d      	cmp	r4, #45	; 0x2d
 800641e:	d132      	bne.n	8006486 <_strtol_l.constprop.0+0x9a>
 8006420:	782c      	ldrb	r4, [r5, #0]
 8006422:	2701      	movs	r7, #1
 8006424:	1cb5      	adds	r5, r6, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d05b      	beq.n	80064e2 <_strtol_l.constprop.0+0xf6>
 800642a:	2b10      	cmp	r3, #16
 800642c:	d109      	bne.n	8006442 <_strtol_l.constprop.0+0x56>
 800642e:	2c30      	cmp	r4, #48	; 0x30
 8006430:	d107      	bne.n	8006442 <_strtol_l.constprop.0+0x56>
 8006432:	782c      	ldrb	r4, [r5, #0]
 8006434:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006438:	2c58      	cmp	r4, #88	; 0x58
 800643a:	d14d      	bne.n	80064d8 <_strtol_l.constprop.0+0xec>
 800643c:	786c      	ldrb	r4, [r5, #1]
 800643e:	2310      	movs	r3, #16
 8006440:	3502      	adds	r5, #2
 8006442:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006446:	f108 38ff 	add.w	r8, r8, #4294967295
 800644a:	f04f 0c00 	mov.w	ip, #0
 800644e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006452:	4666      	mov	r6, ip
 8006454:	fb03 8a19 	mls	sl, r3, r9, r8
 8006458:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800645c:	f1be 0f09 	cmp.w	lr, #9
 8006460:	d816      	bhi.n	8006490 <_strtol_l.constprop.0+0xa4>
 8006462:	4674      	mov	r4, lr
 8006464:	42a3      	cmp	r3, r4
 8006466:	dd24      	ble.n	80064b2 <_strtol_l.constprop.0+0xc6>
 8006468:	f1bc 0f00 	cmp.w	ip, #0
 800646c:	db1e      	blt.n	80064ac <_strtol_l.constprop.0+0xc0>
 800646e:	45b1      	cmp	r9, r6
 8006470:	d31c      	bcc.n	80064ac <_strtol_l.constprop.0+0xc0>
 8006472:	d101      	bne.n	8006478 <_strtol_l.constprop.0+0x8c>
 8006474:	45a2      	cmp	sl, r4
 8006476:	db19      	blt.n	80064ac <_strtol_l.constprop.0+0xc0>
 8006478:	fb06 4603 	mla	r6, r6, r3, r4
 800647c:	f04f 0c01 	mov.w	ip, #1
 8006480:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006484:	e7e8      	b.n	8006458 <_strtol_l.constprop.0+0x6c>
 8006486:	2c2b      	cmp	r4, #43	; 0x2b
 8006488:	bf04      	itt	eq
 800648a:	782c      	ldrbeq	r4, [r5, #0]
 800648c:	1cb5      	addeq	r5, r6, #2
 800648e:	e7ca      	b.n	8006426 <_strtol_l.constprop.0+0x3a>
 8006490:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006494:	f1be 0f19 	cmp.w	lr, #25
 8006498:	d801      	bhi.n	800649e <_strtol_l.constprop.0+0xb2>
 800649a:	3c37      	subs	r4, #55	; 0x37
 800649c:	e7e2      	b.n	8006464 <_strtol_l.constprop.0+0x78>
 800649e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80064a2:	f1be 0f19 	cmp.w	lr, #25
 80064a6:	d804      	bhi.n	80064b2 <_strtol_l.constprop.0+0xc6>
 80064a8:	3c57      	subs	r4, #87	; 0x57
 80064aa:	e7db      	b.n	8006464 <_strtol_l.constprop.0+0x78>
 80064ac:	f04f 3cff 	mov.w	ip, #4294967295
 80064b0:	e7e6      	b.n	8006480 <_strtol_l.constprop.0+0x94>
 80064b2:	f1bc 0f00 	cmp.w	ip, #0
 80064b6:	da05      	bge.n	80064c4 <_strtol_l.constprop.0+0xd8>
 80064b8:	2322      	movs	r3, #34	; 0x22
 80064ba:	6003      	str	r3, [r0, #0]
 80064bc:	4646      	mov	r6, r8
 80064be:	b942      	cbnz	r2, 80064d2 <_strtol_l.constprop.0+0xe6>
 80064c0:	4630      	mov	r0, r6
 80064c2:	e79e      	b.n	8006402 <_strtol_l.constprop.0+0x16>
 80064c4:	b107      	cbz	r7, 80064c8 <_strtol_l.constprop.0+0xdc>
 80064c6:	4276      	negs	r6, r6
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	d0f9      	beq.n	80064c0 <_strtol_l.constprop.0+0xd4>
 80064cc:	f1bc 0f00 	cmp.w	ip, #0
 80064d0:	d000      	beq.n	80064d4 <_strtol_l.constprop.0+0xe8>
 80064d2:	1e69      	subs	r1, r5, #1
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	e7f3      	b.n	80064c0 <_strtol_l.constprop.0+0xd4>
 80064d8:	2430      	movs	r4, #48	; 0x30
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1b1      	bne.n	8006442 <_strtol_l.constprop.0+0x56>
 80064de:	2308      	movs	r3, #8
 80064e0:	e7af      	b.n	8006442 <_strtol_l.constprop.0+0x56>
 80064e2:	2c30      	cmp	r4, #48	; 0x30
 80064e4:	d0a5      	beq.n	8006432 <_strtol_l.constprop.0+0x46>
 80064e6:	230a      	movs	r3, #10
 80064e8:	e7ab      	b.n	8006442 <_strtol_l.constprop.0+0x56>
 80064ea:	bf00      	nop
 80064ec:	08006938 	.word	0x08006938

080064f0 <_strtol_r>:
 80064f0:	f7ff bf7c 	b.w	80063ec <_strtol_l.constprop.0>

080064f4 <_strtoul_l.constprop.0>:
 80064f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064f8:	4f36      	ldr	r7, [pc, #216]	; (80065d4 <_strtoul_l.constprop.0+0xe0>)
 80064fa:	4686      	mov	lr, r0
 80064fc:	460d      	mov	r5, r1
 80064fe:	4628      	mov	r0, r5
 8006500:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006504:	5de6      	ldrb	r6, [r4, r7]
 8006506:	f016 0608 	ands.w	r6, r6, #8
 800650a:	d1f8      	bne.n	80064fe <_strtoul_l.constprop.0+0xa>
 800650c:	2c2d      	cmp	r4, #45	; 0x2d
 800650e:	d12f      	bne.n	8006570 <_strtoul_l.constprop.0+0x7c>
 8006510:	782c      	ldrb	r4, [r5, #0]
 8006512:	2601      	movs	r6, #1
 8006514:	1c85      	adds	r5, r0, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d057      	beq.n	80065ca <_strtoul_l.constprop.0+0xd6>
 800651a:	2b10      	cmp	r3, #16
 800651c:	d109      	bne.n	8006532 <_strtoul_l.constprop.0+0x3e>
 800651e:	2c30      	cmp	r4, #48	; 0x30
 8006520:	d107      	bne.n	8006532 <_strtoul_l.constprop.0+0x3e>
 8006522:	7828      	ldrb	r0, [r5, #0]
 8006524:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006528:	2858      	cmp	r0, #88	; 0x58
 800652a:	d149      	bne.n	80065c0 <_strtoul_l.constprop.0+0xcc>
 800652c:	786c      	ldrb	r4, [r5, #1]
 800652e:	2310      	movs	r3, #16
 8006530:	3502      	adds	r5, #2
 8006532:	f04f 38ff 	mov.w	r8, #4294967295
 8006536:	2700      	movs	r7, #0
 8006538:	fbb8 f8f3 	udiv	r8, r8, r3
 800653c:	fb03 f908 	mul.w	r9, r3, r8
 8006540:	ea6f 0909 	mvn.w	r9, r9
 8006544:	4638      	mov	r0, r7
 8006546:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800654a:	f1bc 0f09 	cmp.w	ip, #9
 800654e:	d814      	bhi.n	800657a <_strtoul_l.constprop.0+0x86>
 8006550:	4664      	mov	r4, ip
 8006552:	42a3      	cmp	r3, r4
 8006554:	dd22      	ble.n	800659c <_strtoul_l.constprop.0+0xa8>
 8006556:	2f00      	cmp	r7, #0
 8006558:	db1d      	blt.n	8006596 <_strtoul_l.constprop.0+0xa2>
 800655a:	4580      	cmp	r8, r0
 800655c:	d31b      	bcc.n	8006596 <_strtoul_l.constprop.0+0xa2>
 800655e:	d101      	bne.n	8006564 <_strtoul_l.constprop.0+0x70>
 8006560:	45a1      	cmp	r9, r4
 8006562:	db18      	blt.n	8006596 <_strtoul_l.constprop.0+0xa2>
 8006564:	fb00 4003 	mla	r0, r0, r3, r4
 8006568:	2701      	movs	r7, #1
 800656a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800656e:	e7ea      	b.n	8006546 <_strtoul_l.constprop.0+0x52>
 8006570:	2c2b      	cmp	r4, #43	; 0x2b
 8006572:	bf04      	itt	eq
 8006574:	782c      	ldrbeq	r4, [r5, #0]
 8006576:	1c85      	addeq	r5, r0, #2
 8006578:	e7cd      	b.n	8006516 <_strtoul_l.constprop.0+0x22>
 800657a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800657e:	f1bc 0f19 	cmp.w	ip, #25
 8006582:	d801      	bhi.n	8006588 <_strtoul_l.constprop.0+0x94>
 8006584:	3c37      	subs	r4, #55	; 0x37
 8006586:	e7e4      	b.n	8006552 <_strtoul_l.constprop.0+0x5e>
 8006588:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800658c:	f1bc 0f19 	cmp.w	ip, #25
 8006590:	d804      	bhi.n	800659c <_strtoul_l.constprop.0+0xa8>
 8006592:	3c57      	subs	r4, #87	; 0x57
 8006594:	e7dd      	b.n	8006552 <_strtoul_l.constprop.0+0x5e>
 8006596:	f04f 37ff 	mov.w	r7, #4294967295
 800659a:	e7e6      	b.n	800656a <_strtoul_l.constprop.0+0x76>
 800659c:	2f00      	cmp	r7, #0
 800659e:	da07      	bge.n	80065b0 <_strtoul_l.constprop.0+0xbc>
 80065a0:	2322      	movs	r3, #34	; 0x22
 80065a2:	f8ce 3000 	str.w	r3, [lr]
 80065a6:	f04f 30ff 	mov.w	r0, #4294967295
 80065aa:	b932      	cbnz	r2, 80065ba <_strtoul_l.constprop.0+0xc6>
 80065ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065b0:	b106      	cbz	r6, 80065b4 <_strtoul_l.constprop.0+0xc0>
 80065b2:	4240      	negs	r0, r0
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d0f9      	beq.n	80065ac <_strtoul_l.constprop.0+0xb8>
 80065b8:	b107      	cbz	r7, 80065bc <_strtoul_l.constprop.0+0xc8>
 80065ba:	1e69      	subs	r1, r5, #1
 80065bc:	6011      	str	r1, [r2, #0]
 80065be:	e7f5      	b.n	80065ac <_strtoul_l.constprop.0+0xb8>
 80065c0:	2430      	movs	r4, #48	; 0x30
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1b5      	bne.n	8006532 <_strtoul_l.constprop.0+0x3e>
 80065c6:	2308      	movs	r3, #8
 80065c8:	e7b3      	b.n	8006532 <_strtoul_l.constprop.0+0x3e>
 80065ca:	2c30      	cmp	r4, #48	; 0x30
 80065cc:	d0a9      	beq.n	8006522 <_strtoul_l.constprop.0+0x2e>
 80065ce:	230a      	movs	r3, #10
 80065d0:	e7af      	b.n	8006532 <_strtoul_l.constprop.0+0x3e>
 80065d2:	bf00      	nop
 80065d4:	08006938 	.word	0x08006938

080065d8 <_strtoul_r>:
 80065d8:	f7ff bf8c 	b.w	80064f4 <_strtoul_l.constprop.0>

080065dc <__submore>:
 80065dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	460c      	mov	r4, r1
 80065e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80065e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065e8:	4299      	cmp	r1, r3
 80065ea:	d11d      	bne.n	8006628 <__submore+0x4c>
 80065ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065f0:	f000 f8aa 	bl	8006748 <_malloc_r>
 80065f4:	b918      	cbnz	r0, 80065fe <__submore+0x22>
 80065f6:	f04f 30ff 	mov.w	r0, #4294967295
 80065fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006602:	63a3      	str	r3, [r4, #56]	; 0x38
 8006604:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006608:	6360      	str	r0, [r4, #52]	; 0x34
 800660a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800660e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006612:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006616:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800661a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800661e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006622:	6020      	str	r0, [r4, #0]
 8006624:	2000      	movs	r0, #0
 8006626:	e7e8      	b.n	80065fa <__submore+0x1e>
 8006628:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800662a:	0077      	lsls	r7, r6, #1
 800662c:	463a      	mov	r2, r7
 800662e:	f000 f8ff 	bl	8006830 <_realloc_r>
 8006632:	4605      	mov	r5, r0
 8006634:	2800      	cmp	r0, #0
 8006636:	d0de      	beq.n	80065f6 <__submore+0x1a>
 8006638:	eb00 0806 	add.w	r8, r0, r6
 800663c:	4601      	mov	r1, r0
 800663e:	4632      	mov	r2, r6
 8006640:	4640      	mov	r0, r8
 8006642:	f000 f807 	bl	8006654 <memcpy>
 8006646:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800664a:	f8c4 8000 	str.w	r8, [r4]
 800664e:	e7e9      	b.n	8006624 <__submore+0x48>

08006650 <__retarget_lock_acquire_recursive>:
 8006650:	4770      	bx	lr

08006652 <__retarget_lock_release_recursive>:
 8006652:	4770      	bx	lr

08006654 <memcpy>:
 8006654:	440a      	add	r2, r1
 8006656:	4291      	cmp	r1, r2
 8006658:	f100 33ff 	add.w	r3, r0, #4294967295
 800665c:	d100      	bne.n	8006660 <memcpy+0xc>
 800665e:	4770      	bx	lr
 8006660:	b510      	push	{r4, lr}
 8006662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800666a:	4291      	cmp	r1, r2
 800666c:	d1f9      	bne.n	8006662 <memcpy+0xe>
 800666e:	bd10      	pop	{r4, pc}

08006670 <_free_r>:
 8006670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006672:	2900      	cmp	r1, #0
 8006674:	d044      	beq.n	8006700 <_free_r+0x90>
 8006676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667a:	9001      	str	r0, [sp, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f1a1 0404 	sub.w	r4, r1, #4
 8006682:	bfb8      	it	lt
 8006684:	18e4      	addlt	r4, r4, r3
 8006686:	f000 f913 	bl	80068b0 <__malloc_lock>
 800668a:	4a1e      	ldr	r2, [pc, #120]	; (8006704 <_free_r+0x94>)
 800668c:	9801      	ldr	r0, [sp, #4]
 800668e:	6813      	ldr	r3, [r2, #0]
 8006690:	b933      	cbnz	r3, 80066a0 <_free_r+0x30>
 8006692:	6063      	str	r3, [r4, #4]
 8006694:	6014      	str	r4, [r2, #0]
 8006696:	b003      	add	sp, #12
 8006698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800669c:	f000 b90e 	b.w	80068bc <__malloc_unlock>
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	d908      	bls.n	80066b6 <_free_r+0x46>
 80066a4:	6825      	ldr	r5, [r4, #0]
 80066a6:	1961      	adds	r1, r4, r5
 80066a8:	428b      	cmp	r3, r1
 80066aa:	bf01      	itttt	eq
 80066ac:	6819      	ldreq	r1, [r3, #0]
 80066ae:	685b      	ldreq	r3, [r3, #4]
 80066b0:	1949      	addeq	r1, r1, r5
 80066b2:	6021      	streq	r1, [r4, #0]
 80066b4:	e7ed      	b.n	8006692 <_free_r+0x22>
 80066b6:	461a      	mov	r2, r3
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	b10b      	cbz	r3, 80066c0 <_free_r+0x50>
 80066bc:	42a3      	cmp	r3, r4
 80066be:	d9fa      	bls.n	80066b6 <_free_r+0x46>
 80066c0:	6811      	ldr	r1, [r2, #0]
 80066c2:	1855      	adds	r5, r2, r1
 80066c4:	42a5      	cmp	r5, r4
 80066c6:	d10b      	bne.n	80066e0 <_free_r+0x70>
 80066c8:	6824      	ldr	r4, [r4, #0]
 80066ca:	4421      	add	r1, r4
 80066cc:	1854      	adds	r4, r2, r1
 80066ce:	42a3      	cmp	r3, r4
 80066d0:	6011      	str	r1, [r2, #0]
 80066d2:	d1e0      	bne.n	8006696 <_free_r+0x26>
 80066d4:	681c      	ldr	r4, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	6053      	str	r3, [r2, #4]
 80066da:	4421      	add	r1, r4
 80066dc:	6011      	str	r1, [r2, #0]
 80066de:	e7da      	b.n	8006696 <_free_r+0x26>
 80066e0:	d902      	bls.n	80066e8 <_free_r+0x78>
 80066e2:	230c      	movs	r3, #12
 80066e4:	6003      	str	r3, [r0, #0]
 80066e6:	e7d6      	b.n	8006696 <_free_r+0x26>
 80066e8:	6825      	ldr	r5, [r4, #0]
 80066ea:	1961      	adds	r1, r4, r5
 80066ec:	428b      	cmp	r3, r1
 80066ee:	bf04      	itt	eq
 80066f0:	6819      	ldreq	r1, [r3, #0]
 80066f2:	685b      	ldreq	r3, [r3, #4]
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	bf04      	itt	eq
 80066f8:	1949      	addeq	r1, r1, r5
 80066fa:	6021      	streq	r1, [r4, #0]
 80066fc:	6054      	str	r4, [r2, #4]
 80066fe:	e7ca      	b.n	8006696 <_free_r+0x26>
 8006700:	b003      	add	sp, #12
 8006702:	bd30      	pop	{r4, r5, pc}
 8006704:	20000298 	.word	0x20000298

08006708 <sbrk_aligned>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	4e0e      	ldr	r6, [pc, #56]	; (8006744 <sbrk_aligned+0x3c>)
 800670c:	460c      	mov	r4, r1
 800670e:	6831      	ldr	r1, [r6, #0]
 8006710:	4605      	mov	r5, r0
 8006712:	b911      	cbnz	r1, 800671a <sbrk_aligned+0x12>
 8006714:	f000 f8bc 	bl	8006890 <_sbrk_r>
 8006718:	6030      	str	r0, [r6, #0]
 800671a:	4621      	mov	r1, r4
 800671c:	4628      	mov	r0, r5
 800671e:	f000 f8b7 	bl	8006890 <_sbrk_r>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d00a      	beq.n	800673c <sbrk_aligned+0x34>
 8006726:	1cc4      	adds	r4, r0, #3
 8006728:	f024 0403 	bic.w	r4, r4, #3
 800672c:	42a0      	cmp	r0, r4
 800672e:	d007      	beq.n	8006740 <sbrk_aligned+0x38>
 8006730:	1a21      	subs	r1, r4, r0
 8006732:	4628      	mov	r0, r5
 8006734:	f000 f8ac 	bl	8006890 <_sbrk_r>
 8006738:	3001      	adds	r0, #1
 800673a:	d101      	bne.n	8006740 <sbrk_aligned+0x38>
 800673c:	f04f 34ff 	mov.w	r4, #4294967295
 8006740:	4620      	mov	r0, r4
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	2000029c 	.word	0x2000029c

08006748 <_malloc_r>:
 8006748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674c:	1ccd      	adds	r5, r1, #3
 800674e:	f025 0503 	bic.w	r5, r5, #3
 8006752:	3508      	adds	r5, #8
 8006754:	2d0c      	cmp	r5, #12
 8006756:	bf38      	it	cc
 8006758:	250c      	movcc	r5, #12
 800675a:	2d00      	cmp	r5, #0
 800675c:	4607      	mov	r7, r0
 800675e:	db01      	blt.n	8006764 <_malloc_r+0x1c>
 8006760:	42a9      	cmp	r1, r5
 8006762:	d905      	bls.n	8006770 <_malloc_r+0x28>
 8006764:	230c      	movs	r3, #12
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	2600      	movs	r6, #0
 800676a:	4630      	mov	r0, r6
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	4e2e      	ldr	r6, [pc, #184]	; (800682c <_malloc_r+0xe4>)
 8006772:	f000 f89d 	bl	80068b0 <__malloc_lock>
 8006776:	6833      	ldr	r3, [r6, #0]
 8006778:	461c      	mov	r4, r3
 800677a:	bb34      	cbnz	r4, 80067ca <_malloc_r+0x82>
 800677c:	4629      	mov	r1, r5
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff ffc2 	bl	8006708 <sbrk_aligned>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	4604      	mov	r4, r0
 8006788:	d14d      	bne.n	8006826 <_malloc_r+0xde>
 800678a:	6834      	ldr	r4, [r6, #0]
 800678c:	4626      	mov	r6, r4
 800678e:	2e00      	cmp	r6, #0
 8006790:	d140      	bne.n	8006814 <_malloc_r+0xcc>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	4631      	mov	r1, r6
 8006796:	4638      	mov	r0, r7
 8006798:	eb04 0803 	add.w	r8, r4, r3
 800679c:	f000 f878 	bl	8006890 <_sbrk_r>
 80067a0:	4580      	cmp	r8, r0
 80067a2:	d13a      	bne.n	800681a <_malloc_r+0xd2>
 80067a4:	6821      	ldr	r1, [r4, #0]
 80067a6:	3503      	adds	r5, #3
 80067a8:	1a6d      	subs	r5, r5, r1
 80067aa:	f025 0503 	bic.w	r5, r5, #3
 80067ae:	3508      	adds	r5, #8
 80067b0:	2d0c      	cmp	r5, #12
 80067b2:	bf38      	it	cc
 80067b4:	250c      	movcc	r5, #12
 80067b6:	4629      	mov	r1, r5
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff ffa5 	bl	8006708 <sbrk_aligned>
 80067be:	3001      	adds	r0, #1
 80067c0:	d02b      	beq.n	800681a <_malloc_r+0xd2>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	442b      	add	r3, r5
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	e00e      	b.n	80067e8 <_malloc_r+0xa0>
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	1b52      	subs	r2, r2, r5
 80067ce:	d41e      	bmi.n	800680e <_malloc_r+0xc6>
 80067d0:	2a0b      	cmp	r2, #11
 80067d2:	d916      	bls.n	8006802 <_malloc_r+0xba>
 80067d4:	1961      	adds	r1, r4, r5
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	6025      	str	r5, [r4, #0]
 80067da:	bf18      	it	ne
 80067dc:	6059      	strne	r1, [r3, #4]
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	bf08      	it	eq
 80067e2:	6031      	streq	r1, [r6, #0]
 80067e4:	5162      	str	r2, [r4, r5]
 80067e6:	604b      	str	r3, [r1, #4]
 80067e8:	4638      	mov	r0, r7
 80067ea:	f104 060b 	add.w	r6, r4, #11
 80067ee:	f000 f865 	bl	80068bc <__malloc_unlock>
 80067f2:	f026 0607 	bic.w	r6, r6, #7
 80067f6:	1d23      	adds	r3, r4, #4
 80067f8:	1af2      	subs	r2, r6, r3
 80067fa:	d0b6      	beq.n	800676a <_malloc_r+0x22>
 80067fc:	1b9b      	subs	r3, r3, r6
 80067fe:	50a3      	str	r3, [r4, r2]
 8006800:	e7b3      	b.n	800676a <_malloc_r+0x22>
 8006802:	6862      	ldr	r2, [r4, #4]
 8006804:	42a3      	cmp	r3, r4
 8006806:	bf0c      	ite	eq
 8006808:	6032      	streq	r2, [r6, #0]
 800680a:	605a      	strne	r2, [r3, #4]
 800680c:	e7ec      	b.n	80067e8 <_malloc_r+0xa0>
 800680e:	4623      	mov	r3, r4
 8006810:	6864      	ldr	r4, [r4, #4]
 8006812:	e7b2      	b.n	800677a <_malloc_r+0x32>
 8006814:	4634      	mov	r4, r6
 8006816:	6876      	ldr	r6, [r6, #4]
 8006818:	e7b9      	b.n	800678e <_malloc_r+0x46>
 800681a:	230c      	movs	r3, #12
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4638      	mov	r0, r7
 8006820:	f000 f84c 	bl	80068bc <__malloc_unlock>
 8006824:	e7a1      	b.n	800676a <_malloc_r+0x22>
 8006826:	6025      	str	r5, [r4, #0]
 8006828:	e7de      	b.n	80067e8 <_malloc_r+0xa0>
 800682a:	bf00      	nop
 800682c:	20000298 	.word	0x20000298

08006830 <_realloc_r>:
 8006830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006834:	4680      	mov	r8, r0
 8006836:	4614      	mov	r4, r2
 8006838:	460e      	mov	r6, r1
 800683a:	b921      	cbnz	r1, 8006846 <_realloc_r+0x16>
 800683c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	4611      	mov	r1, r2
 8006842:	f7ff bf81 	b.w	8006748 <_malloc_r>
 8006846:	b92a      	cbnz	r2, 8006854 <_realloc_r+0x24>
 8006848:	f7ff ff12 	bl	8006670 <_free_r>
 800684c:	4625      	mov	r5, r4
 800684e:	4628      	mov	r0, r5
 8006850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006854:	f000 f838 	bl	80068c8 <_malloc_usable_size_r>
 8006858:	4284      	cmp	r4, r0
 800685a:	4607      	mov	r7, r0
 800685c:	d802      	bhi.n	8006864 <_realloc_r+0x34>
 800685e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006862:	d812      	bhi.n	800688a <_realloc_r+0x5a>
 8006864:	4621      	mov	r1, r4
 8006866:	4640      	mov	r0, r8
 8006868:	f7ff ff6e 	bl	8006748 <_malloc_r>
 800686c:	4605      	mov	r5, r0
 800686e:	2800      	cmp	r0, #0
 8006870:	d0ed      	beq.n	800684e <_realloc_r+0x1e>
 8006872:	42bc      	cmp	r4, r7
 8006874:	4622      	mov	r2, r4
 8006876:	4631      	mov	r1, r6
 8006878:	bf28      	it	cs
 800687a:	463a      	movcs	r2, r7
 800687c:	f7ff feea 	bl	8006654 <memcpy>
 8006880:	4631      	mov	r1, r6
 8006882:	4640      	mov	r0, r8
 8006884:	f7ff fef4 	bl	8006670 <_free_r>
 8006888:	e7e1      	b.n	800684e <_realloc_r+0x1e>
 800688a:	4635      	mov	r5, r6
 800688c:	e7df      	b.n	800684e <_realloc_r+0x1e>
	...

08006890 <_sbrk_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d06      	ldr	r5, [pc, #24]	; (80068ac <_sbrk_r+0x1c>)
 8006894:	2300      	movs	r3, #0
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	602b      	str	r3, [r5, #0]
 800689c:	f7fa faf8 	bl	8000e90 <_sbrk>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_sbrk_r+0x1a>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_sbrk_r+0x1a>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	20000290 	.word	0x20000290

080068b0 <__malloc_lock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__malloc_lock+0x8>)
 80068b2:	f7ff becd 	b.w	8006650 <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	20000294 	.word	0x20000294

080068bc <__malloc_unlock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__malloc_unlock+0x8>)
 80068be:	f7ff bec8 	b.w	8006652 <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	20000294 	.word	0x20000294

080068c8 <_malloc_usable_size_r>:
 80068c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068cc:	1f18      	subs	r0, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfbc      	itt	lt
 80068d2:	580b      	ldrlt	r3, [r1, r0]
 80068d4:	18c0      	addlt	r0, r0, r3
 80068d6:	4770      	bx	lr

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr
